
DispStepsGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000124c  080094d0  080094d0  000194d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a71c  0800a71c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a724  0800a724  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a724  0800a724  0001a724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a72c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  200001dc  0800a908  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a8c  0800a908  00020a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001074d  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002972  00000000  00000000  0003099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00033310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b57a  00000000  00000000  00034cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001244f  00000000  00000000  00050254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4825  00000000  00000000  000626a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005088  00000000  00000000  00106ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0010bf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094b8 	.word	0x080094b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080094b8 	.word	0x080094b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b9a6 	b.w	8000f60 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f83c 	bl	8000c98 <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_d2lz>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2300      	movs	r3, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	460d      	mov	r5, r1
 8000c36:	f7ff ff5b 	bl	8000af0 <__aeabi_dcmplt>
 8000c3a:	b928      	cbnz	r0, 8000c48 <__aeabi_d2lz+0x1c>
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c44:	f000 b80a 	b.w	8000c5c <__aeabi_d2ulz>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4e:	f000 f805 	bl	8000c5c <__aeabi_d2ulz>
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	bd38      	pop	{r3, r4, r5, pc}
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2ulz>:
 8000c5c:	b5d0      	push	{r4, r6, r7, lr}
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__aeabi_d2ulz+0x34>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	4606      	mov	r6, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	f7ff fcd1 	bl	800060c <__aeabi_dmul>
 8000c6a:	f7ff ffa7 	bl	8000bbc <__aeabi_d2uiz>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	f7ff fc52 	bl	8000518 <__aeabi_ui2d>
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <__aeabi_d2ulz+0x38>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f7ff fcc8 	bl	800060c <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4630      	mov	r0, r6
 8000c82:	4639      	mov	r1, r7
 8000c84:	f7ff fb0a 	bl	800029c <__aeabi_dsub>
 8000c88:	f7ff ff98 	bl	8000bbc <__aeabi_d2uiz>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c90:	3df00000 	.word	0x3df00000
 8000c94:	41f00000 	.word	0x41f00000

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <I2C_Start>:
//    -- Automatically generate a STOP condition after all bytes have been transmitted 
// Direction = 0: Master requests a write transfer
// Direction = 1: Master requests a read transfer
//=============================================================================== 

int8_t I2C_Start(I2C_TypeDef * I2Cx, uint32_t DevAddress, uint8_t Size, uint8_t Direction) {	
 8000f64:	b480      	push	{r7}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	460b      	mov	r3, r1
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	4613      	mov	r3, r2
 8000f78:	71bb      	strb	r3, [r7, #6]
	
	// Direction = 0: Master requests a write transfer
	// Direction = 1: Master requests a read transfer
	
	uint32_t tmpreg = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
	
	// This bit is set by software, and cleared by hardware after the Start followed by the address
	// sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0.
	tmpreg = I2Cx->CR2;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	617b      	str	r3, [r7, #20]
	
	tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <I2C_Start+0x74>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
	
	if (Direction == READ_FROM_SLAVE)
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d104      	bne.n	8000f9c <I2C_Start+0x38>
		tmpreg |= I2C_CR2_RD_WRN;  // Read from Slave
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e003      	b.n	8000fa4 <I2C_Start+0x40>
	else
		tmpreg &= ~I2C_CR2_RD_WRN; // Write to Slave
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fa2:	617b      	str	r3, [r7, #20]
		
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES));
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	041b      	lsls	r3, r3, #16
 8000fae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	617b      	str	r3, [r7, #20]
	
	tmpreg |= I2C_CR2_START;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc0:	617b      	str	r3, [r7, #20]
	// RELOAD
	// 0: The transfer is completed after the NBYTES data transfer (STOP or RESTART will follow).
	// 1: The transfer is not completed after the NBYTES data transfer (NBYTES will be reloaded).
	// tmpreg |= I2C_CR2_RELOAD;
	
	I2Cx->CR2 = tmpreg; 
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	605a      	str	r2, [r3, #4]
//	}
//	
//	if ( (I2Cx->ISR & I2C_ISR_NACKF) == I2C_ISR_NACKF )
//		return -1;  // Failed
	
   	return 0;  // Success
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	fc009800 	.word	0xfc009800

08000fdc <I2C_Stop>:

//===============================================================================
//                           I2C Stop
//=============================================================================== 
void I2C_Stop(I2C_TypeDef * I2Cx){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Master: Generate STOP bit after the current byte has been transferred 
	I2Cx->CR2 |= I2C_CR2_STOP;								
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	605a      	str	r2, [r3, #4]
	// Wait until STOPF flag is reset
	while( (I2Cx->ISR & I2C_ISR_STOPF) == 0 ); 
 8000ff0:	bf00      	nop
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f9      	beq.n	8000ff2 <I2C_Stop+0x16>
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <I2C_WaitLineIdle>:

//===============================================================================
//                           Wait for the bus is ready
//=============================================================================== 
void I2C_WaitLineIdle(I2C_TypeDef * I2Cx){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	// Wait until I2C bus is ready
	while( (I2Cx->ISR & I2C_ISR_BUSY) == I2C_ISR_BUSY );	// If busy, wait
 8001014:	bf00      	nop
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001022:	d0f8      	beq.n	8001016 <I2C_WaitLineIdle+0xa>
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <I2C_SendData>:

//===============================================================================
//                           I2C Send Data
//=============================================================================== 
int8_t I2C_SendData(I2C_TypeDef * I2Cx, uint8_t DeviceAddress, uint8_t *pData, uint8_t Size) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	461a      	mov	r2, r3
 800103e:	460b      	mov	r3, r1
 8001040:	72fb      	strb	r3, [r7, #11]
 8001042:	4613      	mov	r3, r2
 8001044:	72bb      	strb	r3, [r7, #10]
	int i;
	
	if (Size <= 0 || pData == NULL) 
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <I2C_SendData+0x20>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <I2C_SendData+0x26>
		return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	e040      	b.n	80010da <I2C_SendData+0xa8>
	
	I2C_WaitLineIdle(I2Cx);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff ffd7 	bl	800100c <I2C_WaitLineIdle>
	
	if (I2C_Start(I2Cx, DeviceAddress, Size, WRITE_TO_SLAVE) < 0 )
 800105e:	7af9      	ldrb	r1, [r7, #11]
 8001060:	7aba      	ldrb	r2, [r7, #10]
 8001062:	2300      	movs	r3, #0
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff ff7d 	bl	8000f64 <I2C_Start>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	da02      	bge.n	8001076 <I2C_SendData+0x44>
		return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001074:	e031      	b.n	80010da <I2C_SendData+0xa8>
	// Send Data
	// Write the first data in DR register
	// while((I2Cx->ISR & I2C_ISR_TXE) == 0);
	// I2Cx->TXDR = pData[0] & I2C_TXDR_TXDATA;  

	for (i = 0; i < Size; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e010      	b.n	800109e <I2C_SendData+0x6c>
		// TXE is set by hardware when the I2C_TXDR register is empty. It is cleared when the next
		// data to be sent is written in the I2C_TXDR register.
		while( (I2Cx->ISR & I2C_ISR_TXE) == 0 ); 
 800107c:	bf00      	nop
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f9      	beq.n	800107e <I2C_SendData+0x4c>
		// TXIS bit is set by hardware when the I2C_TXDR register is empty and the data to be
		// transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be
		// sent is written in the I2C_TXDR register.
		// The TXIS flag is not set when a NACK is received.
		// while((I2Cx->ISR & I2C_ISR_TXIS) == 0 );
		I2Cx->TXDR = pData[i] & I2C_TXDR_TXDATA;  // TXE is cleared by writing to the TXDR register.
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
	for (i = 0; i < Size; i++) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbea      	blt.n	800107c <I2C_SendData+0x4a>
	}
	
	// Wait until TC flag is set 
	while((I2Cx->ISR & I2C_ISR_TC) == 0 && (I2Cx->ISR & I2C_ISR_NACKF) == 0);
 80010a6:	bf00      	nop
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <I2C_SendData+0x8e>
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0310 	and.w	r3, r3, #16
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f3      	beq.n	80010a8 <I2C_SendData+0x76>
	
	if ( (I2Cx->ISR & I2C_ISR_NACKF) != 0 )
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <I2C_SendData+0xa0>
		return -1;
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d0:	e003      	b.n	80010da <I2C_SendData+0xa8>

	I2C_Stop(I2Cx);
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff ff82 	bl	8000fdc <I2C_Stop>
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <I2C1_EV_IRQHandler>:
	
	return 0;
}


void I2C1_EV_IRQHandler(void){
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
	// I2C1->ICR |= 
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void){
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <get_lat>:
char nmea_buf[256];
char nmea_gga[256];
uint8_t i = 0;

double get_lat(char *gga)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0c6      	sub	sp, #280	; 0x118
 8001104:	af00      	add	r7, sp, #0
 8001106:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800110a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800110e:	6018      	str	r0, [r3, #0]
	double latitude = 0.0;
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 800111c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001120:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001124:	f107 000c 	add.w	r0, r7, #12
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	f005 fb83 	bl	8006838 <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4919      	ldr	r1, [pc, #100]	; (800119c <get_lat+0x9c>)
 8001138:	4618      	mov	r0, r3
 800113a:	f005 fb91 	bl	8006860 <strtok>
 800113e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001142:	e01b      	b.n	800117c <get_lat+0x7c>
	{
		if ((strcmp(token, "N") == 0) || (strcmp(token, "S") == 0))
 8001144:	4916      	ldr	r1, [pc, #88]	; (80011a0 <get_lat+0xa0>)
 8001146:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800114a:	f7ff f899 	bl	8000280 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d017      	beq.n	8001184 <get_lat+0x84>
 8001154:	4913      	ldr	r1, [pc, #76]	; (80011a4 <get_lat+0xa4>)
 8001156:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800115a:	f7ff f891 	bl	8000280 <strcmp>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00f      	beq.n	8001184 <get_lat+0x84>
		{
			break;
		}
		else
		{
			latitude = atof(token);
 8001164:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001168:	f004 f800 	bl	800516c <atof>
 800116c:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001170:	490a      	ldr	r1, [pc, #40]	; (800119c <get_lat+0x9c>)
 8001172:	2000      	movs	r0, #0
 8001174:	f005 fb74 	bl	8006860 <strtok>
 8001178:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 800117c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1df      	bne.n	8001144 <get_lat+0x44>
	}

		return latitude;
 8001184:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001188:	ec43 2b17 	vmov	d7, r2, r3
}
 800118c:	eeb0 0a47 	vmov.f32	s0, s14
 8001190:	eef0 0a67 	vmov.f32	s1, s15
 8001194:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	080094d0 	.word	0x080094d0
 80011a0:	080094d4 	.word	0x080094d4
 80011a4:	080094d8 	.word	0x080094d8

080011a8 <get_lon>:

double get_lon(char *gga)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0c6      	sub	sp, #280	; 0x118
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011b6:	6018      	str	r0, [r3, #0]
	double longitude = 0.0;
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 80011c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011cc:	f107 000c 	add.w	r0, r7, #12
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	f005 fb2f 	bl	8006838 <strncpy>

	char *token = strtok(gga_cpy, ",");
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4919      	ldr	r1, [pc, #100]	; (8001244 <get_lon+0x9c>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fb3d 	bl	8006860 <strtok>
 80011e6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 80011ea:	e01b      	b.n	8001224 <get_lon+0x7c>
	{
		if ((strcmp(token, "W") == 0) || (strcmp(token, "E") == 0))
 80011ec:	4916      	ldr	r1, [pc, #88]	; (8001248 <get_lon+0xa0>)
 80011ee:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80011f2:	f7ff f845 	bl	8000280 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d017      	beq.n	800122c <get_lon+0x84>
 80011fc:	4913      	ldr	r1, [pc, #76]	; (800124c <get_lon+0xa4>)
 80011fe:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001202:	f7ff f83d 	bl	8000280 <strcmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00f      	beq.n	800122c <get_lon+0x84>
		{
			break;
		}
		else
		{
			longitude = atof(token);
 800120c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001210:	f003 ffac 	bl	800516c <atof>
 8001214:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 8001218:	490a      	ldr	r1, [pc, #40]	; (8001244 <get_lon+0x9c>)
 800121a:	2000      	movs	r0, #0
 800121c:	f005 fb20 	bl	8006860 <strtok>
 8001220:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 8001224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1df      	bne.n	80011ec <get_lon+0x44>
	}

		return longitude;
 800122c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001230:	ec43 2b17 	vmov	d7, r2, r3
}
 8001234:	eeb0 0a47 	vmov.f32	s0, s14
 8001238:	eef0 0a67 	vmov.f32	s1, s15
 800123c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	080094d0 	.word	0x080094d0
 8001248:	080094dc 	.word	0x080094dc
 800124c:	080094e0 	.word	0x080094e0

08001250 <get_alt>:

double get_alt(char *gga)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b0c6      	sub	sp, #280	; 0x118
 8001254:	af00      	add	r7, sp, #0
 8001256:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800125a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800125e:	6018      	str	r0, [r3, #0]
	double altitude = 0.0;
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	char gga_cpy[256];
	strncpy(gga_cpy, gga, 256);
 800126c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001270:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001274:	f107 000c 	add.w	r0, r7, #12
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	f005 fadb 	bl	8006838 <strncpy>

	char *token = strtok(gga_cpy, ",");
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4916      	ldr	r1, [pc, #88]	; (80012e0 <get_alt+0x90>)
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fae9 	bl	8006860 <strtok>
 800128e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

	while (token != NULL)
 8001292:	e013      	b.n	80012bc <get_alt+0x6c>
	{
		if (strcmp(token, "M") == 0)
 8001294:	4913      	ldr	r1, [pc, #76]	; (80012e4 <get_alt+0x94>)
 8001296:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800129a:	f7fe fff1 	bl	8000280 <strcmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d010      	beq.n	80012c6 <get_alt+0x76>
		{
			break;
		}
		else
		{
			altitude = atof(token);
 80012a4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80012a8:	f003 ff60 	bl	800516c <atof>
 80012ac:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
		}
			token = strtok(NULL, ",");
 80012b0:	490b      	ldr	r1, [pc, #44]	; (80012e0 <get_alt+0x90>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f005 fad4 	bl	8006860 <strtok>
 80012b8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	while (token != NULL)
 80012bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1e7      	bne.n	8001294 <get_alt+0x44>
 80012c4:	e000      	b.n	80012c8 <get_alt+0x78>
			break;
 80012c6:	bf00      	nop
	}

		return altitude;
 80012c8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80012cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80012d0:	eeb0 0a47 	vmov.f32	s0, s14
 80012d4:	eef0 0a67 	vmov.f32	s1, s15
 80012d8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	080094d0 	.word	0x080094d0
 80012e4:	080094e4 	.word	0x080094e4

080012e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b090      	sub	sp, #64	; 0x40
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <HAL_UART_RxCpltCallback+0xf4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d16d      	bne.n	80013d4 <HAL_UART_RxCpltCallback+0xec>
    	double lat;
    	double lon;
    	double alt;
        nmea_buf[i++] = nmea;
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_UART_RxCpltCallback+0xf8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	b2d1      	uxtb	r1, r2
 8001300:	4a37      	ldr	r2, [pc, #220]	; (80013e0 <HAL_UART_RxCpltCallback+0xf8>)
 8001302:	7011      	strb	r1, [r2, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_UART_RxCpltCallback+0xfc>)
 8001308:	7819      	ldrb	r1, [r3, #0]
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 800130c:	5499      	strb	r1, [r3, r2]
        char buf1[16];
        char buf2[16];

        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <HAL_UART_RxCpltCallback+0xfc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d003      	beq.n	800131e <HAL_UART_RxCpltCallback+0x36>
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_UART_RxCpltCallback+0xf8>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d155      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xe2>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A')
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	2b47      	cmp	r3, #71	; 0x47
 8001324:	d148      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0xd0>
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	2b47      	cmp	r3, #71	; 0x47
 800132c:	d144      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0xd0>
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 8001330:	795b      	ldrb	r3, [r3, #5]
 8001332:	2b41      	cmp	r3, #65	; 0x41
 8001334:	d140      	bne.n	80013b8 <HAL_UART_RxCpltCallback+0xd0>
        	{
        		memcpy(nmea_gga, nmea_buf, 256);
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <HAL_UART_RxCpltCallback+0x104>)
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001342:	461a      	mov	r2, r3
 8001344:	f005 fb20 	bl	8006988 <memcpy>
        		lat = get_lat(nmea_gga);
 8001348:	4828      	ldr	r0, [pc, #160]	; (80013ec <HAL_UART_RxCpltCallback+0x104>)
 800134a:	f7ff fed9 	bl	8001100 <get_lat>
 800134e:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
        		lon = get_lon(nmea_gga);
 8001352:	4826      	ldr	r0, [pc, #152]	; (80013ec <HAL_UART_RxCpltCallback+0x104>)
 8001354:	f7ff ff28 	bl	80011a8 <get_lon>
 8001358:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
        		alt = get_alt(nmea_gga);
 800135c:	4823      	ldr	r0, [pc, #140]	; (80013ec <HAL_UART_RxCpltCallback+0x104>)
 800135e:	f7ff ff77 	bl	8001250 <get_alt>
 8001362:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
        		//printf("%f, %f, %f\n\r", lat, lon, alt);
        		//printf("%s\n\r", nmea_gga);
        		 ssd1306_Fill(Black);
 8001366:	2000      	movs	r0, #0
 8001368:	f000 faf0 	bl	800194c <ssd1306_Fill>
        		 ssd1306_SetCursor(2,0);
 800136c:	2100      	movs	r1, #0
 800136e:	2002      	movs	r0, #2
 8001370:	f000 fc46 	bl	8001c00 <ssd1306_SetCursor>
        		 sprintf(buf1,"%f",lat);
 8001374:	f107 0018 	add.w	r0, r7, #24
 8001378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800137c:	491c      	ldr	r1, [pc, #112]	; (80013f0 <HAL_UART_RxCpltCallback+0x108>)
 800137e:	f004 fb5f 	bl	8005a40 <siprintf>
        		 ssd1306_WriteString(buf1, Font_11x18, White);
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_UART_RxCpltCallback+0x10c>)
 8001384:	f107 0018 	add.w	r0, r7, #24
 8001388:	2301      	movs	r3, #1
 800138a:	ca06      	ldmia	r2, {r1, r2}
 800138c:	f000 fc12 	bl	8001bb4 <ssd1306_WriteString>
        		 ssd1306_SetCursor(2,15);
 8001390:	210f      	movs	r1, #15
 8001392:	2002      	movs	r0, #2
 8001394:	f000 fc34 	bl	8001c00 <ssd1306_SetCursor>
        		 sprintf(buf2,"%f",lon);
 8001398:	f107 0008 	add.w	r0, r7, #8
 800139c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <HAL_UART_RxCpltCallback+0x108>)
 80013a2:	f004 fb4d 	bl	8005a40 <siprintf>
        		 ssd1306_WriteString(buf2, Font_11x18, White);
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_UART_RxCpltCallback+0x10c>)
 80013a8:	f107 0008 	add.w	r0, r7, #8
 80013ac:	2301      	movs	r3, #1
 80013ae:	ca06      	ldmia	r2, {r1, r2}
 80013b0:	f000 fc00 	bl	8001bb4 <ssd1306_WriteString>
        		 ssd1306_UpdateScreen();
 80013b4:	f000 faee 	bl	8001994 <ssd1306_UpdateScreen>


        	}

            memset(nmea_buf, 0, sizeof(nmea_buf));
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	2100      	movs	r1, #0
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <HAL_UART_RxCpltCallback+0x100>)
 80013c0:	f005 faaa 	bl	8006918 <memset>
            i = 0;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_UART_RxCpltCallback+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
        }

        // Start the next reception
        HAL_UART_Receive_IT(&huart2, &nmea, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	4905      	ldr	r1, [pc, #20]	; (80013e4 <HAL_UART_RxCpltCallback+0xfc>)
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <HAL_UART_RxCpltCallback+0xf4>)
 80013d0:	f002 fc3a 	bl	8003c48 <HAL_UART_Receive_IT>
    }
}
 80013d4:	bf00      	nop
 80013d6:	3740      	adds	r7, #64	; 0x40
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200002a0 	.word	0x200002a0
 80013e0:	2000052c 	.word	0x2000052c
 80013e4:	20000328 	.word	0x20000328
 80013e8:	2000032c 	.word	0x2000032c
 80013ec:	2000042c 	.word	0x2000042c
 80013f0:	080094e8 	.word	0x080094e8
 80013f4:	20000000 	.word	0x20000000

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b090      	sub	sp, #64	; 0x40
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f000 fe9d 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 f835 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 f933 	bl	8001670 <MX_GPIO_Init>
  MX_I2C1_Init();
 800140a:	f000 f881 	bl	8001510 <MX_I2C1_Init>
  MX_I2C3_Init();
 800140e:	f000 f8bf 	bl	8001590 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8001412:	f000 f8fd 	bl	8001610 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char buf[64] = "Start GPS";
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <main+0x68>)
 8001418:	463b      	mov	r3, r7
 800141a:	6810      	ldr	r0, [r2, #0]
 800141c:	6851      	ldr	r1, [r2, #4]
 800141e:	c303      	stmia	r3!, {r0, r1}
 8001420:	8912      	ldrh	r2, [r2, #8]
 8001422:	801a      	strh	r2, [r3, #0]
 8001424:	f107 030a 	add.w	r3, r7, #10
 8001428:	2236      	movs	r2, #54	; 0x36
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f005 fa73 	bl	8006918 <memset>
  //ssd1306_TestAll();
  ssd1306_Init();
 8001432:	f000 fa15 	bl	8001860 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 fa88 	bl	800194c <ssd1306_Fill>
  ssd1306_SetCursor(2,0);
 800143c:	2100      	movs	r1, #0
 800143e:	2002      	movs	r0, #2
 8001440:	f000 fbde 	bl	8001c00 <ssd1306_SetCursor>
  ssd1306_WriteString(buf, Font_11x18, White);
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <main+0x6c>)
 8001446:	4638      	mov	r0, r7
 8001448:	2301      	movs	r3, #1
 800144a:	ca06      	ldmia	r2, {r1, r2}
 800144c:	f000 fbb2 	bl	8001bb4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001450:	f000 faa0 	bl	8001994 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &nmea, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4904      	ldr	r1, [pc, #16]	; (8001468 <main+0x70>)
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <main+0x74>)
 800145a:	f002 fbf5 	bl	8003c48 <HAL_UART_Receive_IT>
  while (1)
 800145e:	e7fe      	b.n	800145e <main+0x66>
 8001460:	080094ec 	.word	0x080094ec
 8001464:	20000000 	.word	0x20000000
 8001468:	20000328 	.word	0x20000328
 800146c:	200002a0 	.word	0x200002a0

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b096      	sub	sp, #88	; 0x58
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2244      	movs	r2, #68	; 0x44
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f005 fa4a 	bl	8006918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001492:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001496:	f001 fb27 	bl	8002ae8 <HAL_PWREx_ControlVoltageScaling>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014a0:	f000 f970 	bl	8001784 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014a4:	2310      	movs	r3, #16
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014a8:	2301      	movs	r3, #1
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014b8:	2301      	movs	r3, #1
 80014ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014c0:	2328      	movs	r3, #40	; 0x28
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fb5f 	bl	8002b94 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014dc:	f000 f952 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2303      	movs	r3, #3
 80014e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2104      	movs	r1, #4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 ffad 	bl	8003458 <HAL_RCC_ClockConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001504:	f000 f93e 	bl	8001784 <Error_Handler>
  }
}
 8001508:	bf00      	nop
 800150a:	3758      	adds	r7, #88	; 0x58
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_I2C1_Init+0x74>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <MX_I2C1_Init+0x78>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_I2C1_Init+0x74>)
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <MX_I2C1_Init+0x7c>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_I2C1_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_I2C1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <MX_I2C1_Init+0x74>)
 800154c:	f001 f98c 	bl	8002868 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001556:	f000 f915 	bl	8001784 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	4809      	ldr	r0, [pc, #36]	; (8001584 <MX_I2C1_Init+0x74>)
 800155e:	f001 fa1e 	bl	800299e <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001568:	f000 f90c 	bl	8001784 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_I2C1_Init+0x74>)
 8001570:	f001 fa60 	bl	8002a34 <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 f903 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200001f8 	.word	0x200001f8
 8001588:	40005400 	.word	0x40005400
 800158c:	10909cec 	.word	0x10909cec

08001590 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_I2C3_Init+0x74>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <MX_I2C3_Init+0x78>)
 8001598:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <MX_I2C3_Init+0x74>)
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <MX_I2C3_Init+0x7c>)
 800159e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_I2C3_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_I2C3_Init+0x74>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_I2C3_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_I2C3_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C3_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C3_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C3_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ca:	480e      	ldr	r0, [pc, #56]	; (8001604 <MX_I2C3_Init+0x74>)
 80015cc:	f001 f94c 	bl	8002868 <HAL_I2C_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015d6:	f000 f8d5 	bl	8001784 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015da:	2100      	movs	r1, #0
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <MX_I2C3_Init+0x74>)
 80015de:	f001 f9de 	bl	800299e <HAL_I2CEx_ConfigAnalogFilter>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015e8:	f000 f8cc 	bl	8001784 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_I2C3_Init+0x74>)
 80015f0:	f001 fa20 	bl	8002a34 <HAL_I2CEx_ConfigDigitalFilter>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015fa:	f000 f8c3 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000024c 	.word	0x2000024c
 8001608:	40005c00 	.word	0x40005c00
 800160c:	10909cec 	.word	0x10909cec

08001610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	; (800166c <MX_USART2_UART_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800161c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART2_UART_Init+0x58>)
 8001654:	f002 faaa 	bl	8003bac <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f891 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002a0 	.word	0x200002a0
 800166c:	40004400 	.word	0x40004400

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <MX_GPIO_Init+0x108>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a3b      	ldr	r2, [pc, #236]	; (8001778 <MX_GPIO_Init+0x108>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b39      	ldr	r3, [pc, #228]	; (8001778 <MX_GPIO_Init+0x108>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <MX_GPIO_Init+0x108>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a35      	ldr	r2, [pc, #212]	; (8001778 <MX_GPIO_Init+0x108>)
 80016a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <MX_GPIO_Init+0x108>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <MX_GPIO_Init+0x108>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a2f      	ldr	r2, [pc, #188]	; (8001778 <MX_GPIO_Init+0x108>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <MX_GPIO_Init+0x108>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <MX_GPIO_Init+0x108>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <MX_GPIO_Init+0x108>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <MX_GPIO_Init+0x108>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	21b0      	movs	r1, #176	; 0xb0
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f001 f8a3 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f8:	4820      	ldr	r0, [pc, #128]	; (800177c <MX_GPIO_Init+0x10c>)
 80016fa:	f001 f89d 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <MX_GPIO_Init+0x110>)
 8001716:	f000 ff1d 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800171a:	23b0      	movs	r3, #176	; 0xb0
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f000 ff0e 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	2301      	movs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f000 ff01 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <MX_GPIO_Init+0x10c>)
 800176c:	f000 fef2 	bl	8002554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000800 	.word	0x48000800

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>

0800178e <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy
#include "I2C.h"

void ssd1306_Reset(void) {
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
		uint8_t buffer[2];
		buffer[0] = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	733b      	strb	r3, [r7, #12]
		buffer[1] = byte;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	737b      	strb	r3, [r7, #13]
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer, 2);
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	2302      	movs	r3, #2
 80017b4:	2178      	movs	r1, #120	; 0x78
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <ssd1306_WriteCommand+0x28>)
 80017b8:	f7ff fc3b 	bl	8001032 <I2C_SendData>
		//I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, &byte, 1);
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40005400 	.word	0x40005400

080017c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80017d4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80017d8:	6018      	str	r0, [r3, #0]
 80017da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80017de:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80017e2:	6019      	str	r1, [r3, #0]
		int i;
		uint8_t buffer2[SSD1306_BUFFER_SIZE+1];
		buffer2[0] = 0x40;
 80017e4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80017e8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	701a      	strb	r2, [r3, #0]
		for(i=0; i<buff_size;  i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80017f6:	e015      	b.n	8001824 <ssd1306_WriteData+0x5c>
			buffer2[i+1] = buffer[i];
 80017f8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80017fc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001800:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	441a      	add	r2, r3
 8001808:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800180c:	3301      	adds	r3, #1
 800180e:	7811      	ldrb	r1, [r2, #0]
 8001810:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001814:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8001818:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<buff_size;  i++)
 800181a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800181e:	3301      	adds	r3, #1
 8001820:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001824:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001828:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800182c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8e0      	bhi.n	80017f8 <ssd1306_WriteData+0x30>
		I2C_SendData(SSD1306_I2C_PORT, SSD1306_I2C_ADDR, buffer2, buff_size+1);
 8001836:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800183a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f107 0208 	add.w	r2, r7, #8
 800184a:	2178      	movs	r1, #120	; 0x78
 800184c:	4803      	ldr	r0, [pc, #12]	; (800185c <ssd1306_WriteData+0x94>)
 800184e:	f7ff fbf0 	bl	8001032 <I2C_SendData>
    //HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8001852:	bf00      	nop
 8001854:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005400 	.word	0x40005400

08001860 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
		volatile uint32_t i;
	
    // Reset OLED
    ssd1306_Reset();
 8001866:	f7ff ff92 	bl	800178e <ssd1306_Reset>

    // Wait for the screen to boot
    //delay(100);
	  for(i=0; i<100000; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e002      	b.n	8001876 <ssd1306_Init+0x16>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a32      	ldr	r2, [pc, #200]	; (8001944 <ssd1306_Init+0xe4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d9f8      	bls.n	8001870 <ssd1306_Init+0x10>
			;

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f9ea 	bl	8001c58 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001884:	2020      	movs	r0, #32
 8001886:	f7ff ff89 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff ff86 	bl	800179c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001890:	20b0      	movs	r0, #176	; 0xb0
 8001892:	f7ff ff83 	bl	800179c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001896:	20c8      	movs	r0, #200	; 0xc8
 8001898:	f7ff ff80 	bl	800179c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff7d 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80018a2:	2010      	movs	r0, #16
 80018a4:	f7ff ff7a 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80018a8:	2040      	movs	r0, #64	; 0x40
 80018aa:	f7ff ff77 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80018ae:	20ff      	movs	r0, #255	; 0xff
 80018b0:	f000 f9be 	bl	8001c30 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018b4:	20a1      	movs	r0, #161	; 0xa1
 80018b6:	f7ff ff71 	bl	800179c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80018ba:	20a6      	movs	r0, #166	; 0xa6
 80018bc:	f7ff ff6e 	bl	800179c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018c0:	20a8      	movs	r0, #168	; 0xa8
 80018c2:	f7ff ff6b 	bl	800179c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80018c6:	203f      	movs	r0, #63	; 0x3f
 80018c8:	f7ff ff68 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018cc:	20a4      	movs	r0, #164	; 0xa4
 80018ce:	f7ff ff65 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80018d2:	20d3      	movs	r0, #211	; 0xd3
 80018d4:	f7ff ff62 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ff5f 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018de:	20d5      	movs	r0, #213	; 0xd5
 80018e0:	f7ff ff5c 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018e4:	20f0      	movs	r0, #240	; 0xf0
 80018e6:	f7ff ff59 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018ea:	20d9      	movs	r0, #217	; 0xd9
 80018ec:	f7ff ff56 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80018f0:	2022      	movs	r0, #34	; 0x22
 80018f2:	f7ff ff53 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80018f6:	20da      	movs	r0, #218	; 0xda
 80018f8:	f7ff ff50 	bl	800179c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80018fc:	2012      	movs	r0, #18
 80018fe:	f7ff ff4d 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001902:	20db      	movs	r0, #219	; 0xdb
 8001904:	f7ff ff4a 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001908:	2020      	movs	r0, #32
 800190a:	f7ff ff47 	bl	800179c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800190e:	208d      	movs	r0, #141	; 0x8d
 8001910:	f7ff ff44 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001914:	2014      	movs	r0, #20
 8001916:	f7ff ff41 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800191a:	2001      	movs	r0, #1
 800191c:	f000 f99c 	bl	8001c58 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 f813 	bl	800194c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001926:	f000 f835 	bl	8001994 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <ssd1306_Init+0xe8>)
 800192c:	2200      	movs	r2, #0
 800192e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <ssd1306_Init+0xe8>)
 8001932:	2200      	movs	r2, #0
 8001934:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <ssd1306_Init+0xe8>)
 8001938:	2201      	movs	r2, #1
 800193a:	715a      	strb	r2, [r3, #5]
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0001869f 	.word	0x0001869f
 8001948:	20000930 	.word	0x20000930

0800194c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e00d      	b.n	8001978 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <ssd1306_Fill+0x1a>
 8001962:	2100      	movs	r1, #0
 8001964:	e000      	b.n	8001968 <ssd1306_Fill+0x1c>
 8001966:	21ff      	movs	r1, #255	; 0xff
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <ssd1306_Fill+0x44>)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4413      	add	r3, r2
 800196e:	460a      	mov	r2, r1
 8001970:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d3ed      	bcc.n	800195c <ssd1306_Fill+0x10>
    }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000530 	.word	0x20000530

08001994 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
		uint8_t i;
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	e016      	b.n	80019ce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	3b50      	subs	r3, #80	; 0x50
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fef8 	bl	800179c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fef5 	bl	800179c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80019b2:	2010      	movs	r0, #16
 80019b4:	f7ff fef2 	bl	800179c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <ssd1306_UpdateScreen+0x4c>)
 80019be:	4413      	add	r3, r2
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff00 	bl	80017c8 <ssd1306_WriteData>
    for(i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b07      	cmp	r3, #7
 80019d2:	d9e5      	bls.n	80019a0 <ssd1306_UpdateScreen+0xc>
    }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000530 	.word	0x20000530

080019e4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	460b      	mov	r3, r1
 80019f0:	71bb      	strb	r3, [r7, #6]
 80019f2:	4613      	mov	r3, r2
 80019f4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db48      	blt.n	8001a90 <ssd1306_DrawPixel+0xac>
 80019fe:	79bb      	ldrb	r3, [r7, #6]
 8001a00:	2b3f      	cmp	r3, #63	; 0x3f
 8001a02:	d845      	bhi.n	8001a90 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <ssd1306_DrawPixel+0xb8>)
 8001a06:	791b      	ldrb	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001a1a:	797b      	ldrb	r3, [r7, #5]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d11a      	bne.n	8001a56 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a20:	79fa      	ldrb	r2, [r7, #7]
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	08db      	lsrs	r3, r3, #3
 8001a26:	b2d8      	uxtb	r0, r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <ssd1306_DrawPixel+0xbc>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b259      	sxtb	r1, r3
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4603      	mov	r3, r0
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b2c9      	uxtb	r1, r1
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <ssd1306_DrawPixel+0xbc>)
 8001a52:	54d1      	strb	r1, [r2, r3]
 8001a54:	e01d      	b.n	8001a92 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	79bb      	ldrb	r3, [r7, #6]
 8001a5a:	08db      	lsrs	r3, r3, #3
 8001a5c:	b2d8      	uxtb	r0, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	01db      	lsls	r3, r3, #7
 8001a62:	4413      	add	r3, r2
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <ssd1306_DrawPixel+0xbc>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b259      	sxtb	r1, r3
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	b2c9      	uxtb	r1, r1
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <ssd1306_DrawPixel+0xbc>)
 8001a8c:	54d1      	strb	r1, [r2, r3]
 8001a8e:	e000      	b.n	8001a92 <ssd1306_DrawPixel+0xae>
        return;
 8001a90:	bf00      	nop
    }
}
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	20000930 	.word	0x20000930
 8001aa0:	20000530 	.word	0x20000530

08001aa4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	1d38      	adds	r0, r7, #4
 8001aae:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	2b1f      	cmp	r3, #31
 8001ac0:	d902      	bls.n	8001ac8 <ssd1306_WriteChar+0x24>
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	2b7e      	cmp	r3, #126	; 0x7e
 8001ac6:	d901      	bls.n	8001acc <ssd1306_WriteChar+0x28>
        return 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e06d      	b.n	8001ba8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	793b      	ldrb	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2b80      	cmp	r3, #128	; 0x80
 8001ad8:	dc06      	bgt.n	8001ae8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001adc:	885b      	ldrh	r3, [r3, #2]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	dd01      	ble.n	8001aec <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e05d      	b.n	8001ba8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e04c      	b.n	8001b8c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	3b20      	subs	r3, #32
 8001af8:	7979      	ldrb	r1, [r7, #5]
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	440b      	add	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	e034      	b.n	8001b7c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	7bba      	ldrb	r2, [r7, #14]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff ff4f 	bl	80019e4 <ssd1306_DrawPixel>
 8001b46:	e016      	b.n	8001b76 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b2d8      	uxtb	r0, r3
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	b2d9      	uxtb	r1, r3
 8001b64:	7bbb      	ldrb	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff ff37 	bl	80019e4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	793b      	ldrb	r3, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d3c5      	bcc.n	8001b12 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d3ad      	bcc.n	8001af2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	793b      	ldrb	r3, [r7, #4]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <ssd1306_WriteChar+0x10c>)
 8001ba4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3724      	adds	r7, #36	; 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	20000930 	.word	0x20000930

08001bb4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	1d38      	adds	r0, r7, #4
 8001bbe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bc2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001bc4:	e012      	b.n	8001bec <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	7818      	ldrb	r0, [r3, #0]
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	1d3a      	adds	r2, r7, #4
 8001bce:	ca06      	ldmia	r2, {r1, r2}
 8001bd0:	f7ff ff68 	bl	8001aa4 <ssd1306_WriteChar>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d002      	beq.n	8001be6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	e008      	b.n	8001bf8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e8      	bne.n	8001bc6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	460a      	mov	r2, r1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <ssd1306_SetCursor+0x2c>)
 8001c16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <ssd1306_SetCursor+0x2c>)
 8001c1e:	805a      	strh	r2, [r3, #2]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	20000930 	.word	0x20000930

08001c30 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c3a:	2381      	movs	r3, #129	; 0x81
 8001c3c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fdab 	bl	800179c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fda7 	bl	800179c <ssd1306_WriteCommand>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c68:	23af      	movs	r3, #175	; 0xaf
 8001c6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <ssd1306_SetDisplayOn+0x38>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	719a      	strb	r2, [r3, #6]
 8001c72:	e004      	b.n	8001c7e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c74:	23ae      	movs	r3, #174	; 0xae
 8001c76:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <ssd1306_SetDisplayOn+0x38>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fd8b 	bl	800179c <ssd1306_WriteCommand>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000930 	.word	0x20000930

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b098      	sub	sp, #96	; 0x60
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	f107 0318 	add.w	r3, r7, #24
 8001cf8:	2234      	movs	r2, #52	; 0x34
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fe0b 	bl	8006918 <memset>
  if(hi2c->Instance==I2C1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <HAL_I2C_MspInit+0x124>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d138      	bne.n	8001d7e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d0c:	2340      	movs	r3, #64	; 0x40
 8001d0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fdc1 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d24:	f7ff fd2e 	bl	8001784 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Disp_SCL_Pin|Disp_SDA_Pin;
 8001d40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d46:	2312      	movs	r3, #18
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d52:	2304      	movs	r3, #4
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d60:	f000 fbf8 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d7c:	e03b      	b.n	8001df6 <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C3)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_I2C_MspInit+0x12c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d136      	bne.n	8001df6 <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fd82 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8001da2:	f7ff fcef 	bl	8001784 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Accel_SCL_Pin|Accel_SDA_Pin;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc2:	2312      	movs	r3, #18
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dce:	2304      	movs	r3, #4
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <HAL_I2C_MspInit+0x130>)
 8001dda:	f000 fbbb 	bl	8002554 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_I2C_MspInit+0x128>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
}
 8001df6:	bf00      	nop
 8001df8:	3760      	adds	r7, #96	; 0x60
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40005400 	.word	0x40005400
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40005c00 	.word	0x40005c00
 8001e0c:	48000800 	.word	0x48000800

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b096      	sub	sp, #88	; 0x58
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	2234      	movs	r2, #52	; 0x34
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fd71 	bl	8006918 <memset>
  if(huart->Instance==USART2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_UART_MspInit+0xb8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d13e      	bne.n	8001ebe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fd27 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e58:	f7ff fc94 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0xbc>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eaa:	f000 fb53 	bl	8002554 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f000 fa99 	bl	80023ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb8:	2026      	movs	r0, #38	; 0x26
 8001eba:	f000 fab2 	bl	8002422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3758      	adds	r7, #88	; 0x58
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <NMI_Handler+0x4>

08001ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler+0x4>

08001eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f000 f96a 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <USART2_IRQHandler+0x10>)
 8001f2a:	f001 fed9 	bl	8003ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200002a0 	.word	0x200002a0

08001f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return 1;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_kill>:

int _kill(int pid, int sig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f52:	f004 fced 	bl	8006930 <__errno>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2216      	movs	r2, #22
 8001f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_exit>:

void _exit (int status)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffe7 	bl	8001f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f7a:	e7fe      	b.n	8001f7a <_exit+0x12>

08001f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00a      	b.n	8001fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f8e:	f3af 8000 	nop.w
 8001f92:	4601      	mov	r1, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf0      	blt.n	8001f8e <_read+0x12>
  }

  return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e009      	b.n	8001fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf1      	blt.n	8001fc8 <_write+0x12>
  }
  return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_close>:

int _close(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002016:	605a      	str	r2, [r3, #4]
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_isatty>:

int _isatty(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f004 fc52 	bl	8006930 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000a000 	.word	0x2000a000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	20000938 	.word	0x20000938
 80020c0:	20000a90 	.word	0x20000a90

080020c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <SystemInit+0x20>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <SystemInit+0x20>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002120 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ec:	f7ff ffea 	bl	80020c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <LoopForever+0x6>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	; (8002128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <LoopForever+0xe>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	; (8002134 <LoopForever+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f004 fc11 	bl	800693c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211a:	f7ff f96d 	bl	80013f8 <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002120:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800212c:	0800a72c 	.word	0x0800a72c
  ldr r2, =_sbss
 8002130:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002134:	20000a8c 	.word	0x20000a8c

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_Init+0x3c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_Init+0x3c>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002152:	2003      	movs	r0, #3
 8002154:	f000 f93e 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002158:	2000      	movs	r0, #0
 800215a:	f000 f80f 	bl	800217c <HAL_InitTick>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	e001      	b.n	800216e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800216a:	f7ff fd93 	bl	8001c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800216e:	79fb      	ldrb	r3, [r7, #7]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_InitTick+0x6c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_InitTick+0x70>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_InitTick+0x6c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f949 	bl	800243e <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d809      	bhi.n	80021cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	f000 f913 	bl	80023ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_InitTick+0x74>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e007      	b.n	80021dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e004      	b.n	80021dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e001      	b.n	80021dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000010 	.word	0x20000010
 80021ec:	20000008 	.word	0x20000008
 80021f0:	2000000c 	.word	0x2000000c

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000010 	.word	0x20000010
 8002218:	2000093c 	.word	0x2000093c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000093c 	.word	0x2000093c

08002234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db0b      	blt.n	80022c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <__NVIC_EnableIRQ+0x38>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2001      	movs	r0, #1
 80022ba:	fa00 f202 	lsl.w	r2, r0, r2
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	; 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	f7ff ff8e 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff29 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff3e 	bl	800227c <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff8e 	bl	8002328 <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5d 	bl	80022d4 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff31 	bl	8002298 <__NVIC_EnableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffa2 	bl	8002390 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e022      	b.n	80024c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 020e 	bic.w	r2, r2, #14
 800248e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f003 021c 	and.w	r2, r3, #28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f202 	lsl.w	r2, r1, r2
 80024b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d005      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e029      	b.n	800254a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020e 	bic.w	r2, r2, #14
 8002504:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f003 021c 	and.w	r2, r3, #28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
    }
  }
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e14e      	b.n	8002802 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8140 	beq.w	80027fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x40>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d017      	beq.n	8002632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 809a 	beq.w	80027fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_GPIO_Init+0x2cc>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	4a54      	ldr	r2, [pc, #336]	; (8002820 <HAL_GPIO_Init+0x2cc>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6613      	str	r3, [r2, #96]	; 0x60
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_GPIO_Init+0x2cc>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e0:	4a50      	ldr	r2, [pc, #320]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800270a:	d013      	beq.n	8002734 <HAL_GPIO_Init+0x1e0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <HAL_GPIO_Init+0x2d4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1dc>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a45      	ldr	r2, [pc, #276]	; (800282c <HAL_GPIO_Init+0x2d8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1d8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a44      	ldr	r2, [pc, #272]	; (8002830 <HAL_GPIO_Init+0x2dc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1d4>
 8002724:	2303      	movs	r3, #3
 8002726:	e006      	b.n	8002736 <HAL_GPIO_Init+0x1e2>
 8002728:	2307      	movs	r3, #7
 800272a:	e004      	b.n	8002736 <HAL_GPIO_Init+0x1e2>
 800272c:	2302      	movs	r3, #2
 800272e:	e002      	b.n	8002736 <HAL_GPIO_Init+0x1e2>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_GPIO_Init+0x1e2>
 8002734:	2300      	movs	r3, #0
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	f002 0203 	and.w	r2, r2, #3
 800273c:	0092      	lsls	r2, r2, #2
 800273e:	4093      	lsls	r3, r2
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002746:	4937      	ldr	r1, [pc, #220]	; (8002824 <HAL_GPIO_Init+0x2d0>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3302      	adds	r3, #2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002778:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a2:	4a24      	ldr	r2, [pc, #144]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_GPIO_Init+0x2e0>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3301      	adds	r3, #1
 8002800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f aea9 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	48000400 	.word	0x48000400
 800282c:	48000800 	.word	0x48000800
 8002830:	48000c00 	.word	0x48000c00
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 8002844:	4613      	mov	r3, r2
 8002846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002848:	787b      	ldrb	r3, [r7, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002854:	e002      	b.n	800285c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e08d      	b.n	8002996 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fa24 	bl	8001cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	; 0x24
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	e006      	b.n	80028f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d108      	bne.n	800290a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	e007      	b.n	800291a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002918:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69d9      	ldr	r1, [r3, #28]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d138      	bne.n	8002a26 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029be:	2302      	movs	r3, #2
 80029c0:	e032      	b.n	8002a28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	; 0x24
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d139      	bne.n	8002abe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e033      	b.n	8002ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d130      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d038      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2232      	movs	r2, #50	; 0x32
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2c:	e002      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d102      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f2      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d110      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00f      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d007      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	20000008 	.word	0x20000008
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f000 bc4f 	b.w	8003446 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba8:	4b97      	ldr	r3, [pc, #604]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb2:	4b95      	ldr	r3, [pc, #596]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80e6 	beq.w	8002d96 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4c>
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	f040 808d 	bne.w	8002cf2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	f040 8089 	bne.w	8002cf2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002be0:	4b89      	ldr	r3, [pc, #548]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <HAL_RCC_OscConfig+0x66>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	f000 bc26 	b.w	8003446 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <HAL_RCC_OscConfig+0x80>
 8002c0a:	4b7f      	ldr	r3, [pc, #508]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c12:	e005      	b.n	8002c20 <HAL_RCC_OscConfig+0x8c>
 8002c14:	4b7c      	ldr	r3, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d224      	bcs.n	8002c6e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fdd9 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f000 bc06 	b.w	8003446 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3a:	4b73      	ldr	r3, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a72      	ldr	r2, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c40:	f043 0308 	orr.w	r3, r3, #8
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	496d      	ldr	r1, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c58:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4968      	ldr	r1, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e025      	b.n	8002cba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c6e:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	4960      	ldr	r1, [pc, #384]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c8c:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	495b      	ldr	r1, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fd98 	bl	80037e0 <RCC_SetFlashLatencyFromMSIRange>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e3c5      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cba:	f000 fccd 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	4950      	ldr	r1, [pc, #320]	; (8002e0c <HAL_RCC_OscConfig+0x278>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fa4c 	bl	800217c <HAL_InitTick>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d052      	beq.n	8002d94 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	e3a9      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d032      	beq.n	8002d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a42      	ldr	r2, [pc, #264]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d06:	f7ff fa89 	bl	800221c <HAL_GetTick>
 8002d0a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d0e:	f7ff fa85 	bl	800221c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e392      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a35      	ldr	r2, [pc, #212]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	4930      	ldr	r1, [pc, #192]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	492b      	ldr	r1, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
 8002d5e:	e01a      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a28      	ldr	r2, [pc, #160]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fa56 	bl	800221c <HAL_GetTick>
 8002d70:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d74:	f7ff fa52 	bl	800221c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e35f      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1e0>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d073      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_OscConfig+0x220>
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d10e      	bne.n	8002dcc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d063      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2f4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d15f      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e33c      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x250>
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e025      	b.n	8002e30 <HAL_RCC_OscConfig+0x29c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d114      	bne.n	8002e18 <HAL_RCC_OscConfig+0x284>
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a02      	ldr	r2, [pc, #8]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e013      	b.n	8002e30 <HAL_RCC_OscConfig+0x29c>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800a254 	.word	0x0800a254
 8002e10:	20000008 	.word	0x20000008
 8002e14:	2000000c 	.word	0x2000000c
 8002e18:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a8e      	ldr	r2, [pc, #568]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a8b      	ldr	r2, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7ff f9f0 	bl	800221c <HAL_GetTick>
 8002e3c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff f9ec 	bl	800221c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2f9      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	4b81      	ldr	r3, [pc, #516]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2ac>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff f9dc 	bl	800221c <HAL_GetTick>
 8002e64:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f9d8 	bl	800221c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e2e5      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7a:	4b77      	ldr	r3, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x2d4>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d060      	beq.n	8002f58 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x314>
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d116      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x32c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2c2      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec0:	4b65      	ldr	r3, [pc, #404]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	061b      	lsls	r3, r3, #24
 8002ece:	4962      	ldr	r1, [pc, #392]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed4:	e040      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d023      	beq.n	8002f26 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ede:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7ff f997 	bl	800221c <HAL_GetTick>
 8002eee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef2:	f7ff f993 	bl	800221c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e2a0      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b54      	ldr	r3, [pc, #336]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	494e      	ldr	r1, [pc, #312]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e018      	b.n	8002f58 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7ff f973 	bl	800221c <HAL_GetTick>
 8002f36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7ff f96f 	bl	800221c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e27c      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8082 	beq.w	800306a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d05f      	beq.n	800302e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d037      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e254      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01b      	beq.n	8002fde <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb6:	f7ff f931 	bl	800221c <HAL_GetTick>
 8002fba:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbe:	f7ff f92d 	bl	800221c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b11      	cmp	r3, #17
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e23a      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ef      	bne.n	8002fbe <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	491a      	ldr	r1, [pc, #104]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7ff f90a 	bl	800221c <HAL_GetTick>
 8003008:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300c:	f7ff f906 	bl	800221c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b11      	cmp	r3, #17
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e213      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <HAL_RCC_OscConfig+0x478>
 800302c:	e01d      	b.n	800306a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003034:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7ff f8ed 	bl	800221c <HAL_GetTick>
 8003042:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003046:	f7ff f8e9 	bl	800221c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b11      	cmp	r3, #17
 8003052:	d903      	bls.n	800305c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1f6      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
 8003058:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800305c:	4ba9      	ldr	r3, [pc, #676]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ed      	bne.n	8003046 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80bd 	beq.w	80031f2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800307e:	4ba1      	ldr	r3, [pc, #644]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	4b9e      	ldr	r3, [pc, #632]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	4a9d      	ldr	r2, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
 8003096:	4b9b      	ldr	r3, [pc, #620]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a8:	4b97      	ldr	r3, [pc, #604]	; (8003308 <HAL_RCC_OscConfig+0x774>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d118      	bne.n	80030e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b4:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_RCC_OscConfig+0x774>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a93      	ldr	r2, [pc, #588]	; (8003308 <HAL_RCC_OscConfig+0x774>)
 80030ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c0:	f7ff f8ac 	bl	800221c <HAL_GetTick>
 80030c4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7ff f8a8 	bl	800221c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1b5      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030da:	4b8b      	ldr	r3, [pc, #556]	; (8003308 <HAL_RCC_OscConfig+0x774>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02c      	beq.n	800314c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80030f2:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	497f      	ldr	r1, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003118:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	4a79      	ldr	r2, [pc, #484]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003128:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	4a75      	ldr	r2, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003138:	e018      	b.n	800316c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800313a:	4b72      	ldr	r3, [pc, #456]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	4a70      	ldr	r2, [pc, #448]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314a:	e00f      	b.n	800316c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800314c:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a68      	ldr	r2, [pc, #416]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d016      	beq.n	80031a2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7ff f852 	bl	800221c <HAL_GetTick>
 8003178:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7ff f84e 	bl	800221c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e159      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ed      	beq.n	800317c <HAL_RCC_OscConfig+0x5e8>
 80031a0:	e01d      	b.n	80031de <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7ff f83b 	bl	800221c <HAL_GetTick>
 80031a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7ff f837 	bl	800221c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e142      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ed      	bne.n	80031aa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80031ce:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	4a4b      	ldr	r2, [pc, #300]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80031d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	4a46      	ldr	r2, [pc, #280]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d03c      	beq.n	8003278 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01c      	beq.n	8003240 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003206:	4b3f      	ldr	r3, [pc, #252]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7ff f801 	bl	800221c <HAL_GetTick>
 800321a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321e:	f7fe fffd 	bl	800221c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e10a      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003230:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ef      	beq.n	800321e <HAL_RCC_OscConfig+0x68a>
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe ffe4 	bl	800221c <HAL_GetTick>
 8003254:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003258:	f7fe ffe0 	bl	800221c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0ed      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800326c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80e1 	beq.w	8003444 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80b5 	bne.w	80033f6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	429a      	cmp	r2, r3
 800329e:	d124      	bne.n	80032ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d11b      	bne.n	80032ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d113      	bne.n	80032ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d05f      	beq.n	80033aa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d05a      	beq.n	80033a6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <HAL_RCC_OscConfig+0x770>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fc:	f7fe ff8e 	bl	800221c <HAL_GetTick>
 8003300:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003302:	e00c      	b.n	800331e <HAL_RCC_OscConfig+0x78a>
 8003304:	40021000 	.word	0x40021000
 8003308:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe ff86 	bl	800221c <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e093      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331e:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332a:	4b49      	ldr	r3, [pc, #292]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <HAL_RCC_OscConfig+0x8c0>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333a:	3a01      	subs	r2, #1
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003344:	0212      	lsls	r2, r2, #8
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800334c:	0852      	lsrs	r2, r2, #1
 800334e:	3a01      	subs	r2, #1
 8003350:	0552      	lsls	r2, r2, #21
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003358:	0852      	lsrs	r2, r2, #1
 800335a:	3a01      	subs	r2, #1
 800335c:	0652      	lsls	r2, r2, #25
 800335e:	430a      	orrs	r2, r1
 8003360:	493b      	ldr	r1, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a39      	ldr	r2, [pc, #228]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 800336c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003370:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003372:	4b37      	ldr	r3, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4a36      	ldr	r2, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337e:	f7fe ff4d 	bl	800221c <HAL_GetTick>
 8003382:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003386:	f7fe ff49 	bl	800221c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e056      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a4:	e04e      	b.n	8003444 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e04d      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d146      	bne.n	8003444 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c2:	4b23      	ldr	r3, [pc, #140]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4a22      	ldr	r2, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033cc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ce:	f7fe ff25 	bl	800221c <HAL_GetTick>
 80033d2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe ff21 	bl	800221c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e02e      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x842>
 80033f4:	e026      	b.n	8003444 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d021      	beq.n	8003440 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a13      	ldr	r2, [pc, #76]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe ff08 	bl	800221c <HAL_GetTick>
 800340c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe ff04 	bl	800221c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e011      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4a07      	ldr	r2, [pc, #28]	; (8003450 <HAL_RCC_OscConfig+0x8bc>)
 8003434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003438:	f023 0303 	bic.w	r3, r3, #3
 800343c:	60d3      	str	r3, [r2, #12]
 800343e:	e001      	b.n	8003444 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	f99f808c 	.word	0xf99f808c

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0e7      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4970      	ldr	r1, [pc, #448]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b6e      	ldr	r3, [pc, #440]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cf      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b66      	ldr	r3, [pc, #408]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d908      	bls.n	80034ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4960      	ldr	r1, [pc, #384]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04c      	beq.n	8003570 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034de:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d121      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0a6      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	4b54      	ldr	r3, [pc, #336]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e09a      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e08e      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e086      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4943      	ldr	r1, [pc, #268]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fe fe6c 	bl	800221c <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fe fe68 	bl	800221c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e06e      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	4b31      	ldr	r3, [pc, #196]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003588:	429a      	cmp	r2, r3
 800358a:	d208      	bcs.n	800359e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	492b      	ldr	r1, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359e:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d210      	bcs.n	80035ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 0207 	bic.w	r2, r3, #7
 80035b4:	4923      	ldr	r1, [pc, #140]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035bc:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_ClockConfig+0x1ec>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e036      	b.n	800363c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4918      	ldr	r1, [pc, #96]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4910      	ldr	r1, [pc, #64]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800360c:	f000 f824 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	490b      	ldr	r1, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1f4>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1f8>)
 800362a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1fc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fda3 	bl	800217c <HAL_InitTick>
 8003636:	4603      	mov	r3, r0
 8003638:	72fb      	strb	r3, [r7, #11]

  return status;
 800363a:	7afb      	ldrb	r3, [r7, #11]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
 800364c:	0800a254 	.word	0x0800a254
 8003650:	20000008 	.word	0x20000008
 8003654:	2000000c 	.word	0x2000000c

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x34>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d121      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11e      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b4:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e004      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <HAL_RCC_GetSysClockFreq+0x114>)
 80036de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d134      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0xa6>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d003      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0xac>
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003704:	4b19      	ldr	r3, [pc, #100]	; (800376c <HAL_RCC_GetSysClockFreq+0x114>)
 8003706:	617b      	str	r3, [r7, #20]
      break;
 8003708:	e002      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	617b      	str	r3, [r7, #20]
      break;
 800370e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	fb03 f202 	mul.w	r2, r3, r2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	0e5b      	lsrs	r3, r3, #25
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	3301      	adds	r3, #1
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003750:	69bb      	ldr	r3, [r7, #24]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	0800a26c 	.word	0x0800a26c
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200

08003770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000008 	.word	0x20000008

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800378c:	f7ff fff0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	0800a264 	.word	0x0800a264

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b8:	f7ff ffda 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0adb      	lsrs	r3, r3, #11
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	0800a264 	.word	0x0800a264

080037e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037f8:	f7ff f968 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 80037fc:	6178      	str	r0, [r7, #20]
 80037fe:	e014      	b.n	800382a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	4a24      	ldr	r2, [pc, #144]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380a:	6593      	str	r3, [r2, #88]	; 0x58
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003818:	f7ff f958 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 800381c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d10b      	bne.n	800384a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d919      	bls.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2ba0      	cmp	r3, #160	; 0xa0
 800383c:	d902      	bls.n	8003844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800383e:	2302      	movs	r3, #2
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e013      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003844:	2301      	movs	r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e010      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d902      	bls.n	8003856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003850:	2303      	movs	r3, #3
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e00a      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d102      	bne.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800385c:	2302      	movs	r3, #2
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	e004      	b.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b70      	cmp	r3, #112	; 0x70
 8003866:	d101      	bne.n	800386c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003868:	2301      	movs	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	4909      	ldr	r1, [pc, #36]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	40022000 	.word	0x40022000

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 809e 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038be:	2300      	movs	r3, #0
 80038c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038c2:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6593      	str	r3, [r2, #88]	; 0x58
 80038e4:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f0:	2301      	movs	r3, #1
 80038f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f4:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003900:	f7fe fc8c 	bl	800221c <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003906:	e009      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003908:	f7fe fc88 	bl	800221c <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	74fb      	strb	r3, [r7, #19]
        break;
 800391a:	e005      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800391c:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ef      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d15a      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392e:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	429a      	cmp	r2, r3
 8003948:	d019      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800394a:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003956:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800395e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fc48 	bl	800221c <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398e:	e00b      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fe fc44 	bl	800221c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d902      	bls.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	74fb      	strb	r3, [r7, #19]
            break;
 80039a6:	e006      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ec      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039d2:	e009      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e8:	7c7b      	ldrb	r3, [r7, #17]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4a6d      	ldr	r2, [pc, #436]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a06:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 0203 	bic.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4964      	ldr	r1, [pc, #400]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a28:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 020c 	bic.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	495c      	ldr	r1, [pc, #368]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4a:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4953      	ldr	r1, [pc, #332]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	494b      	ldr	r1, [pc, #300]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8e:	4b46      	ldr	r3, [pc, #280]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4942      	ldr	r1, [pc, #264]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	493a      	ldr	r1, [pc, #232]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad2:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4931      	ldr	r1, [pc, #196]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af4:	4b2c      	ldr	r3, [pc, #176]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4920      	ldr	r1, [pc, #128]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	4918      	ldr	r1, [pc, #96]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b62:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e040      	b.n	8003c40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe f91e 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fdd8 	bl	80047a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb7b 	bl	80042f4 <UART_SetConfig>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e01b      	b.n	8003c40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fe57 	bl	80048ec <UART_CheckIdleState>
 8003c3e:	4603      	mov	r3, r0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d137      	bne.n	8003cd0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_UART_Receive_IT+0x24>
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e030      	b.n	8003cd2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_UART_Receive_IT+0x94>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01f      	beq.n	8003cc0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69f9      	ldr	r1, [r7, #28]
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 ff20 	bl	8004b0c <UART_Start_Receive_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3728      	adds	r7, #40	; 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40008000 	.word	0x40008000

08003ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0ba      	sub	sp, #232	; 0xe8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d0e:	4013      	ands	r3, r2
 8003d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d115      	bne.n	8003d48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00f      	beq.n	8003d48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 82ae 	beq.w	800429a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
      }
      return;
 8003d46:	e2a8      	b.n	800429a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8117 	beq.w	8003f80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d62:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <HAL_UART_IRQHandler+0x298>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 810a 	beq.w	8003f80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d011      	beq.n	8003d9c <HAL_UART_IRQHandler+0xbc>
 8003d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d011      	beq.n	8003dcc <HAL_UART_IRQHandler+0xec>
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2202      	movs	r2, #2
 8003dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc2:	f043 0204 	orr.w	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d011      	beq.n	8003dfc <HAL_UART_IRQHandler+0x11c>
 8003dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2204      	movs	r2, #4
 8003dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	f043 0202 	orr.w	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d017      	beq.n	8003e38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2208      	movs	r2, #8
 8003e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2e:	f043 0208 	orr.w	r2, r3, #8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <HAL_UART_IRQHandler+0x18a>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00c      	beq.n	8003e6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8214 	beq.w	800429e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d04f      	beq.n	8003f62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fee8 	bl	8004c98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d141      	bne.n	8003f5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3308      	adds	r3, #8
 8003efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1d9      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d013      	beq.n	8003f52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <HAL_UART_IRQHandler+0x29c>)
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe facb 	bl	80024d2 <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f50:	e00f      	b.n	8003f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9b8 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e00b      	b.n	8003f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9b4 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e007      	b.n	8003f72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9b0 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f70:	e195      	b.n	800429e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f72:	bf00      	nop
    return;
 8003f74:	e193      	b.n	800429e <HAL_UART_IRQHandler+0x5be>
 8003f76:	bf00      	nop
 8003f78:	04000120 	.word	0x04000120
 8003f7c:	08004d61 	.word	0x08004d61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f040 814e 	bne.w	8004226 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8147 	beq.w	8004226 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8140 	beq.w	8004226 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	f040 80b8 	bne.w	800412e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8167 	beq.w	80042a2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	f080 815f 	bcs.w	80042a2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 8086 	bne.w	800410c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800402e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1da      	bne.n	8004000 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800405a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800406e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e1      	bne.n	800404a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e3      	bne.n	8004086 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040dc:	f023 0310 	bic.w	r3, r3, #16
 80040e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe f9a5 	bl	8002456 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800411e:	b29b      	uxth	r3, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8d8 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800412c:	e0b9      	b.n	80042a2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800413a:	b29b      	uxth	r3, r3
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80ab 	beq.w	80042a6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a6 	beq.w	80042a6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800416e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800417c:	647b      	str	r3, [r7, #68]	; 0x44
 800417e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800418a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e4      	bne.n	800415a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	623b      	str	r3, [r7, #32]
   return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041b4:	633a      	str	r2, [r7, #48]	; 0x30
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e3      	bne.n	8004190 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	69b9      	ldr	r1, [r7, #24]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	617b      	str	r3, [r7, #20]
   return(result);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e4      	bne.n	80041dc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2202      	movs	r2, #2
 8004216:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f85c 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004224:	e03f      	b.n	80042a6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <HAL_UART_IRQHandler+0x570>
 8004232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 ff85 	bl	8005158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800424e:	e02d      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800425c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01c      	beq.n	80042aa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
    }
    return;
 8004278:	e017      	b.n	80042aa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800427a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_UART_IRQHandler+0x5cc>
 8004286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fd7a 	bl	8004d8c <UART_EndTransmit_IT>
    return;
 8004298:	e008      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
      return;
 800429a:	bf00      	nop
 800429c:	e006      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
    return;
 800429e:	bf00      	nop
 80042a0:	e004      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_UART_IRQHandler+0x5cc>
    return;
 80042aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80042ac:	37e8      	adds	r7, #232	; 0xe8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4313      	orrs	r3, r2
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b9e      	ldr	r3, [pc, #632]	; (800459c <UART_SetConfig+0x2a8>)
 8004324:	4013      	ands	r3, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a93      	ldr	r2, [pc, #588]	; (80045a0 <UART_SetConfig+0x2ac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	4313      	orrs	r3, r2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a8a      	ldr	r2, [pc, #552]	; (80045a4 <UART_SetConfig+0x2b0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d126      	bne.n	80043cc <UART_SetConfig+0xd8>
 800437e:	4b8a      	ldr	r3, [pc, #552]	; (80045a8 <UART_SetConfig+0x2b4>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d81b      	bhi.n	80043c4 <UART_SetConfig+0xd0>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0xa0>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b5 	.word	0x080043b5
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e0ab      	b.n	8004504 <UART_SetConfig+0x210>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e0a7      	b.n	8004504 <UART_SetConfig+0x210>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e0a3      	b.n	8004504 <UART_SetConfig+0x210>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e09f      	b.n	8004504 <UART_SetConfig+0x210>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e09b      	b.n	8004504 <UART_SetConfig+0x210>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a76      	ldr	r2, [pc, #472]	; (80045ac <UART_SetConfig+0x2b8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d138      	bne.n	8004448 <UART_SetConfig+0x154>
 80043d6:	4b74      	ldr	r3, [pc, #464]	; (80045a8 <UART_SetConfig+0x2b4>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d82d      	bhi.n	8004440 <UART_SetConfig+0x14c>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xf8>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004441 	.word	0x08004441
 80043f8:	08004441 	.word	0x08004441
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004441 	.word	0x08004441
 8004404:	08004441 	.word	0x08004441
 8004408:	08004441 	.word	0x08004441
 800440c:	08004429 	.word	0x08004429
 8004410:	08004441 	.word	0x08004441
 8004414:	08004441 	.word	0x08004441
 8004418:	08004441 	.word	0x08004441
 800441c:	08004439 	.word	0x08004439
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e06d      	b.n	8004504 <UART_SetConfig+0x210>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e069      	b.n	8004504 <UART_SetConfig+0x210>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e065      	b.n	8004504 <UART_SetConfig+0x210>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e061      	b.n	8004504 <UART_SetConfig+0x210>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e05d      	b.n	8004504 <UART_SetConfig+0x210>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <UART_SetConfig+0x2bc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d125      	bne.n	800449e <UART_SetConfig+0x1aa>
 8004452:	4b55      	ldr	r3, [pc, #340]	; (80045a8 <UART_SetConfig+0x2b4>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d016      	beq.n	800448e <UART_SetConfig+0x19a>
 8004460:	2b30      	cmp	r3, #48	; 0x30
 8004462:	d818      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d00a      	beq.n	800447e <UART_SetConfig+0x18a>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d814      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <UART_SetConfig+0x182>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d008      	beq.n	8004486 <UART_SetConfig+0x192>
 8004474:	e00f      	b.n	8004496 <UART_SetConfig+0x1a2>
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e042      	b.n	8004504 <UART_SetConfig+0x210>
 800447e:	2302      	movs	r3, #2
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e03e      	b.n	8004504 <UART_SetConfig+0x210>
 8004486:	2304      	movs	r3, #4
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e03a      	b.n	8004504 <UART_SetConfig+0x210>
 800448e:	2308      	movs	r3, #8
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e036      	b.n	8004504 <UART_SetConfig+0x210>
 8004496:	2310      	movs	r3, #16
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449c:	e032      	b.n	8004504 <UART_SetConfig+0x210>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <UART_SetConfig+0x2ac>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d12a      	bne.n	80044fe <UART_SetConfig+0x20a>
 80044a8:	4b3f      	ldr	r3, [pc, #252]	; (80045a8 <UART_SetConfig+0x2b4>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b6:	d01a      	beq.n	80044ee <UART_SetConfig+0x1fa>
 80044b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044bc:	d81b      	bhi.n	80044f6 <UART_SetConfig+0x202>
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c2:	d00c      	beq.n	80044de <UART_SetConfig+0x1ea>
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d815      	bhi.n	80044f6 <UART_SetConfig+0x202>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <UART_SetConfig+0x1e2>
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d008      	beq.n	80044e6 <UART_SetConfig+0x1f2>
 80044d4:	e00f      	b.n	80044f6 <UART_SetConfig+0x202>
 80044d6:	2300      	movs	r3, #0
 80044d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044dc:	e012      	b.n	8004504 <UART_SetConfig+0x210>
 80044de:	2302      	movs	r3, #2
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e4:	e00e      	b.n	8004504 <UART_SetConfig+0x210>
 80044e6:	2304      	movs	r3, #4
 80044e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ec:	e00a      	b.n	8004504 <UART_SetConfig+0x210>
 80044ee:	2308      	movs	r3, #8
 80044f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f4:	e006      	b.n	8004504 <UART_SetConfig+0x210>
 80044f6:	2310      	movs	r3, #16
 80044f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fc:	e002      	b.n	8004504 <UART_SetConfig+0x210>
 80044fe:	2310      	movs	r3, #16
 8004500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <UART_SetConfig+0x2ac>)
 800450a:	4293      	cmp	r3, r2
 800450c:	f040 808a 	bne.w	8004624 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004514:	2b08      	cmp	r3, #8
 8004516:	d824      	bhi.n	8004562 <UART_SetConfig+0x26e>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <UART_SetConfig+0x22c>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004545 	.word	0x08004545
 8004524:	08004563 	.word	0x08004563
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004563 	.word	0x08004563
 8004530:	08004553 	.word	0x08004553
 8004534:	08004563 	.word	0x08004563
 8004538:	08004563 	.word	0x08004563
 800453c:	08004563 	.word	0x08004563
 8004540:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7ff f920 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004548:	61f8      	str	r0, [r7, #28]
        break;
 800454a:	e010      	b.n	800456e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <UART_SetConfig+0x2c0>)
 800454e:	61fb      	str	r3, [r7, #28]
        break;
 8004550:	e00d      	b.n	800456e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7ff f881 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8004556:	61f8      	str	r0, [r7, #28]
        break;
 8004558:	e009      	b.n	800456e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	61fb      	str	r3, [r7, #28]
        break;
 8004560:	e005      	b.n	800456e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800456c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8109 	beq.w	8004788 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	429a      	cmp	r2, r3
 8004584:	d305      	bcc.n	8004592 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	429a      	cmp	r2, r3
 8004590:	d912      	bls.n	80045b8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004598:	e0f6      	b.n	8004788 <UART_SetConfig+0x494>
 800459a:	bf00      	nop
 800459c:	efff69f3 	.word	0xefff69f3
 80045a0:	40008000 	.word	0x40008000
 80045a4:	40013800 	.word	0x40013800
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40004400 	.word	0x40004400
 80045b0:	40004800 	.word	0x40004800
 80045b4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2200      	movs	r2, #0
 80045bc:	461c      	mov	r4, r3
 80045be:	4615      	mov	r5, r2
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	022b      	lsls	r3, r5, #8
 80045ca:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045ce:	0222      	lsls	r2, r4, #8
 80045d0:	68f9      	ldr	r1, [r7, #12]
 80045d2:	6849      	ldr	r1, [r1, #4]
 80045d4:	0849      	lsrs	r1, r1, #1
 80045d6:	2000      	movs	r0, #0
 80045d8:	4688      	mov	r8, r1
 80045da:	4681      	mov	r9, r0
 80045dc:	eb12 0a08 	adds.w	sl, r2, r8
 80045e0:	eb43 0b09 	adc.w	fp, r3, r9
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045f2:	4650      	mov	r0, sl
 80045f4:	4659      	mov	r1, fp
 80045f6:	f7fc fb01 	bl	8000bfc <__aeabi_uldivmod>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4613      	mov	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d308      	bcc.n	800461c <UART_SetConfig+0x328>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004610:	d204      	bcs.n	800461c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e0b5      	b.n	8004788 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004622:	e0b1      	b.n	8004788 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462c:	d15d      	bne.n	80046ea <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800462e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004632:	2b08      	cmp	r3, #8
 8004634:	d827      	bhi.n	8004686 <UART_SetConfig+0x392>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x348>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	08004661 	.word	0x08004661
 8004640:	08004669 	.word	0x08004669
 8004644:	08004671 	.word	0x08004671
 8004648:	08004687 	.word	0x08004687
 800464c:	08004677 	.word	0x08004677
 8004650:	08004687 	.word	0x08004687
 8004654:	08004687 	.word	0x08004687
 8004658:	08004687 	.word	0x08004687
 800465c:	0800467f 	.word	0x0800467f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004660:	f7ff f892 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004664:	61f8      	str	r0, [r7, #28]
        break;
 8004666:	e014      	b.n	8004692 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7ff f8a4 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 800466c:	61f8      	str	r0, [r7, #28]
        break;
 800466e:	e010      	b.n	8004692 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004670:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <UART_SetConfig+0x4b0>)
 8004672:	61fb      	str	r3, [r7, #28]
        break;
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004676:	f7fe ffef 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 800467a:	61f8      	str	r0, [r7, #28]
        break;
 800467c:	e009      	b.n	8004692 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	61fb      	str	r3, [r7, #28]
        break;
 8004684:	e005      	b.n	8004692 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d077      	beq.n	8004788 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005a      	lsls	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	441a      	add	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	d916      	bls.n	80046e2 <UART_SetConfig+0x3ee>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ba:	d212      	bcs.n	80046e2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f023 030f 	bic.w	r3, r3, #15
 80046c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	8afa      	ldrh	r2, [r7, #22]
 80046de:	60da      	str	r2, [r3, #12]
 80046e0:	e052      	b.n	8004788 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046e8:	e04e      	b.n	8004788 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d827      	bhi.n	8004742 <UART_SetConfig+0x44e>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x404>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004725 	.word	0x08004725
 8004700:	0800472d 	.word	0x0800472d
 8004704:	08004743 	.word	0x08004743
 8004708:	08004733 	.word	0x08004733
 800470c:	08004743 	.word	0x08004743
 8004710:	08004743 	.word	0x08004743
 8004714:	08004743 	.word	0x08004743
 8004718:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7ff f834 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004720:	61f8      	str	r0, [r7, #28]
        break;
 8004722:	e014      	b.n	800474e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7ff f846 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8004728:	61f8      	str	r0, [r7, #28]
        break;
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <UART_SetConfig+0x4b0>)
 800472e:	61fb      	str	r3, [r7, #28]
        break;
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7fe ff91 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8004736:	61f8      	str	r0, [r7, #28]
        break;
 8004738:	e009      	b.n	800474e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	61fb      	str	r3, [r7, #28]
        break;
 8004740:	e005      	b.n	800474e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800474c:	bf00      	nop
    }

    if (pclk != 0U)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d019      	beq.n	8004788 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085a      	lsrs	r2, r3, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	441a      	add	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	d909      	bls.n	8004782 <UART_SetConfig+0x48e>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d205      	bcs.n	8004782 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e002      	b.n	8004788 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004794:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	; 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a2:	bf00      	nop
 80047a4:	00f42400 	.word	0x00f42400

080047a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01a      	beq.n	80048be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a6:	d10a      	bne.n	80048be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b098      	sub	sp, #96	; 0x60
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048fc:	f7fd fc8e 	bl	800221c <HAL_GetTick>
 8004900:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b08      	cmp	r3, #8
 800490e:	d12e      	bne.n	800496e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f88c 	bl	8004a3c <UART_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d021      	beq.n	800496e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
 800494a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800494e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e6      	bne.n	800492a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e062      	b.n	8004a34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d149      	bne.n	8004a10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f856 	bl	8004a3c <UART_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d03c      	beq.n	8004a10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	623b      	str	r3, [r7, #32]
   return(result);
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	633b      	str	r3, [r7, #48]	; 0x30
 80049b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	64bb      	str	r3, [r7, #72]	; 0x48
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	69b9      	ldr	r1, [r7, #24]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	617b      	str	r3, [r7, #20]
   return(result);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e011      	b.n	8004a34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3758      	adds	r7, #88	; 0x58
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	e049      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a54:	d045      	beq.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fd fbe1 	bl	800221c <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e048      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d031      	beq.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d110      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2208      	movs	r2, #8
 8004a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f8ff 	bl	8004c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e029      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abc:	d111      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8e5 	bl	8004c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e00f      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4013      	ands	r3, r2
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d0a6      	beq.n	8004a4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b097      	sub	sp, #92	; 0x5c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d10e      	bne.n	8004b5e <UART_Start_Receive_IT+0x52>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <UART_Start_Receive_IT+0x48>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b52:	e02d      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	22ff      	movs	r2, #255	; 0xff
 8004b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b5c:	e028      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <UART_Start_Receive_IT+0x76>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <UART_Start_Receive_IT+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	22ff      	movs	r2, #255	; 0xff
 8004b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b76:	e01b      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	227f      	movs	r2, #127	; 0x7f
 8004b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b80:	e016      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8a:	d10d      	bne.n	8004ba8 <UART_Start_Receive_IT+0x9c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <UART_Start_Receive_IT+0x92>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	227f      	movs	r2, #127	; 0x7f
 8004b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b9c:	e008      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	223f      	movs	r2, #63	; 0x3f
 8004ba2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ba6:	e003      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	; 0x22
 8004bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004be0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004be2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d107      	bne.n	8004c0e <UART_Start_Receive_IT+0x102>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <UART_Start_Receive_IT+0x184>)
 8004c0a:	669a      	str	r2, [r3, #104]	; 0x68
 8004c0c:	e002      	b.n	8004c14 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <UART_Start_Receive_IT+0x188>)
 8004c12:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d019      	beq.n	8004c50 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e6      	bne.n	8004c1c <UART_Start_Receive_IT+0x110>
 8004c4e:	e018      	b.n	8004c82 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f043 0320 	orr.w	r3, r3, #32
 8004c64:	653b      	str	r3, [r7, #80]	; 0x50
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e6      	bne.n	8004c50 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	375c      	adds	r7, #92	; 0x5c
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	08004f9d 	.word	0x08004f9d
 8004c94:	08004de1 	.word	0x08004de1

08004c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b095      	sub	sp, #84	; 0x54
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e6      	bne.n	8004ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d118      	bne.n	8004d40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0310 	bic.w	r3, r3, #16
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d54:	bf00      	nop
 8004d56:	3754      	adds	r7, #84	; 0x54
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff faa2 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e6      	bne.n	8004d94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fa6e 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd8:	bf00      	nop
 8004dda:	3720      	adds	r7, #32
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b09c      	sub	sp, #112	; 0x70
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004dee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df8:	2b22      	cmp	r3, #34	; 0x22
 8004dfa:	f040 80be 	bne.w	8004f7a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e0c:	b2d9      	uxtb	r1, r3
 8004e0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	400a      	ands	r2, r1
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 80a3 	bne.w	8004f8e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e6      	bne.n	8004e48 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	667b      	str	r3, [r7, #100]	; 0x64
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8004e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <UART_RxISR_8BIT+0x1b8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d01f      	beq.n	8004f0c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d018      	beq.n	8004f0c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eee:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8004efa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d12e      	bne.n	8004f72 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0310 	bic.w	r3, r3, #16
 8004f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	617b      	str	r3, [r7, #20]
   return(result);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b10      	cmp	r3, #16
 8004f58:	d103      	bne.n	8004f62 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2210      	movs	r2, #16
 8004f60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f9b6 	bl	80042dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f70:	e00d      	b.n	8004f8e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc f9b8 	bl	80012e8 <HAL_UART_RxCpltCallback>
}
 8004f78:	e009      	b.n	8004f8e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	8b1b      	ldrh	r3, [r3, #24]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0208 	orr.w	r2, r2, #8
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	831a      	strh	r2, [r3, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	3770      	adds	r7, #112	; 0x70
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40008000 	.word	0x40008000

08004f9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b09c      	sub	sp, #112	; 0x70
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004faa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
 8004fb6:	f040 80be 	bne.w	8005136 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004fc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004fce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 80a3 	bne.w	800514a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005018:	667b      	str	r3, [r7, #100]	; 0x64
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005022:	657b      	str	r3, [r7, #84]	; 0x54
 8005024:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3308      	adds	r3, #8
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	663b      	str	r3, [r7, #96]	; 0x60
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3308      	adds	r3, #8
 8005054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005056:	643a      	str	r2, [r7, #64]	; 0x40
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800505c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e5      	bne.n	8005036 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a34      	ldr	r2, [pc, #208]	; (8005154 <UART_RxISR_16BIT+0x1b8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01f      	beq.n	80050c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d12e      	bne.n	800512e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	613b      	str	r3, [r7, #16]
   return(result);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d103      	bne.n	800511e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff f8d8 	bl	80042dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800512c:	e00d      	b.n	800514a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fc f8da 	bl	80012e8 <HAL_UART_RxCpltCallback>
}
 8005134:	e009      	b.n	800514a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	8b1b      	ldrh	r3, [r3, #24]
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0208 	orr.w	r2, r2, #8
 8005146:	b292      	uxth	r2, r2
 8005148:	831a      	strh	r2, [r3, #24]
}
 800514a:	bf00      	nop
 800514c:	3770      	adds	r7, #112	; 0x70
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40008000 	.word	0x40008000

08005158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <atof>:
 800516c:	2100      	movs	r1, #0
 800516e:	f001 bb27 	b.w	80067c0 <strtod>

08005172 <__cvt>:
 8005172:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005176:	ec55 4b10 	vmov	r4, r5, d0
 800517a:	2d00      	cmp	r5, #0
 800517c:	460e      	mov	r6, r1
 800517e:	4619      	mov	r1, r3
 8005180:	462b      	mov	r3, r5
 8005182:	bfbb      	ittet	lt
 8005184:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005188:	461d      	movlt	r5, r3
 800518a:	2300      	movge	r3, #0
 800518c:	232d      	movlt	r3, #45	; 0x2d
 800518e:	700b      	strb	r3, [r1, #0]
 8005190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005192:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005196:	4691      	mov	r9, r2
 8005198:	f023 0820 	bic.w	r8, r3, #32
 800519c:	bfbc      	itt	lt
 800519e:	4622      	movlt	r2, r4
 80051a0:	4614      	movlt	r4, r2
 80051a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051a6:	d005      	beq.n	80051b4 <__cvt+0x42>
 80051a8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ac:	d100      	bne.n	80051b0 <__cvt+0x3e>
 80051ae:	3601      	adds	r6, #1
 80051b0:	2102      	movs	r1, #2
 80051b2:	e000      	b.n	80051b6 <__cvt+0x44>
 80051b4:	2103      	movs	r1, #3
 80051b6:	ab03      	add	r3, sp, #12
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	ab02      	add	r3, sp, #8
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	ec45 4b10 	vmov	d0, r4, r5
 80051c2:	4653      	mov	r3, sl
 80051c4:	4632      	mov	r2, r6
 80051c6:	f001 fc9f 	bl	8006b08 <_dtoa_r>
 80051ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051ce:	4607      	mov	r7, r0
 80051d0:	d102      	bne.n	80051d8 <__cvt+0x66>
 80051d2:	f019 0f01 	tst.w	r9, #1
 80051d6:	d022      	beq.n	800521e <__cvt+0xac>
 80051d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051dc:	eb07 0906 	add.w	r9, r7, r6
 80051e0:	d110      	bne.n	8005204 <__cvt+0x92>
 80051e2:	783b      	ldrb	r3, [r7, #0]
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d10a      	bne.n	80051fe <__cvt+0x8c>
 80051e8:	2200      	movs	r2, #0
 80051ea:	2300      	movs	r3, #0
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb fc74 	bl	8000adc <__aeabi_dcmpeq>
 80051f4:	b918      	cbnz	r0, 80051fe <__cvt+0x8c>
 80051f6:	f1c6 0601 	rsb	r6, r6, #1
 80051fa:	f8ca 6000 	str.w	r6, [sl]
 80051fe:	f8da 3000 	ldr.w	r3, [sl]
 8005202:	4499      	add	r9, r3
 8005204:	2200      	movs	r2, #0
 8005206:	2300      	movs	r3, #0
 8005208:	4620      	mov	r0, r4
 800520a:	4629      	mov	r1, r5
 800520c:	f7fb fc66 	bl	8000adc <__aeabi_dcmpeq>
 8005210:	b108      	cbz	r0, 8005216 <__cvt+0xa4>
 8005212:	f8cd 900c 	str.w	r9, [sp, #12]
 8005216:	2230      	movs	r2, #48	; 0x30
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	454b      	cmp	r3, r9
 800521c:	d307      	bcc.n	800522e <__cvt+0xbc>
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005222:	1bdb      	subs	r3, r3, r7
 8005224:	4638      	mov	r0, r7
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	b004      	add	sp, #16
 800522a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	9103      	str	r1, [sp, #12]
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e7f0      	b.n	8005218 <__cvt+0xa6>

08005236 <__exponent>:
 8005236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005238:	4603      	mov	r3, r0
 800523a:	2900      	cmp	r1, #0
 800523c:	bfb8      	it	lt
 800523e:	4249      	neglt	r1, r1
 8005240:	f803 2b02 	strb.w	r2, [r3], #2
 8005244:	bfb4      	ite	lt
 8005246:	222d      	movlt	r2, #45	; 0x2d
 8005248:	222b      	movge	r2, #43	; 0x2b
 800524a:	2909      	cmp	r1, #9
 800524c:	7042      	strb	r2, [r0, #1]
 800524e:	dd2a      	ble.n	80052a6 <__exponent+0x70>
 8005250:	f10d 0207 	add.w	r2, sp, #7
 8005254:	4617      	mov	r7, r2
 8005256:	260a      	movs	r6, #10
 8005258:	4694      	mov	ip, r2
 800525a:	fb91 f5f6 	sdiv	r5, r1, r6
 800525e:	fb06 1415 	mls	r4, r6, r5, r1
 8005262:	3430      	adds	r4, #48	; 0x30
 8005264:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005268:	460c      	mov	r4, r1
 800526a:	2c63      	cmp	r4, #99	; 0x63
 800526c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005270:	4629      	mov	r1, r5
 8005272:	dcf1      	bgt.n	8005258 <__exponent+0x22>
 8005274:	3130      	adds	r1, #48	; 0x30
 8005276:	f1ac 0402 	sub.w	r4, ip, #2
 800527a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800527e:	1c41      	adds	r1, r0, #1
 8005280:	4622      	mov	r2, r4
 8005282:	42ba      	cmp	r2, r7
 8005284:	d30a      	bcc.n	800529c <__exponent+0x66>
 8005286:	f10d 0209 	add.w	r2, sp, #9
 800528a:	eba2 020c 	sub.w	r2, r2, ip
 800528e:	42bc      	cmp	r4, r7
 8005290:	bf88      	it	hi
 8005292:	2200      	movhi	r2, #0
 8005294:	4413      	add	r3, r2
 8005296:	1a18      	subs	r0, r3, r0
 8005298:	b003      	add	sp, #12
 800529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052a0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052a4:	e7ed      	b.n	8005282 <__exponent+0x4c>
 80052a6:	2330      	movs	r3, #48	; 0x30
 80052a8:	3130      	adds	r1, #48	; 0x30
 80052aa:	7083      	strb	r3, [r0, #2]
 80052ac:	70c1      	strb	r1, [r0, #3]
 80052ae:	1d03      	adds	r3, r0, #4
 80052b0:	e7f1      	b.n	8005296 <__exponent+0x60>
	...

080052b4 <_printf_float>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	ed2d 8b02 	vpush	{d8}
 80052bc:	b08d      	sub	sp, #52	; 0x34
 80052be:	460c      	mov	r4, r1
 80052c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052c4:	4616      	mov	r6, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	4605      	mov	r5, r0
 80052ca:	f001 fb2d 	bl	8006928 <_localeconv_r>
 80052ce:	f8d0 a000 	ldr.w	sl, [r0]
 80052d2:	4650      	mov	r0, sl
 80052d4:	f7fa ffcc 	bl	8000270 <strlen>
 80052d8:	2300      	movs	r3, #0
 80052da:	930a      	str	r3, [sp, #40]	; 0x28
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	f8d8 3000 	ldr.w	r3, [r8]
 80052e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052e8:	3307      	adds	r3, #7
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	f103 0208 	add.w	r2, r3, #8
 80052f2:	f8c8 2000 	str.w	r2, [r8]
 80052f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	f8cd 8018 	str.w	r8, [sp, #24]
 8005304:	ee08 0a10 	vmov	s16, r0
 8005308:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800530c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005310:	4b9e      	ldr	r3, [pc, #632]	; (800558c <_printf_float+0x2d8>)
 8005312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005316:	f7fb fc13 	bl	8000b40 <__aeabi_dcmpun>
 800531a:	bb88      	cbnz	r0, 8005380 <_printf_float+0xcc>
 800531c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005320:	4b9a      	ldr	r3, [pc, #616]	; (800558c <_printf_float+0x2d8>)
 8005322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005326:	f7fb fbed 	bl	8000b04 <__aeabi_dcmple>
 800532a:	bb48      	cbnz	r0, 8005380 <_printf_float+0xcc>
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	4640      	mov	r0, r8
 8005332:	4649      	mov	r1, r9
 8005334:	f7fb fbdc 	bl	8000af0 <__aeabi_dcmplt>
 8005338:	b110      	cbz	r0, 8005340 <_printf_float+0x8c>
 800533a:	232d      	movs	r3, #45	; 0x2d
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	4a93      	ldr	r2, [pc, #588]	; (8005590 <_printf_float+0x2dc>)
 8005342:	4b94      	ldr	r3, [pc, #592]	; (8005594 <_printf_float+0x2e0>)
 8005344:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005348:	bf94      	ite	ls
 800534a:	4690      	movls	r8, r2
 800534c:	4698      	movhi	r8, r3
 800534e:	2303      	movs	r3, #3
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	9b05      	ldr	r3, [sp, #20]
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	f04f 0900 	mov.w	r9, #0
 800535e:	9700      	str	r7, [sp, #0]
 8005360:	4633      	mov	r3, r6
 8005362:	aa0b      	add	r2, sp, #44	; 0x2c
 8005364:	4621      	mov	r1, r4
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f9da 	bl	8005720 <_printf_common>
 800536c:	3001      	adds	r0, #1
 800536e:	f040 8090 	bne.w	8005492 <_printf_float+0x1de>
 8005372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005376:	b00d      	add	sp, #52	; 0x34
 8005378:	ecbd 8b02 	vpop	{d8}
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fb fbda 	bl	8000b40 <__aeabi_dcmpun>
 800538c:	b140      	cbz	r0, 80053a0 <_printf_float+0xec>
 800538e:	464b      	mov	r3, r9
 8005390:	2b00      	cmp	r3, #0
 8005392:	bfbc      	itt	lt
 8005394:	232d      	movlt	r3, #45	; 0x2d
 8005396:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800539a:	4a7f      	ldr	r2, [pc, #508]	; (8005598 <_printf_float+0x2e4>)
 800539c:	4b7f      	ldr	r3, [pc, #508]	; (800559c <_printf_float+0x2e8>)
 800539e:	e7d1      	b.n	8005344 <_printf_float+0x90>
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053a6:	9206      	str	r2, [sp, #24]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	d13f      	bne.n	800542c <_printf_float+0x178>
 80053ac:	2306      	movs	r3, #6
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	6861      	ldr	r1, [r4, #4]
 80053b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053b8:	2300      	movs	r3, #0
 80053ba:	9303      	str	r3, [sp, #12]
 80053bc:	ab0a      	add	r3, sp, #40	; 0x28
 80053be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053c2:	ab09      	add	r3, sp, #36	; 0x24
 80053c4:	ec49 8b10 	vmov	d0, r8, r9
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7ff fece 	bl	8005172 <__cvt>
 80053d6:	9b06      	ldr	r3, [sp, #24]
 80053d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053da:	2b47      	cmp	r3, #71	; 0x47
 80053dc:	4680      	mov	r8, r0
 80053de:	d108      	bne.n	80053f2 <_printf_float+0x13e>
 80053e0:	1cc8      	adds	r0, r1, #3
 80053e2:	db02      	blt.n	80053ea <_printf_float+0x136>
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	4299      	cmp	r1, r3
 80053e8:	dd41      	ble.n	800546e <_printf_float+0x1ba>
 80053ea:	f1ab 0302 	sub.w	r3, fp, #2
 80053ee:	fa5f fb83 	uxtb.w	fp, r3
 80053f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f6:	d820      	bhi.n	800543a <_printf_float+0x186>
 80053f8:	3901      	subs	r1, #1
 80053fa:	465a      	mov	r2, fp
 80053fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005400:	9109      	str	r1, [sp, #36]	; 0x24
 8005402:	f7ff ff18 	bl	8005236 <__exponent>
 8005406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005408:	1813      	adds	r3, r2, r0
 800540a:	2a01      	cmp	r2, #1
 800540c:	4681      	mov	r9, r0
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	dc02      	bgt.n	8005418 <_printf_float+0x164>
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	07d2      	lsls	r2, r2, #31
 8005416:	d501      	bpl.n	800541c <_printf_float+0x168>
 8005418:	3301      	adds	r3, #1
 800541a:	6123      	str	r3, [r4, #16]
 800541c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005420:	2b00      	cmp	r3, #0
 8005422:	d09c      	beq.n	800535e <_printf_float+0xaa>
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542a:	e798      	b.n	800535e <_printf_float+0xaa>
 800542c:	9a06      	ldr	r2, [sp, #24]
 800542e:	2a47      	cmp	r2, #71	; 0x47
 8005430:	d1be      	bne.n	80053b0 <_printf_float+0xfc>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1bc      	bne.n	80053b0 <_printf_float+0xfc>
 8005436:	2301      	movs	r3, #1
 8005438:	e7b9      	b.n	80053ae <_printf_float+0xfa>
 800543a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800543e:	d118      	bne.n	8005472 <_printf_float+0x1be>
 8005440:	2900      	cmp	r1, #0
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	dd0b      	ble.n	800545e <_printf_float+0x1aa>
 8005446:	6121      	str	r1, [r4, #16]
 8005448:	b913      	cbnz	r3, 8005450 <_printf_float+0x19c>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	07d0      	lsls	r0, r2, #31
 800544e:	d502      	bpl.n	8005456 <_printf_float+0x1a2>
 8005450:	3301      	adds	r3, #1
 8005452:	440b      	add	r3, r1
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	65a1      	str	r1, [r4, #88]	; 0x58
 8005458:	f04f 0900 	mov.w	r9, #0
 800545c:	e7de      	b.n	800541c <_printf_float+0x168>
 800545e:	b913      	cbnz	r3, 8005466 <_printf_float+0x1b2>
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	07d2      	lsls	r2, r2, #31
 8005464:	d501      	bpl.n	800546a <_printf_float+0x1b6>
 8005466:	3302      	adds	r3, #2
 8005468:	e7f4      	b.n	8005454 <_printf_float+0x1a0>
 800546a:	2301      	movs	r3, #1
 800546c:	e7f2      	b.n	8005454 <_printf_float+0x1a0>
 800546e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	4299      	cmp	r1, r3
 8005476:	db05      	blt.n	8005484 <_printf_float+0x1d0>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	6121      	str	r1, [r4, #16]
 800547c:	07d8      	lsls	r0, r3, #31
 800547e:	d5ea      	bpl.n	8005456 <_printf_float+0x1a2>
 8005480:	1c4b      	adds	r3, r1, #1
 8005482:	e7e7      	b.n	8005454 <_printf_float+0x1a0>
 8005484:	2900      	cmp	r1, #0
 8005486:	bfd4      	ite	le
 8005488:	f1c1 0202 	rsble	r2, r1, #2
 800548c:	2201      	movgt	r2, #1
 800548e:	4413      	add	r3, r2
 8005490:	e7e0      	b.n	8005454 <_printf_float+0x1a0>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	055a      	lsls	r2, r3, #21
 8005496:	d407      	bmi.n	80054a8 <_printf_float+0x1f4>
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	4642      	mov	r2, r8
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	d12c      	bne.n	8005500 <_printf_float+0x24c>
 80054a6:	e764      	b.n	8005372 <_printf_float+0xbe>
 80054a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ac:	f240 80e0 	bls.w	8005670 <_printf_float+0x3bc>
 80054b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f7fb fb10 	bl	8000adc <__aeabi_dcmpeq>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d034      	beq.n	800552a <_printf_float+0x276>
 80054c0:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <_printf_float+0x2ec>)
 80054c2:	2301      	movs	r3, #1
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af51 	beq.w	8005372 <_printf_float+0xbe>
 80054d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d4:	429a      	cmp	r2, r3
 80054d6:	db02      	blt.n	80054de <_printf_float+0x22a>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07d8      	lsls	r0, r3, #31
 80054dc:	d510      	bpl.n	8005500 <_printf_float+0x24c>
 80054de:	ee18 3a10 	vmov	r3, s16
 80054e2:	4652      	mov	r2, sl
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f af41 	beq.w	8005372 <_printf_float+0xbe>
 80054f0:	f04f 0800 	mov.w	r8, #0
 80054f4:	f104 091a 	add.w	r9, r4, #26
 80054f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4543      	cmp	r3, r8
 80054fe:	dc09      	bgt.n	8005514 <_printf_float+0x260>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	079b      	lsls	r3, r3, #30
 8005504:	f100 8107 	bmi.w	8005716 <_printf_float+0x462>
 8005508:	68e0      	ldr	r0, [r4, #12]
 800550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550c:	4298      	cmp	r0, r3
 800550e:	bfb8      	it	lt
 8005510:	4618      	movlt	r0, r3
 8005512:	e730      	b.n	8005376 <_printf_float+0xc2>
 8005514:	2301      	movs	r3, #1
 8005516:	464a      	mov	r2, r9
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f af27 	beq.w	8005372 <_printf_float+0xbe>
 8005524:	f108 0801 	add.w	r8, r8, #1
 8005528:	e7e6      	b.n	80054f8 <_printf_float+0x244>
 800552a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	dc39      	bgt.n	80055a4 <_printf_float+0x2f0>
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <_printf_float+0x2ec>)
 8005532:	2301      	movs	r3, #1
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af19 	beq.w	8005372 <_printf_float+0xbe>
 8005540:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005544:	4313      	orrs	r3, r2
 8005546:	d102      	bne.n	800554e <_printf_float+0x29a>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07d9      	lsls	r1, r3, #31
 800554c:	d5d8      	bpl.n	8005500 <_printf_float+0x24c>
 800554e:	ee18 3a10 	vmov	r3, s16
 8005552:	4652      	mov	r2, sl
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af09 	beq.w	8005372 <_printf_float+0xbe>
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	f104 0a1a 	add.w	sl, r4, #26
 8005568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556a:	425b      	negs	r3, r3
 800556c:	454b      	cmp	r3, r9
 800556e:	dc01      	bgt.n	8005574 <_printf_float+0x2c0>
 8005570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005572:	e792      	b.n	800549a <_printf_float+0x1e6>
 8005574:	2301      	movs	r3, #1
 8005576:	4652      	mov	r2, sl
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f aef7 	beq.w	8005372 <_printf_float+0xbe>
 8005584:	f109 0901 	add.w	r9, r9, #1
 8005588:	e7ee      	b.n	8005568 <_printf_float+0x2b4>
 800558a:	bf00      	nop
 800558c:	7fefffff 	.word	0x7fefffff
 8005590:	0800a29c 	.word	0x0800a29c
 8005594:	0800a2a0 	.word	0x0800a2a0
 8005598:	0800a2a4 	.word	0x0800a2a4
 800559c:	0800a2a8 	.word	0x0800a2a8
 80055a0:	0800a2ac 	.word	0x0800a2ac
 80055a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a8:	429a      	cmp	r2, r3
 80055aa:	bfa8      	it	ge
 80055ac:	461a      	movge	r2, r3
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	4691      	mov	r9, r2
 80055b2:	dc37      	bgt.n	8005624 <_printf_float+0x370>
 80055b4:	f04f 0b00 	mov.w	fp, #0
 80055b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055bc:	f104 021a 	add.w	r2, r4, #26
 80055c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	eba3 0309 	sub.w	r3, r3, r9
 80055c8:	455b      	cmp	r3, fp
 80055ca:	dc33      	bgt.n	8005634 <_printf_float+0x380>
 80055cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d0:	429a      	cmp	r2, r3
 80055d2:	db3b      	blt.n	800564c <_printf_float+0x398>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07da      	lsls	r2, r3, #31
 80055d8:	d438      	bmi.n	800564c <_printf_float+0x398>
 80055da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055de:	eba2 0903 	sub.w	r9, r2, r3
 80055e2:	9b05      	ldr	r3, [sp, #20]
 80055e4:	1ad2      	subs	r2, r2, r3
 80055e6:	4591      	cmp	r9, r2
 80055e8:	bfa8      	it	ge
 80055ea:	4691      	movge	r9, r2
 80055ec:	f1b9 0f00 	cmp.w	r9, #0
 80055f0:	dc35      	bgt.n	800565e <_printf_float+0x3aa>
 80055f2:	f04f 0800 	mov.w	r8, #0
 80055f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055fa:	f104 0a1a 	add.w	sl, r4, #26
 80055fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	eba3 0309 	sub.w	r3, r3, r9
 8005608:	4543      	cmp	r3, r8
 800560a:	f77f af79 	ble.w	8005500 <_printf_float+0x24c>
 800560e:	2301      	movs	r3, #1
 8005610:	4652      	mov	r2, sl
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	f43f aeaa 	beq.w	8005372 <_printf_float+0xbe>
 800561e:	f108 0801 	add.w	r8, r8, #1
 8005622:	e7ec      	b.n	80055fe <_printf_float+0x34a>
 8005624:	4613      	mov	r3, r2
 8005626:	4631      	mov	r1, r6
 8005628:	4642      	mov	r2, r8
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	d1c0      	bne.n	80055b4 <_printf_float+0x300>
 8005632:	e69e      	b.n	8005372 <_printf_float+0xbe>
 8005634:	2301      	movs	r3, #1
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	9205      	str	r2, [sp, #20]
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f ae97 	beq.w	8005372 <_printf_float+0xbe>
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	f10b 0b01 	add.w	fp, fp, #1
 800564a:	e7b9      	b.n	80055c0 <_printf_float+0x30c>
 800564c:	ee18 3a10 	vmov	r3, s16
 8005650:	4652      	mov	r2, sl
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	d1be      	bne.n	80055da <_printf_float+0x326>
 800565c:	e689      	b.n	8005372 <_printf_float+0xbe>
 800565e:	9a05      	ldr	r2, [sp, #20]
 8005660:	464b      	mov	r3, r9
 8005662:	4442      	add	r2, r8
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	d1c1      	bne.n	80055f2 <_printf_float+0x33e>
 800566e:	e680      	b.n	8005372 <_printf_float+0xbe>
 8005670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005672:	2a01      	cmp	r2, #1
 8005674:	dc01      	bgt.n	800567a <_printf_float+0x3c6>
 8005676:	07db      	lsls	r3, r3, #31
 8005678:	d53a      	bpl.n	80056f0 <_printf_float+0x43c>
 800567a:	2301      	movs	r3, #1
 800567c:	4642      	mov	r2, r8
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	f43f ae74 	beq.w	8005372 <_printf_float+0xbe>
 800568a:	ee18 3a10 	vmov	r3, s16
 800568e:	4652      	mov	r2, sl
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f ae6b 	beq.w	8005372 <_printf_float+0xbe>
 800569c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056a0:	2200      	movs	r2, #0
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056a8:	f7fb fa18 	bl	8000adc <__aeabi_dcmpeq>
 80056ac:	b9d8      	cbnz	r0, 80056e6 <_printf_float+0x432>
 80056ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80056b2:	f108 0201 	add.w	r2, r8, #1
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b8      	blx	r7
 80056bc:	3001      	adds	r0, #1
 80056be:	d10e      	bne.n	80056de <_printf_float+0x42a>
 80056c0:	e657      	b.n	8005372 <_printf_float+0xbe>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4652      	mov	r2, sl
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f ae50 	beq.w	8005372 <_printf_float+0xbe>
 80056d2:	f108 0801 	add.w	r8, r8, #1
 80056d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	4543      	cmp	r3, r8
 80056dc:	dcf1      	bgt.n	80056c2 <_printf_float+0x40e>
 80056de:	464b      	mov	r3, r9
 80056e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056e4:	e6da      	b.n	800549c <_printf_float+0x1e8>
 80056e6:	f04f 0800 	mov.w	r8, #0
 80056ea:	f104 0a1a 	add.w	sl, r4, #26
 80056ee:	e7f2      	b.n	80056d6 <_printf_float+0x422>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4642      	mov	r2, r8
 80056f4:	e7df      	b.n	80056b6 <_printf_float+0x402>
 80056f6:	2301      	movs	r3, #1
 80056f8:	464a      	mov	r2, r9
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f ae36 	beq.w	8005372 <_printf_float+0xbe>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	4543      	cmp	r3, r8
 8005712:	dcf0      	bgt.n	80056f6 <_printf_float+0x442>
 8005714:	e6f8      	b.n	8005508 <_printf_float+0x254>
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	f104 0919 	add.w	r9, r4, #25
 800571e:	e7f4      	b.n	800570a <_printf_float+0x456>

08005720 <_printf_common>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	4616      	mov	r6, r2
 8005726:	4699      	mov	r9, r3
 8005728:	688a      	ldr	r2, [r1, #8]
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005730:	4293      	cmp	r3, r2
 8005732:	bfb8      	it	lt
 8005734:	4613      	movlt	r3, r2
 8005736:	6033      	str	r3, [r6, #0]
 8005738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800573c:	4607      	mov	r7, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b10a      	cbz	r2, 8005746 <_printf_common+0x26>
 8005742:	3301      	adds	r3, #1
 8005744:	6033      	str	r3, [r6, #0]
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	0699      	lsls	r1, r3, #26
 800574a:	bf42      	ittt	mi
 800574c:	6833      	ldrmi	r3, [r6, #0]
 800574e:	3302      	addmi	r3, #2
 8005750:	6033      	strmi	r3, [r6, #0]
 8005752:	6825      	ldr	r5, [r4, #0]
 8005754:	f015 0506 	ands.w	r5, r5, #6
 8005758:	d106      	bne.n	8005768 <_printf_common+0x48>
 800575a:	f104 0a19 	add.w	sl, r4, #25
 800575e:	68e3      	ldr	r3, [r4, #12]
 8005760:	6832      	ldr	r2, [r6, #0]
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	42ab      	cmp	r3, r5
 8005766:	dc26      	bgt.n	80057b6 <_printf_common+0x96>
 8005768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800576c:	1e13      	subs	r3, r2, #0
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	bf18      	it	ne
 8005772:	2301      	movne	r3, #1
 8005774:	0692      	lsls	r2, r2, #26
 8005776:	d42b      	bmi.n	80057d0 <_printf_common+0xb0>
 8005778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d01e      	beq.n	80057c4 <_printf_common+0xa4>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf02      	ittt	eq
 8005792:	68e5      	ldreq	r5, [r4, #12]
 8005794:	6833      	ldreq	r3, [r6, #0]
 8005796:	1aed      	subeq	r5, r5, r3
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	bf0c      	ite	eq
 800579c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a0:	2500      	movne	r5, #0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bfc4      	itt	gt
 80057a6:	1a9b      	subgt	r3, r3, r2
 80057a8:	18ed      	addgt	r5, r5, r3
 80057aa:	2600      	movs	r6, #0
 80057ac:	341a      	adds	r4, #26
 80057ae:	42b5      	cmp	r5, r6
 80057b0:	d11a      	bne.n	80057e8 <_printf_common+0xc8>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e008      	b.n	80057c8 <_printf_common+0xa8>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4652      	mov	r2, sl
 80057ba:	4649      	mov	r1, r9
 80057bc:	4638      	mov	r0, r7
 80057be:	47c0      	blx	r8
 80057c0:	3001      	adds	r0, #1
 80057c2:	d103      	bne.n	80057cc <_printf_common+0xac>
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057cc:	3501      	adds	r5, #1
 80057ce:	e7c6      	b.n	800575e <_printf_common+0x3e>
 80057d0:	18e1      	adds	r1, r4, r3
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	2030      	movs	r0, #48	; 0x30
 80057d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057da:	4422      	add	r2, r4
 80057dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e4:	3302      	adds	r3, #2
 80057e6:	e7c7      	b.n	8005778 <_printf_common+0x58>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4622      	mov	r2, r4
 80057ec:	4649      	mov	r1, r9
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c0      	blx	r8
 80057f2:	3001      	adds	r0, #1
 80057f4:	d0e6      	beq.n	80057c4 <_printf_common+0xa4>
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7d9      	b.n	80057ae <_printf_common+0x8e>
	...

080057fc <_printf_i>:
 80057fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	7e0f      	ldrb	r7, [r1, #24]
 8005802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005804:	2f78      	cmp	r7, #120	; 0x78
 8005806:	4691      	mov	r9, r2
 8005808:	4680      	mov	r8, r0
 800580a:	460c      	mov	r4, r1
 800580c:	469a      	mov	sl, r3
 800580e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005812:	d807      	bhi.n	8005824 <_printf_i+0x28>
 8005814:	2f62      	cmp	r7, #98	; 0x62
 8005816:	d80a      	bhi.n	800582e <_printf_i+0x32>
 8005818:	2f00      	cmp	r7, #0
 800581a:	f000 80d4 	beq.w	80059c6 <_printf_i+0x1ca>
 800581e:	2f58      	cmp	r7, #88	; 0x58
 8005820:	f000 80c0 	beq.w	80059a4 <_printf_i+0x1a8>
 8005824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800582c:	e03a      	b.n	80058a4 <_printf_i+0xa8>
 800582e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005832:	2b15      	cmp	r3, #21
 8005834:	d8f6      	bhi.n	8005824 <_printf_i+0x28>
 8005836:	a101      	add	r1, pc, #4	; (adr r1, 800583c <_printf_i+0x40>)
 8005838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800583c:	08005895 	.word	0x08005895
 8005840:	080058a9 	.word	0x080058a9
 8005844:	08005825 	.word	0x08005825
 8005848:	08005825 	.word	0x08005825
 800584c:	08005825 	.word	0x08005825
 8005850:	08005825 	.word	0x08005825
 8005854:	080058a9 	.word	0x080058a9
 8005858:	08005825 	.word	0x08005825
 800585c:	08005825 	.word	0x08005825
 8005860:	08005825 	.word	0x08005825
 8005864:	08005825 	.word	0x08005825
 8005868:	080059ad 	.word	0x080059ad
 800586c:	080058d5 	.word	0x080058d5
 8005870:	08005967 	.word	0x08005967
 8005874:	08005825 	.word	0x08005825
 8005878:	08005825 	.word	0x08005825
 800587c:	080059cf 	.word	0x080059cf
 8005880:	08005825 	.word	0x08005825
 8005884:	080058d5 	.word	0x080058d5
 8005888:	08005825 	.word	0x08005825
 800588c:	08005825 	.word	0x08005825
 8005890:	0800596f 	.word	0x0800596f
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	602a      	str	r2, [r5, #0]
 800589c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a4:	2301      	movs	r3, #1
 80058a6:	e09f      	b.n	80059e8 <_printf_i+0x1ec>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	0607      	lsls	r7, r0, #24
 80058ae:	f103 0104 	add.w	r1, r3, #4
 80058b2:	6029      	str	r1, [r5, #0]
 80058b4:	d501      	bpl.n	80058ba <_printf_i+0xbe>
 80058b6:	681e      	ldr	r6, [r3, #0]
 80058b8:	e003      	b.n	80058c2 <_printf_i+0xc6>
 80058ba:	0646      	lsls	r6, r0, #25
 80058bc:	d5fb      	bpl.n	80058b6 <_printf_i+0xba>
 80058be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	da03      	bge.n	80058ce <_printf_i+0xd2>
 80058c6:	232d      	movs	r3, #45	; 0x2d
 80058c8:	4276      	negs	r6, r6
 80058ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ce:	485a      	ldr	r0, [pc, #360]	; (8005a38 <_printf_i+0x23c>)
 80058d0:	230a      	movs	r3, #10
 80058d2:	e012      	b.n	80058fa <_printf_i+0xfe>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1d19      	adds	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	0605      	lsls	r5, r0, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xe8>
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	e002      	b.n	80058ea <_printf_i+0xee>
 80058e4:	0641      	lsls	r1, r0, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xe4>
 80058e8:	881e      	ldrh	r6, [r3, #0]
 80058ea:	4853      	ldr	r0, [pc, #332]	; (8005a38 <_printf_i+0x23c>)
 80058ec:	2f6f      	cmp	r7, #111	; 0x6f
 80058ee:	bf0c      	ite	eq
 80058f0:	2308      	moveq	r3, #8
 80058f2:	230a      	movne	r3, #10
 80058f4:	2100      	movs	r1, #0
 80058f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058fa:	6865      	ldr	r5, [r4, #4]
 80058fc:	60a5      	str	r5, [r4, #8]
 80058fe:	2d00      	cmp	r5, #0
 8005900:	bfa2      	ittt	ge
 8005902:	6821      	ldrge	r1, [r4, #0]
 8005904:	f021 0104 	bicge.w	r1, r1, #4
 8005908:	6021      	strge	r1, [r4, #0]
 800590a:	b90e      	cbnz	r6, 8005910 <_printf_i+0x114>
 800590c:	2d00      	cmp	r5, #0
 800590e:	d04b      	beq.n	80059a8 <_printf_i+0x1ac>
 8005910:	4615      	mov	r5, r2
 8005912:	fbb6 f1f3 	udiv	r1, r6, r3
 8005916:	fb03 6711 	mls	r7, r3, r1, r6
 800591a:	5dc7      	ldrb	r7, [r0, r7]
 800591c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005920:	4637      	mov	r7, r6
 8005922:	42bb      	cmp	r3, r7
 8005924:	460e      	mov	r6, r1
 8005926:	d9f4      	bls.n	8005912 <_printf_i+0x116>
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10b      	bne.n	8005944 <_printf_i+0x148>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07de      	lsls	r6, r3, #31
 8005930:	d508      	bpl.n	8005944 <_printf_i+0x148>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6861      	ldr	r1, [r4, #4]
 8005936:	4299      	cmp	r1, r3
 8005938:	bfde      	ittt	le
 800593a:	2330      	movle	r3, #48	; 0x30
 800593c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005940:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005944:	1b52      	subs	r2, r2, r5
 8005946:	6122      	str	r2, [r4, #16]
 8005948:	f8cd a000 	str.w	sl, [sp]
 800594c:	464b      	mov	r3, r9
 800594e:	aa03      	add	r2, sp, #12
 8005950:	4621      	mov	r1, r4
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fee4 	bl	8005720 <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	d14a      	bne.n	80059f2 <_printf_i+0x1f6>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005960:	b004      	add	sp, #16
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f043 0320 	orr.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	4833      	ldr	r0, [pc, #204]	; (8005a3c <_printf_i+0x240>)
 8005970:	2778      	movs	r7, #120	; 0x78
 8005972:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6829      	ldr	r1, [r5, #0]
 800597a:	061f      	lsls	r7, r3, #24
 800597c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005980:	d402      	bmi.n	8005988 <_printf_i+0x18c>
 8005982:	065f      	lsls	r7, r3, #25
 8005984:	bf48      	it	mi
 8005986:	b2b6      	uxthmi	r6, r6
 8005988:	07df      	lsls	r7, r3, #31
 800598a:	bf48      	it	mi
 800598c:	f043 0320 	orrmi.w	r3, r3, #32
 8005990:	6029      	str	r1, [r5, #0]
 8005992:	bf48      	it	mi
 8005994:	6023      	strmi	r3, [r4, #0]
 8005996:	b91e      	cbnz	r6, 80059a0 <_printf_i+0x1a4>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	2310      	movs	r3, #16
 80059a2:	e7a7      	b.n	80058f4 <_printf_i+0xf8>
 80059a4:	4824      	ldr	r0, [pc, #144]	; (8005a38 <_printf_i+0x23c>)
 80059a6:	e7e4      	b.n	8005972 <_printf_i+0x176>
 80059a8:	4615      	mov	r5, r2
 80059aa:	e7bd      	b.n	8005928 <_printf_i+0x12c>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6826      	ldr	r6, [r4, #0]
 80059b0:	6961      	ldr	r1, [r4, #20]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6028      	str	r0, [r5, #0]
 80059b6:	0635      	lsls	r5, r6, #24
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	d501      	bpl.n	80059c0 <_printf_i+0x1c4>
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	e002      	b.n	80059c6 <_printf_i+0x1ca>
 80059c0:	0670      	lsls	r0, r6, #25
 80059c2:	d5fb      	bpl.n	80059bc <_printf_i+0x1c0>
 80059c4:	8019      	strh	r1, [r3, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	4615      	mov	r5, r2
 80059cc:	e7bc      	b.n	8005948 <_printf_i+0x14c>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	4628      	mov	r0, r5
 80059dc:	f7fa fbf8 	bl	80001d0 <memchr>
 80059e0:	b108      	cbz	r0, 80059e6 <_printf_i+0x1ea>
 80059e2:	1b40      	subs	r0, r0, r5
 80059e4:	6060      	str	r0, [r4, #4]
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	e7aa      	b.n	8005948 <_printf_i+0x14c>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	462a      	mov	r2, r5
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d0ad      	beq.n	800595c <_printf_i+0x160>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	d413      	bmi.n	8005a2e <_printf_i+0x232>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e7a6      	b.n	8005960 <_printf_i+0x164>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d09d      	beq.n	800595c <_printf_i+0x160>
 8005a20:	3501      	adds	r5, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	9903      	ldr	r1, [sp, #12]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dcf2      	bgt.n	8005a12 <_printf_i+0x216>
 8005a2c:	e7eb      	b.n	8005a06 <_printf_i+0x20a>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	f104 0619 	add.w	r6, r4, #25
 8005a34:	e7f5      	b.n	8005a22 <_printf_i+0x226>
 8005a36:	bf00      	nop
 8005a38:	0800a2ae 	.word	0x0800a2ae
 8005a3c:	0800a2bf 	.word	0x0800a2bf

08005a40 <siprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	b500      	push	{lr}
 8005a44:	b09c      	sub	sp, #112	; 0x70
 8005a46:	ab1d      	add	r3, sp, #116	; 0x74
 8005a48:	9002      	str	r0, [sp, #8]
 8005a4a:	9006      	str	r0, [sp, #24]
 8005a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <siprintf+0x38>)
 8005a52:	9107      	str	r1, [sp, #28]
 8005a54:	9104      	str	r1, [sp, #16]
 8005a56:	4909      	ldr	r1, [pc, #36]	; (8005a7c <siprintf+0x3c>)
 8005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	a902      	add	r1, sp, #8
 8005a64:	f002 f9f4 	bl	8007e50 <_svfiprintf_r>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	b01c      	add	sp, #112	; 0x70
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	200001d8 	.word	0x200001d8
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <std>:
 8005a80:	2300      	movs	r3, #0
 8005a82:	b510      	push	{r4, lr}
 8005a84:	4604      	mov	r4, r0
 8005a86:	e9c0 3300 	strd	r3, r3, [r0]
 8005a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8e:	6083      	str	r3, [r0, #8]
 8005a90:	8181      	strh	r1, [r0, #12]
 8005a92:	6643      	str	r3, [r0, #100]	; 0x64
 8005a94:	81c2      	strh	r2, [r0, #14]
 8005a96:	6183      	str	r3, [r0, #24]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	305c      	adds	r0, #92	; 0x5c
 8005a9e:	f000 ff3b 	bl	8006918 <memset>
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <std+0x38>)
 8005aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <std+0x3c>)
 8005aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <std+0x40>)
 8005aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <std+0x44>)
 8005ab0:	6224      	str	r4, [r4, #32]
 8005ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ab4:	bd10      	pop	{r4, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08008c8f 	.word	0x08008c8f
 8005abc:	08008cb1 	.word	0x08008cb1
 8005ac0:	08008ce9 	.word	0x08008ce9
 8005ac4:	08008d0d 	.word	0x08008d0d

08005ac8 <stdio_exit_handler>:
 8005ac8:	4a02      	ldr	r2, [pc, #8]	; (8005ad4 <stdio_exit_handler+0xc>)
 8005aca:	4903      	ldr	r1, [pc, #12]	; (8005ad8 <stdio_exit_handler+0x10>)
 8005acc:	4803      	ldr	r0, [pc, #12]	; (8005adc <stdio_exit_handler+0x14>)
 8005ace:	f000 be83 	b.w	80067d8 <_fwalk_sglue>
 8005ad2:	bf00      	nop
 8005ad4:	20000014 	.word	0x20000014
 8005ad8:	080082cd 	.word	0x080082cd
 8005adc:	2000018c 	.word	0x2000018c

08005ae0 <cleanup_stdio>:
 8005ae0:	6841      	ldr	r1, [r0, #4]
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <cleanup_stdio+0x34>)
 8005ae4:	4299      	cmp	r1, r3
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	d001      	beq.n	8005af0 <cleanup_stdio+0x10>
 8005aec:	f002 fbee 	bl	80082cc <_fflush_r>
 8005af0:	68a1      	ldr	r1, [r4, #8]
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <cleanup_stdio+0x38>)
 8005af4:	4299      	cmp	r1, r3
 8005af6:	d002      	beq.n	8005afe <cleanup_stdio+0x1e>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f002 fbe7 	bl	80082cc <_fflush_r>
 8005afe:	68e1      	ldr	r1, [r4, #12]
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <cleanup_stdio+0x3c>)
 8005b02:	4299      	cmp	r1, r3
 8005b04:	d004      	beq.n	8005b10 <cleanup_stdio+0x30>
 8005b06:	4620      	mov	r0, r4
 8005b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b0c:	f002 bbde 	b.w	80082cc <_fflush_r>
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop
 8005b14:	20000940 	.word	0x20000940
 8005b18:	200009a8 	.word	0x200009a8
 8005b1c:	20000a10 	.word	0x20000a10

08005b20 <global_stdio_init.part.0>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <global_stdio_init.part.0+0x30>)
 8005b24:	4c0b      	ldr	r4, [pc, #44]	; (8005b54 <global_stdio_init.part.0+0x34>)
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <global_stdio_init.part.0+0x38>)
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2104      	movs	r1, #4
 8005b30:	f7ff ffa6 	bl	8005a80 <std>
 8005b34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b38:	2201      	movs	r2, #1
 8005b3a:	2109      	movs	r1, #9
 8005b3c:	f7ff ffa0 	bl	8005a80 <std>
 8005b40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b44:	2202      	movs	r2, #2
 8005b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4a:	2112      	movs	r1, #18
 8005b4c:	f7ff bf98 	b.w	8005a80 <std>
 8005b50:	20000a78 	.word	0x20000a78
 8005b54:	20000940 	.word	0x20000940
 8005b58:	08005ac9 	.word	0x08005ac9

08005b5c <__sfp_lock_acquire>:
 8005b5c:	4801      	ldr	r0, [pc, #4]	; (8005b64 <__sfp_lock_acquire+0x8>)
 8005b5e:	f000 bf11 	b.w	8006984 <__retarget_lock_acquire_recursive>
 8005b62:	bf00      	nop
 8005b64:	20000a7d 	.word	0x20000a7d

08005b68 <__sfp_lock_release>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__sfp_lock_release+0x8>)
 8005b6a:	f000 bf0c 	b.w	8006986 <__retarget_lock_release_recursive>
 8005b6e:	bf00      	nop
 8005b70:	20000a7d 	.word	0x20000a7d

08005b74 <__sinit>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4604      	mov	r4, r0
 8005b78:	f7ff fff0 	bl	8005b5c <__sfp_lock_acquire>
 8005b7c:	6a23      	ldr	r3, [r4, #32]
 8005b7e:	b11b      	cbz	r3, 8005b88 <__sinit+0x14>
 8005b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b84:	f7ff bff0 	b.w	8005b68 <__sfp_lock_release>
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <__sinit+0x28>)
 8005b8a:	6223      	str	r3, [r4, #32]
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <__sinit+0x2c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f5      	bne.n	8005b80 <__sinit+0xc>
 8005b94:	f7ff ffc4 	bl	8005b20 <global_stdio_init.part.0>
 8005b98:	e7f2      	b.n	8005b80 <__sinit+0xc>
 8005b9a:	bf00      	nop
 8005b9c:	08005ae1 	.word	0x08005ae1
 8005ba0:	20000a78 	.word	0x20000a78

08005ba4 <sulp>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	460d      	mov	r5, r1
 8005baa:	ec45 4b10 	vmov	d0, r4, r5
 8005bae:	4616      	mov	r6, r2
 8005bb0:	f002 ff2c 	bl	8008a0c <__ulp>
 8005bb4:	ec51 0b10 	vmov	r0, r1, d0
 8005bb8:	b17e      	cbz	r6, 8005bda <sulp+0x36>
 8005bba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005bbe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	dd09      	ble.n	8005bda <sulp+0x36>
 8005bc6:	051b      	lsls	r3, r3, #20
 8005bc8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005bcc:	2400      	movs	r4, #0
 8005bce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	f7fa fd19 	bl	800060c <__aeabi_dmul>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	0000      	movs	r0, r0
	...

08005be0 <_strtod_l>:
 8005be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be4:	ed2d 8b02 	vpush	{d8}
 8005be8:	b09b      	sub	sp, #108	; 0x6c
 8005bea:	4604      	mov	r4, r0
 8005bec:	9213      	str	r2, [sp, #76]	; 0x4c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	9216      	str	r2, [sp, #88]	; 0x58
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	f04f 0900 	mov.w	r9, #0
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	9215      	str	r2, [sp, #84]	; 0x54
 8005c00:	7811      	ldrb	r1, [r2, #0]
 8005c02:	292b      	cmp	r1, #43	; 0x2b
 8005c04:	d04c      	beq.n	8005ca0 <_strtod_l+0xc0>
 8005c06:	d83a      	bhi.n	8005c7e <_strtod_l+0x9e>
 8005c08:	290d      	cmp	r1, #13
 8005c0a:	d834      	bhi.n	8005c76 <_strtod_l+0x96>
 8005c0c:	2908      	cmp	r1, #8
 8005c0e:	d834      	bhi.n	8005c7a <_strtod_l+0x9a>
 8005c10:	2900      	cmp	r1, #0
 8005c12:	d03d      	beq.n	8005c90 <_strtod_l+0xb0>
 8005c14:	2200      	movs	r2, #0
 8005c16:	920a      	str	r2, [sp, #40]	; 0x28
 8005c18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005c1a:	7832      	ldrb	r2, [r6, #0]
 8005c1c:	2a30      	cmp	r2, #48	; 0x30
 8005c1e:	f040 80b4 	bne.w	8005d8a <_strtod_l+0x1aa>
 8005c22:	7872      	ldrb	r2, [r6, #1]
 8005c24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005c28:	2a58      	cmp	r2, #88	; 0x58
 8005c2a:	d170      	bne.n	8005d0e <_strtod_l+0x12e>
 8005c2c:	9302      	str	r3, [sp, #8]
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	ab16      	add	r3, sp, #88	; 0x58
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	4a8e      	ldr	r2, [pc, #568]	; (8005e70 <_strtod_l+0x290>)
 8005c38:	ab17      	add	r3, sp, #92	; 0x5c
 8005c3a:	a915      	add	r1, sp, #84	; 0x54
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f001 fdbd 	bl	80077bc <__gethex>
 8005c42:	f010 070f 	ands.w	r7, r0, #15
 8005c46:	4605      	mov	r5, r0
 8005c48:	d005      	beq.n	8005c56 <_strtod_l+0x76>
 8005c4a:	2f06      	cmp	r7, #6
 8005c4c:	d12a      	bne.n	8005ca4 <_strtod_l+0xc4>
 8005c4e:	3601      	adds	r6, #1
 8005c50:	2300      	movs	r3, #0
 8005c52:	9615      	str	r6, [sp, #84]	; 0x54
 8005c54:	930a      	str	r3, [sp, #40]	; 0x28
 8005c56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 857f 	bne.w	800675c <_strtod_l+0xb7c>
 8005c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c60:	b1db      	cbz	r3, 8005c9a <_strtod_l+0xba>
 8005c62:	4642      	mov	r2, r8
 8005c64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c68:	ec43 2b10 	vmov	d0, r2, r3
 8005c6c:	b01b      	add	sp, #108	; 0x6c
 8005c6e:	ecbd 8b02 	vpop	{d8}
 8005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	2920      	cmp	r1, #32
 8005c78:	d1cc      	bne.n	8005c14 <_strtod_l+0x34>
 8005c7a:	3201      	adds	r2, #1
 8005c7c:	e7bf      	b.n	8005bfe <_strtod_l+0x1e>
 8005c7e:	292d      	cmp	r1, #45	; 0x2d
 8005c80:	d1c8      	bne.n	8005c14 <_strtod_l+0x34>
 8005c82:	2101      	movs	r1, #1
 8005c84:	910a      	str	r1, [sp, #40]	; 0x28
 8005c86:	1c51      	adds	r1, r2, #1
 8005c88:	9115      	str	r1, [sp, #84]	; 0x54
 8005c8a:	7852      	ldrb	r2, [r2, #1]
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d1c3      	bne.n	8005c18 <_strtod_l+0x38>
 8005c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c92:	9515      	str	r5, [sp, #84]	; 0x54
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 855f 	bne.w	8006758 <_strtod_l+0xb78>
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	e7e3      	b.n	8005c68 <_strtod_l+0x88>
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	e7ef      	b.n	8005c84 <_strtod_l+0xa4>
 8005ca4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ca6:	b13a      	cbz	r2, 8005cb8 <_strtod_l+0xd8>
 8005ca8:	2135      	movs	r1, #53	; 0x35
 8005caa:	a818      	add	r0, sp, #96	; 0x60
 8005cac:	f002 ffab 	bl	8008c06 <__copybits>
 8005cb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f002 fb7e 	bl	80083b4 <_Bfree>
 8005cb8:	3f01      	subs	r7, #1
 8005cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005cbc:	2f04      	cmp	r7, #4
 8005cbe:	d806      	bhi.n	8005cce <_strtod_l+0xee>
 8005cc0:	e8df f007 	tbb	[pc, r7]
 8005cc4:	201d0314 	.word	0x201d0314
 8005cc8:	14          	.byte	0x14
 8005cc9:	00          	.byte	0x00
 8005cca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005cce:	05e9      	lsls	r1, r5, #23
 8005cd0:	bf48      	it	mi
 8005cd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005cd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cda:	0d1b      	lsrs	r3, r3, #20
 8005cdc:	051b      	lsls	r3, r3, #20
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1b9      	bne.n	8005c56 <_strtod_l+0x76>
 8005ce2:	f000 fe25 	bl	8006930 <__errno>
 8005ce6:	2322      	movs	r3, #34	; 0x22
 8005ce8:	6003      	str	r3, [r0, #0]
 8005cea:	e7b4      	b.n	8005c56 <_strtod_l+0x76>
 8005cec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005cf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005cf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cf8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005cfc:	e7e7      	b.n	8005cce <_strtod_l+0xee>
 8005cfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005e78 <_strtod_l+0x298>
 8005d02:	e7e4      	b.n	8005cce <_strtod_l+0xee>
 8005d04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005d08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005d0c:	e7df      	b.n	8005cce <_strtod_l+0xee>
 8005d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	9215      	str	r2, [sp, #84]	; 0x54
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b30      	cmp	r3, #48	; 0x30
 8005d18:	d0f9      	beq.n	8005d0e <_strtod_l+0x12e>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d09b      	beq.n	8005c56 <_strtod_l+0x76>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f04f 0a00 	mov.w	sl, #0
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005d2e:	46d3      	mov	fp, sl
 8005d30:	220a      	movs	r2, #10
 8005d32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005d34:	7806      	ldrb	r6, [r0, #0]
 8005d36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005d3a:	b2d9      	uxtb	r1, r3
 8005d3c:	2909      	cmp	r1, #9
 8005d3e:	d926      	bls.n	8005d8e <_strtod_l+0x1ae>
 8005d40:	494c      	ldr	r1, [pc, #304]	; (8005e74 <_strtod_l+0x294>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	f000 fd66 	bl	8006814 <strncmp>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d030      	beq.n	8005dae <_strtod_l+0x1ce>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	4632      	mov	r2, r6
 8005d50:	9005      	str	r0, [sp, #20]
 8005d52:	465e      	mov	r6, fp
 8005d54:	4603      	mov	r3, r0
 8005d56:	2a65      	cmp	r2, #101	; 0x65
 8005d58:	d001      	beq.n	8005d5e <_strtod_l+0x17e>
 8005d5a:	2a45      	cmp	r2, #69	; 0x45
 8005d5c:	d113      	bne.n	8005d86 <_strtod_l+0x1a6>
 8005d5e:	b91e      	cbnz	r6, 8005d68 <_strtod_l+0x188>
 8005d60:	9a04      	ldr	r2, [sp, #16]
 8005d62:	4302      	orrs	r2, r0
 8005d64:	d094      	beq.n	8005c90 <_strtod_l+0xb0>
 8005d66:	2600      	movs	r6, #0
 8005d68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005d6a:	1c6a      	adds	r2, r5, #1
 8005d6c:	9215      	str	r2, [sp, #84]	; 0x54
 8005d6e:	786a      	ldrb	r2, [r5, #1]
 8005d70:	2a2b      	cmp	r2, #43	; 0x2b
 8005d72:	d074      	beq.n	8005e5e <_strtod_l+0x27e>
 8005d74:	2a2d      	cmp	r2, #45	; 0x2d
 8005d76:	d078      	beq.n	8005e6a <_strtod_l+0x28a>
 8005d78:	f04f 0c00 	mov.w	ip, #0
 8005d7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005d80:	2909      	cmp	r1, #9
 8005d82:	d97f      	bls.n	8005e84 <_strtod_l+0x2a4>
 8005d84:	9515      	str	r5, [sp, #84]	; 0x54
 8005d86:	2700      	movs	r7, #0
 8005d88:	e09e      	b.n	8005ec8 <_strtod_l+0x2e8>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e7c8      	b.n	8005d20 <_strtod_l+0x140>
 8005d8e:	f1bb 0f08 	cmp.w	fp, #8
 8005d92:	bfd8      	it	le
 8005d94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005d96:	f100 0001 	add.w	r0, r0, #1
 8005d9a:	bfda      	itte	le
 8005d9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005da0:	9309      	strle	r3, [sp, #36]	; 0x24
 8005da2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005da6:	f10b 0b01 	add.w	fp, fp, #1
 8005daa:	9015      	str	r0, [sp, #84]	; 0x54
 8005dac:	e7c1      	b.n	8005d32 <_strtod_l+0x152>
 8005dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	9215      	str	r2, [sp, #84]	; 0x54
 8005db4:	785a      	ldrb	r2, [r3, #1]
 8005db6:	f1bb 0f00 	cmp.w	fp, #0
 8005dba:	d037      	beq.n	8005e2c <_strtod_l+0x24c>
 8005dbc:	9005      	str	r0, [sp, #20]
 8005dbe:	465e      	mov	r6, fp
 8005dc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d912      	bls.n	8005dee <_strtod_l+0x20e>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e7c4      	b.n	8005d56 <_strtod_l+0x176>
 8005dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	9215      	str	r2, [sp, #84]	; 0x54
 8005dd2:	785a      	ldrb	r2, [r3, #1]
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	2a30      	cmp	r2, #48	; 0x30
 8005dd8:	d0f8      	beq.n	8005dcc <_strtod_l+0x1ec>
 8005dda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	f200 84c1 	bhi.w	8006766 <_strtod_l+0xb86>
 8005de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de6:	9005      	str	r0, [sp, #20]
 8005de8:	2000      	movs	r0, #0
 8005dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dec:	4606      	mov	r6, r0
 8005dee:	3a30      	subs	r2, #48	; 0x30
 8005df0:	f100 0301 	add.w	r3, r0, #1
 8005df4:	d014      	beq.n	8005e20 <_strtod_l+0x240>
 8005df6:	9905      	ldr	r1, [sp, #20]
 8005df8:	4419      	add	r1, r3
 8005dfa:	9105      	str	r1, [sp, #20]
 8005dfc:	4633      	mov	r3, r6
 8005dfe:	eb00 0c06 	add.w	ip, r0, r6
 8005e02:	210a      	movs	r1, #10
 8005e04:	4563      	cmp	r3, ip
 8005e06:	d113      	bne.n	8005e30 <_strtod_l+0x250>
 8005e08:	1833      	adds	r3, r6, r0
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	f106 0601 	add.w	r6, r6, #1
 8005e10:	4406      	add	r6, r0
 8005e12:	dc1a      	bgt.n	8005e4a <_strtod_l+0x26a>
 8005e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e16:	230a      	movs	r3, #10
 8005e18:	fb03 2301 	mla	r3, r3, r1, r2
 8005e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1e:	2300      	movs	r3, #0
 8005e20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e22:	1c51      	adds	r1, r2, #1
 8005e24:	9115      	str	r1, [sp, #84]	; 0x54
 8005e26:	7852      	ldrb	r2, [r2, #1]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	e7c9      	b.n	8005dc0 <_strtod_l+0x1e0>
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	e7d2      	b.n	8005dd6 <_strtod_l+0x1f6>
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	f103 0301 	add.w	r3, r3, #1
 8005e36:	dc03      	bgt.n	8005e40 <_strtod_l+0x260>
 8005e38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e3a:	434f      	muls	r7, r1
 8005e3c:	9709      	str	r7, [sp, #36]	; 0x24
 8005e3e:	e7e1      	b.n	8005e04 <_strtod_l+0x224>
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	bfd8      	it	le
 8005e44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005e48:	e7dc      	b.n	8005e04 <_strtod_l+0x224>
 8005e4a:	2e10      	cmp	r6, #16
 8005e4c:	bfdc      	itt	le
 8005e4e:	230a      	movle	r3, #10
 8005e50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005e54:	e7e3      	b.n	8005e1e <_strtod_l+0x23e>
 8005e56:	2300      	movs	r3, #0
 8005e58:	9305      	str	r3, [sp, #20]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e780      	b.n	8005d60 <_strtod_l+0x180>
 8005e5e:	f04f 0c00 	mov.w	ip, #0
 8005e62:	1caa      	adds	r2, r5, #2
 8005e64:	9215      	str	r2, [sp, #84]	; 0x54
 8005e66:	78aa      	ldrb	r2, [r5, #2]
 8005e68:	e788      	b.n	8005d7c <_strtod_l+0x19c>
 8005e6a:	f04f 0c01 	mov.w	ip, #1
 8005e6e:	e7f8      	b.n	8005e62 <_strtod_l+0x282>
 8005e70:	0800a2d4 	.word	0x0800a2d4
 8005e74:	0800a2d0 	.word	0x0800a2d0
 8005e78:	7ff00000 	.word	0x7ff00000
 8005e7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e7e:	1c51      	adds	r1, r2, #1
 8005e80:	9115      	str	r1, [sp, #84]	; 0x54
 8005e82:	7852      	ldrb	r2, [r2, #1]
 8005e84:	2a30      	cmp	r2, #48	; 0x30
 8005e86:	d0f9      	beq.n	8005e7c <_strtod_l+0x29c>
 8005e88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005e8c:	2908      	cmp	r1, #8
 8005e8e:	f63f af7a 	bhi.w	8005d86 <_strtod_l+0x1a6>
 8005e92:	3a30      	subs	r2, #48	; 0x30
 8005e94:	9208      	str	r2, [sp, #32]
 8005e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e98:	920c      	str	r2, [sp, #48]	; 0x30
 8005e9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e9c:	1c57      	adds	r7, r2, #1
 8005e9e:	9715      	str	r7, [sp, #84]	; 0x54
 8005ea0:	7852      	ldrb	r2, [r2, #1]
 8005ea2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005ea6:	f1be 0f09 	cmp.w	lr, #9
 8005eaa:	d938      	bls.n	8005f1e <_strtod_l+0x33e>
 8005eac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eae:	1a7f      	subs	r7, r7, r1
 8005eb0:	2f08      	cmp	r7, #8
 8005eb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005eb6:	dc03      	bgt.n	8005ec0 <_strtod_l+0x2e0>
 8005eb8:	9908      	ldr	r1, [sp, #32]
 8005eba:	428f      	cmp	r7, r1
 8005ebc:	bfa8      	it	ge
 8005ebe:	460f      	movge	r7, r1
 8005ec0:	f1bc 0f00 	cmp.w	ip, #0
 8005ec4:	d000      	beq.n	8005ec8 <_strtod_l+0x2e8>
 8005ec6:	427f      	negs	r7, r7
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d14f      	bne.n	8005f6c <_strtod_l+0x38c>
 8005ecc:	9904      	ldr	r1, [sp, #16]
 8005ece:	4301      	orrs	r1, r0
 8005ed0:	f47f aec1 	bne.w	8005c56 <_strtod_l+0x76>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f aedb 	bne.w	8005c90 <_strtod_l+0xb0>
 8005eda:	2a69      	cmp	r2, #105	; 0x69
 8005edc:	d029      	beq.n	8005f32 <_strtod_l+0x352>
 8005ede:	dc26      	bgt.n	8005f2e <_strtod_l+0x34e>
 8005ee0:	2a49      	cmp	r2, #73	; 0x49
 8005ee2:	d026      	beq.n	8005f32 <_strtod_l+0x352>
 8005ee4:	2a4e      	cmp	r2, #78	; 0x4e
 8005ee6:	f47f aed3 	bne.w	8005c90 <_strtod_l+0xb0>
 8005eea:	499b      	ldr	r1, [pc, #620]	; (8006158 <_strtod_l+0x578>)
 8005eec:	a815      	add	r0, sp, #84	; 0x54
 8005eee:	f001 fea5 	bl	8007c3c <__match>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	f43f aecc 	beq.w	8005c90 <_strtod_l+0xb0>
 8005ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b28      	cmp	r3, #40	; 0x28
 8005efe:	d12f      	bne.n	8005f60 <_strtod_l+0x380>
 8005f00:	4996      	ldr	r1, [pc, #600]	; (800615c <_strtod_l+0x57c>)
 8005f02:	aa18      	add	r2, sp, #96	; 0x60
 8005f04:	a815      	add	r0, sp, #84	; 0x54
 8005f06:	f001 fead 	bl	8007c64 <__hexnan>
 8005f0a:	2805      	cmp	r0, #5
 8005f0c:	d128      	bne.n	8005f60 <_strtod_l+0x380>
 8005f0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005f18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005f1c:	e69b      	b.n	8005c56 <_strtod_l+0x76>
 8005f1e:	9f08      	ldr	r7, [sp, #32]
 8005f20:	210a      	movs	r1, #10
 8005f22:	fb01 2107 	mla	r1, r1, r7, r2
 8005f26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005f2a:	9208      	str	r2, [sp, #32]
 8005f2c:	e7b5      	b.n	8005e9a <_strtod_l+0x2ba>
 8005f2e:	2a6e      	cmp	r2, #110	; 0x6e
 8005f30:	e7d9      	b.n	8005ee6 <_strtod_l+0x306>
 8005f32:	498b      	ldr	r1, [pc, #556]	; (8006160 <_strtod_l+0x580>)
 8005f34:	a815      	add	r0, sp, #84	; 0x54
 8005f36:	f001 fe81 	bl	8007c3c <__match>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f aea8 	beq.w	8005c90 <_strtod_l+0xb0>
 8005f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f42:	4988      	ldr	r1, [pc, #544]	; (8006164 <_strtod_l+0x584>)
 8005f44:	3b01      	subs	r3, #1
 8005f46:	a815      	add	r0, sp, #84	; 0x54
 8005f48:	9315      	str	r3, [sp, #84]	; 0x54
 8005f4a:	f001 fe77 	bl	8007c3c <__match>
 8005f4e:	b910      	cbnz	r0, 8005f56 <_strtod_l+0x376>
 8005f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f52:	3301      	adds	r3, #1
 8005f54:	9315      	str	r3, [sp, #84]	; 0x54
 8005f56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006174 <_strtod_l+0x594>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	e67a      	b.n	8005c56 <_strtod_l+0x76>
 8005f60:	4881      	ldr	r0, [pc, #516]	; (8006168 <_strtod_l+0x588>)
 8005f62:	f000 fd21 	bl	80069a8 <nan>
 8005f66:	ec59 8b10 	vmov	r8, r9, d0
 8005f6a:	e674      	b.n	8005c56 <_strtod_l+0x76>
 8005f6c:	9b05      	ldr	r3, [sp, #20]
 8005f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f70:	1afb      	subs	r3, r7, r3
 8005f72:	f1bb 0f00 	cmp.w	fp, #0
 8005f76:	bf08      	it	eq
 8005f78:	46b3      	moveq	fp, r6
 8005f7a:	2e10      	cmp	r6, #16
 8005f7c:	9308      	str	r3, [sp, #32]
 8005f7e:	4635      	mov	r5, r6
 8005f80:	bfa8      	it	ge
 8005f82:	2510      	movge	r5, #16
 8005f84:	f7fa fac8 	bl	8000518 <__aeabi_ui2d>
 8005f88:	2e09      	cmp	r6, #9
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	dd13      	ble.n	8005fb8 <_strtod_l+0x3d8>
 8005f90:	4b76      	ldr	r3, [pc, #472]	; (800616c <_strtod_l+0x58c>)
 8005f92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f9a:	f7fa fb37 	bl	800060c <__aeabi_dmul>
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	4650      	mov	r0, sl
 8005fa2:	4689      	mov	r9, r1
 8005fa4:	f7fa fab8 	bl	8000518 <__aeabi_ui2d>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4640      	mov	r0, r8
 8005fae:	4649      	mov	r1, r9
 8005fb0:	f7fa f976 	bl	80002a0 <__adddf3>
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	2e0f      	cmp	r6, #15
 8005fba:	dc38      	bgt.n	800602e <_strtod_l+0x44e>
 8005fbc:	9b08      	ldr	r3, [sp, #32]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f43f ae49 	beq.w	8005c56 <_strtod_l+0x76>
 8005fc4:	dd24      	ble.n	8006010 <_strtod_l+0x430>
 8005fc6:	2b16      	cmp	r3, #22
 8005fc8:	dc0b      	bgt.n	8005fe2 <_strtod_l+0x402>
 8005fca:	4968      	ldr	r1, [pc, #416]	; (800616c <_strtod_l+0x58c>)
 8005fcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	f7fa fb18 	bl	800060c <__aeabi_dmul>
 8005fdc:	4680      	mov	r8, r0
 8005fde:	4689      	mov	r9, r1
 8005fe0:	e639      	b.n	8005c56 <_strtod_l+0x76>
 8005fe2:	9a08      	ldr	r2, [sp, #32]
 8005fe4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	db20      	blt.n	800602e <_strtod_l+0x44e>
 8005fec:	4c5f      	ldr	r4, [pc, #380]	; (800616c <_strtod_l+0x58c>)
 8005fee:	f1c6 060f 	rsb	r6, r6, #15
 8005ff2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ffe:	f7fa fb05 	bl	800060c <__aeabi_dmul>
 8006002:	9b08      	ldr	r3, [sp, #32]
 8006004:	1b9e      	subs	r6, r3, r6
 8006006:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800600a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800600e:	e7e3      	b.n	8005fd8 <_strtod_l+0x3f8>
 8006010:	9b08      	ldr	r3, [sp, #32]
 8006012:	3316      	adds	r3, #22
 8006014:	db0b      	blt.n	800602e <_strtod_l+0x44e>
 8006016:	9b05      	ldr	r3, [sp, #20]
 8006018:	1bdf      	subs	r7, r3, r7
 800601a:	4b54      	ldr	r3, [pc, #336]	; (800616c <_strtod_l+0x58c>)
 800601c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7fa fc1a 	bl	8000860 <__aeabi_ddiv>
 800602c:	e7d6      	b.n	8005fdc <_strtod_l+0x3fc>
 800602e:	9b08      	ldr	r3, [sp, #32]
 8006030:	1b75      	subs	r5, r6, r5
 8006032:	441d      	add	r5, r3
 8006034:	2d00      	cmp	r5, #0
 8006036:	dd70      	ble.n	800611a <_strtod_l+0x53a>
 8006038:	f015 030f 	ands.w	r3, r5, #15
 800603c:	d00a      	beq.n	8006054 <_strtod_l+0x474>
 800603e:	494b      	ldr	r1, [pc, #300]	; (800616c <_strtod_l+0x58c>)
 8006040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006044:	4642      	mov	r2, r8
 8006046:	464b      	mov	r3, r9
 8006048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800604c:	f7fa fade 	bl	800060c <__aeabi_dmul>
 8006050:	4680      	mov	r8, r0
 8006052:	4689      	mov	r9, r1
 8006054:	f035 050f 	bics.w	r5, r5, #15
 8006058:	d04d      	beq.n	80060f6 <_strtod_l+0x516>
 800605a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800605e:	dd22      	ble.n	80060a6 <_strtod_l+0x4c6>
 8006060:	2500      	movs	r5, #0
 8006062:	46ab      	mov	fp, r5
 8006064:	9509      	str	r5, [sp, #36]	; 0x24
 8006066:	9505      	str	r5, [sp, #20]
 8006068:	2322      	movs	r3, #34	; 0x22
 800606a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006174 <_strtod_l+0x594>
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	f04f 0800 	mov.w	r8, #0
 8006074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	f43f aded 	beq.w	8005c56 <_strtod_l+0x76>
 800607c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800607e:	4620      	mov	r0, r4
 8006080:	f002 f998 	bl	80083b4 <_Bfree>
 8006084:	9905      	ldr	r1, [sp, #20]
 8006086:	4620      	mov	r0, r4
 8006088:	f002 f994 	bl	80083b4 <_Bfree>
 800608c:	4659      	mov	r1, fp
 800608e:	4620      	mov	r0, r4
 8006090:	f002 f990 	bl	80083b4 <_Bfree>
 8006094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006096:	4620      	mov	r0, r4
 8006098:	f002 f98c 	bl	80083b4 <_Bfree>
 800609c:	4629      	mov	r1, r5
 800609e:	4620      	mov	r0, r4
 80060a0:	f002 f988 	bl	80083b4 <_Bfree>
 80060a4:	e5d7      	b.n	8005c56 <_strtod_l+0x76>
 80060a6:	4b32      	ldr	r3, [pc, #200]	; (8006170 <_strtod_l+0x590>)
 80060a8:	9304      	str	r3, [sp, #16]
 80060aa:	2300      	movs	r3, #0
 80060ac:	112d      	asrs	r5, r5, #4
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	469a      	mov	sl, r3
 80060b4:	2d01      	cmp	r5, #1
 80060b6:	dc21      	bgt.n	80060fc <_strtod_l+0x51c>
 80060b8:	b10b      	cbz	r3, 80060be <_strtod_l+0x4de>
 80060ba:	4680      	mov	r8, r0
 80060bc:	4689      	mov	r9, r1
 80060be:	492c      	ldr	r1, [pc, #176]	; (8006170 <_strtod_l+0x590>)
 80060c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80060c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d0:	f7fa fa9c 	bl	800060c <__aeabi_dmul>
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <_strtod_l+0x594>)
 80060d6:	460a      	mov	r2, r1
 80060d8:	400b      	ands	r3, r1
 80060da:	4927      	ldr	r1, [pc, #156]	; (8006178 <_strtod_l+0x598>)
 80060dc:	428b      	cmp	r3, r1
 80060de:	4680      	mov	r8, r0
 80060e0:	d8be      	bhi.n	8006060 <_strtod_l+0x480>
 80060e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80060e6:	428b      	cmp	r3, r1
 80060e8:	bf86      	itte	hi
 80060ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800617c <_strtod_l+0x59c>
 80060ee:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80060f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80060f6:	2300      	movs	r3, #0
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	e07b      	b.n	80061f4 <_strtod_l+0x614>
 80060fc:	07ea      	lsls	r2, r5, #31
 80060fe:	d505      	bpl.n	800610c <_strtod_l+0x52c>
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa81 	bl	800060c <__aeabi_dmul>
 800610a:	2301      	movs	r3, #1
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	3208      	adds	r2, #8
 8006110:	f10a 0a01 	add.w	sl, sl, #1
 8006114:	106d      	asrs	r5, r5, #1
 8006116:	9204      	str	r2, [sp, #16]
 8006118:	e7cc      	b.n	80060b4 <_strtod_l+0x4d4>
 800611a:	d0ec      	beq.n	80060f6 <_strtod_l+0x516>
 800611c:	426d      	negs	r5, r5
 800611e:	f015 020f 	ands.w	r2, r5, #15
 8006122:	d00a      	beq.n	800613a <_strtod_l+0x55a>
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <_strtod_l+0x58c>)
 8006126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f7fa fb95 	bl	8000860 <__aeabi_ddiv>
 8006136:	4680      	mov	r8, r0
 8006138:	4689      	mov	r9, r1
 800613a:	112d      	asrs	r5, r5, #4
 800613c:	d0db      	beq.n	80060f6 <_strtod_l+0x516>
 800613e:	2d1f      	cmp	r5, #31
 8006140:	dd1e      	ble.n	8006180 <_strtod_l+0x5a0>
 8006142:	2500      	movs	r5, #0
 8006144:	46ab      	mov	fp, r5
 8006146:	9509      	str	r5, [sp, #36]	; 0x24
 8006148:	9505      	str	r5, [sp, #20]
 800614a:	2322      	movs	r3, #34	; 0x22
 800614c:	f04f 0800 	mov.w	r8, #0
 8006150:	f04f 0900 	mov.w	r9, #0
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	e78d      	b.n	8006074 <_strtod_l+0x494>
 8006158:	0800a2a9 	.word	0x0800a2a9
 800615c:	0800a2e8 	.word	0x0800a2e8
 8006160:	0800a2a1 	.word	0x0800a2a1
 8006164:	0800a4e1 	.word	0x0800a4e1
 8006168:	0800a4dd 	.word	0x0800a4dd
 800616c:	0800a648 	.word	0x0800a648
 8006170:	0800a620 	.word	0x0800a620
 8006174:	7ff00000 	.word	0x7ff00000
 8006178:	7ca00000 	.word	0x7ca00000
 800617c:	7fefffff 	.word	0x7fefffff
 8006180:	f015 0310 	ands.w	r3, r5, #16
 8006184:	bf18      	it	ne
 8006186:	236a      	movne	r3, #106	; 0x6a
 8006188:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800652c <_strtod_l+0x94c>
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	4640      	mov	r0, r8
 8006190:	4649      	mov	r1, r9
 8006192:	2300      	movs	r3, #0
 8006194:	07ea      	lsls	r2, r5, #31
 8006196:	d504      	bpl.n	80061a2 <_strtod_l+0x5c2>
 8006198:	e9da 2300 	ldrd	r2, r3, [sl]
 800619c:	f7fa fa36 	bl	800060c <__aeabi_dmul>
 80061a0:	2301      	movs	r3, #1
 80061a2:	106d      	asrs	r5, r5, #1
 80061a4:	f10a 0a08 	add.w	sl, sl, #8
 80061a8:	d1f4      	bne.n	8006194 <_strtod_l+0x5b4>
 80061aa:	b10b      	cbz	r3, 80061b0 <_strtod_l+0x5d0>
 80061ac:	4680      	mov	r8, r0
 80061ae:	4689      	mov	r9, r1
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	b1bb      	cbz	r3, 80061e4 <_strtod_l+0x604>
 80061b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80061b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061bc:	2b00      	cmp	r3, #0
 80061be:	4649      	mov	r1, r9
 80061c0:	dd10      	ble.n	80061e4 <_strtod_l+0x604>
 80061c2:	2b1f      	cmp	r3, #31
 80061c4:	f340 811e 	ble.w	8006404 <_strtod_l+0x824>
 80061c8:	2b34      	cmp	r3, #52	; 0x34
 80061ca:	bfde      	ittt	le
 80061cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80061d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80061d4:	4093      	lslle	r3, r2
 80061d6:	f04f 0800 	mov.w	r8, #0
 80061da:	bfcc      	ite	gt
 80061dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80061e0:	ea03 0901 	andle.w	r9, r3, r1
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	f7fa fc76 	bl	8000adc <__aeabi_dcmpeq>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d1a6      	bne.n	8006142 <_strtod_l+0x562>
 80061f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061fa:	4633      	mov	r3, r6
 80061fc:	465a      	mov	r2, fp
 80061fe:	4620      	mov	r0, r4
 8006200:	f002 f940 	bl	8008484 <__s2b>
 8006204:	9009      	str	r0, [sp, #36]	; 0x24
 8006206:	2800      	cmp	r0, #0
 8006208:	f43f af2a 	beq.w	8006060 <_strtod_l+0x480>
 800620c:	9a08      	ldr	r2, [sp, #32]
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	2a00      	cmp	r2, #0
 8006212:	eba3 0307 	sub.w	r3, r3, r7
 8006216:	bfa8      	it	ge
 8006218:	2300      	movge	r3, #0
 800621a:	930c      	str	r3, [sp, #48]	; 0x30
 800621c:	2500      	movs	r5, #0
 800621e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006222:	9312      	str	r3, [sp, #72]	; 0x48
 8006224:	46ab      	mov	fp, r5
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	4620      	mov	r0, r4
 800622a:	6859      	ldr	r1, [r3, #4]
 800622c:	f002 f882 	bl	8008334 <_Balloc>
 8006230:	9005      	str	r0, [sp, #20]
 8006232:	2800      	cmp	r0, #0
 8006234:	f43f af18 	beq.w	8006068 <_strtod_l+0x488>
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	3202      	adds	r2, #2
 800623e:	f103 010c 	add.w	r1, r3, #12
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	300c      	adds	r0, #12
 8006246:	f000 fb9f 	bl	8006988 <memcpy>
 800624a:	ec49 8b10 	vmov	d0, r8, r9
 800624e:	aa18      	add	r2, sp, #96	; 0x60
 8006250:	a917      	add	r1, sp, #92	; 0x5c
 8006252:	4620      	mov	r0, r4
 8006254:	f002 fc4a 	bl	8008aec <__d2b>
 8006258:	ec49 8b18 	vmov	d8, r8, r9
 800625c:	9016      	str	r0, [sp, #88]	; 0x58
 800625e:	2800      	cmp	r0, #0
 8006260:	f43f af02 	beq.w	8006068 <_strtod_l+0x488>
 8006264:	2101      	movs	r1, #1
 8006266:	4620      	mov	r0, r4
 8006268:	f002 f9a4 	bl	80085b4 <__i2b>
 800626c:	4683      	mov	fp, r0
 800626e:	2800      	cmp	r0, #0
 8006270:	f43f aefa 	beq.w	8006068 <_strtod_l+0x488>
 8006274:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006276:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006278:	2e00      	cmp	r6, #0
 800627a:	bfab      	itete	ge
 800627c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800627e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006282:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006286:	bfac      	ite	ge
 8006288:	eb06 0a03 	addge.w	sl, r6, r3
 800628c:	1b9f      	sublt	r7, r3, r6
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	1af6      	subs	r6, r6, r3
 8006292:	4416      	add	r6, r2
 8006294:	4ba0      	ldr	r3, [pc, #640]	; (8006518 <_strtod_l+0x938>)
 8006296:	3e01      	subs	r6, #1
 8006298:	429e      	cmp	r6, r3
 800629a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800629e:	f280 80c4 	bge.w	800642a <_strtod_l+0x84a>
 80062a2:	1b9b      	subs	r3, r3, r6
 80062a4:	2b1f      	cmp	r3, #31
 80062a6:	eba2 0203 	sub.w	r2, r2, r3
 80062aa:	f04f 0101 	mov.w	r1, #1
 80062ae:	f300 80b0 	bgt.w	8006412 <_strtod_l+0x832>
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	930e      	str	r3, [sp, #56]	; 0x38
 80062b8:	2300      	movs	r3, #0
 80062ba:	930d      	str	r3, [sp, #52]	; 0x34
 80062bc:	eb0a 0602 	add.w	r6, sl, r2
 80062c0:	9b04      	ldr	r3, [sp, #16]
 80062c2:	45b2      	cmp	sl, r6
 80062c4:	4417      	add	r7, r2
 80062c6:	441f      	add	r7, r3
 80062c8:	4653      	mov	r3, sl
 80062ca:	bfa8      	it	ge
 80062cc:	4633      	movge	r3, r6
 80062ce:	42bb      	cmp	r3, r7
 80062d0:	bfa8      	it	ge
 80062d2:	463b      	movge	r3, r7
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bfc2      	ittt	gt
 80062d8:	1af6      	subgt	r6, r6, r3
 80062da:	1aff      	subgt	r7, r7, r3
 80062dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80062e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dd17      	ble.n	8006316 <_strtod_l+0x736>
 80062e6:	4659      	mov	r1, fp
 80062e8:	461a      	mov	r2, r3
 80062ea:	4620      	mov	r0, r4
 80062ec:	f002 fa22 	bl	8008734 <__pow5mult>
 80062f0:	4683      	mov	fp, r0
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f43f aeb8 	beq.w	8006068 <_strtod_l+0x488>
 80062f8:	4601      	mov	r1, r0
 80062fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80062fc:	4620      	mov	r0, r4
 80062fe:	f002 f96f 	bl	80085e0 <__multiply>
 8006302:	900b      	str	r0, [sp, #44]	; 0x2c
 8006304:	2800      	cmp	r0, #0
 8006306:	f43f aeaf 	beq.w	8006068 <_strtod_l+0x488>
 800630a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800630c:	4620      	mov	r0, r4
 800630e:	f002 f851 	bl	80083b4 <_Bfree>
 8006312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006314:	9316      	str	r3, [sp, #88]	; 0x58
 8006316:	2e00      	cmp	r6, #0
 8006318:	f300 808c 	bgt.w	8006434 <_strtod_l+0x854>
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	2b00      	cmp	r3, #0
 8006320:	dd08      	ble.n	8006334 <_strtod_l+0x754>
 8006322:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006324:	9905      	ldr	r1, [sp, #20]
 8006326:	4620      	mov	r0, r4
 8006328:	f002 fa04 	bl	8008734 <__pow5mult>
 800632c:	9005      	str	r0, [sp, #20]
 800632e:	2800      	cmp	r0, #0
 8006330:	f43f ae9a 	beq.w	8006068 <_strtod_l+0x488>
 8006334:	2f00      	cmp	r7, #0
 8006336:	dd08      	ble.n	800634a <_strtod_l+0x76a>
 8006338:	9905      	ldr	r1, [sp, #20]
 800633a:	463a      	mov	r2, r7
 800633c:	4620      	mov	r0, r4
 800633e:	f002 fa53 	bl	80087e8 <__lshift>
 8006342:	9005      	str	r0, [sp, #20]
 8006344:	2800      	cmp	r0, #0
 8006346:	f43f ae8f 	beq.w	8006068 <_strtod_l+0x488>
 800634a:	f1ba 0f00 	cmp.w	sl, #0
 800634e:	dd08      	ble.n	8006362 <_strtod_l+0x782>
 8006350:	4659      	mov	r1, fp
 8006352:	4652      	mov	r2, sl
 8006354:	4620      	mov	r0, r4
 8006356:	f002 fa47 	bl	80087e8 <__lshift>
 800635a:	4683      	mov	fp, r0
 800635c:	2800      	cmp	r0, #0
 800635e:	f43f ae83 	beq.w	8006068 <_strtod_l+0x488>
 8006362:	9a05      	ldr	r2, [sp, #20]
 8006364:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006366:	4620      	mov	r0, r4
 8006368:	f002 fac6 	bl	80088f8 <__mdiff>
 800636c:	4605      	mov	r5, r0
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f ae7a 	beq.w	8006068 <_strtod_l+0x488>
 8006374:	68c3      	ldr	r3, [r0, #12]
 8006376:	930b      	str	r3, [sp, #44]	; 0x2c
 8006378:	2300      	movs	r3, #0
 800637a:	60c3      	str	r3, [r0, #12]
 800637c:	4659      	mov	r1, fp
 800637e:	f002 fa9f 	bl	80088c0 <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	da60      	bge.n	8006448 <_strtod_l+0x868>
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	ea53 0308 	orrs.w	r3, r3, r8
 800638c:	f040 8084 	bne.w	8006498 <_strtod_l+0x8b8>
 8006390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006394:	2b00      	cmp	r3, #0
 8006396:	d17f      	bne.n	8006498 <_strtod_l+0x8b8>
 8006398:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800639c:	0d1b      	lsrs	r3, r3, #20
 800639e:	051b      	lsls	r3, r3, #20
 80063a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80063a4:	d978      	bls.n	8006498 <_strtod_l+0x8b8>
 80063a6:	696b      	ldr	r3, [r5, #20]
 80063a8:	b913      	cbnz	r3, 80063b0 <_strtod_l+0x7d0>
 80063aa:	692b      	ldr	r3, [r5, #16]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	dd73      	ble.n	8006498 <_strtod_l+0x8b8>
 80063b0:	4629      	mov	r1, r5
 80063b2:	2201      	movs	r2, #1
 80063b4:	4620      	mov	r0, r4
 80063b6:	f002 fa17 	bl	80087e8 <__lshift>
 80063ba:	4659      	mov	r1, fp
 80063bc:	4605      	mov	r5, r0
 80063be:	f002 fa7f 	bl	80088c0 <__mcmp>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	dd68      	ble.n	8006498 <_strtod_l+0x8b8>
 80063c6:	9904      	ldr	r1, [sp, #16]
 80063c8:	4a54      	ldr	r2, [pc, #336]	; (800651c <_strtod_l+0x93c>)
 80063ca:	464b      	mov	r3, r9
 80063cc:	2900      	cmp	r1, #0
 80063ce:	f000 8084 	beq.w	80064da <_strtod_l+0x8fa>
 80063d2:	ea02 0109 	and.w	r1, r2, r9
 80063d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80063da:	dc7e      	bgt.n	80064da <_strtod_l+0x8fa>
 80063dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80063e0:	f77f aeb3 	ble.w	800614a <_strtod_l+0x56a>
 80063e4:	4b4e      	ldr	r3, [pc, #312]	; (8006520 <_strtod_l+0x940>)
 80063e6:	4640      	mov	r0, r8
 80063e8:	4649      	mov	r1, r9
 80063ea:	2200      	movs	r2, #0
 80063ec:	f7fa f90e 	bl	800060c <__aeabi_dmul>
 80063f0:	4b4a      	ldr	r3, [pc, #296]	; (800651c <_strtod_l+0x93c>)
 80063f2:	400b      	ands	r3, r1
 80063f4:	4680      	mov	r8, r0
 80063f6:	4689      	mov	r9, r1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f47f ae3f 	bne.w	800607c <_strtod_l+0x49c>
 80063fe:	2322      	movs	r3, #34	; 0x22
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	e63b      	b.n	800607c <_strtod_l+0x49c>
 8006404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	ea03 0808 	and.w	r8, r3, r8
 8006410:	e6e8      	b.n	80061e4 <_strtod_l+0x604>
 8006412:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006416:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800641a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800641e:	36e2      	adds	r6, #226	; 0xe2
 8006420:	fa01 f306 	lsl.w	r3, r1, r6
 8006424:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006428:	e748      	b.n	80062bc <_strtod_l+0x6dc>
 800642a:	2100      	movs	r1, #0
 800642c:	2301      	movs	r3, #1
 800642e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006432:	e743      	b.n	80062bc <_strtod_l+0x6dc>
 8006434:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006436:	4632      	mov	r2, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f002 f9d5 	bl	80087e8 <__lshift>
 800643e:	9016      	str	r0, [sp, #88]	; 0x58
 8006440:	2800      	cmp	r0, #0
 8006442:	f47f af6b 	bne.w	800631c <_strtod_l+0x73c>
 8006446:	e60f      	b.n	8006068 <_strtod_l+0x488>
 8006448:	46ca      	mov	sl, r9
 800644a:	d171      	bne.n	8006530 <_strtod_l+0x950>
 800644c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800644e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006452:	b352      	cbz	r2, 80064aa <_strtod_l+0x8ca>
 8006454:	4a33      	ldr	r2, [pc, #204]	; (8006524 <_strtod_l+0x944>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d12a      	bne.n	80064b0 <_strtod_l+0x8d0>
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	4641      	mov	r1, r8
 800645e:	b1fb      	cbz	r3, 80064a0 <_strtod_l+0x8c0>
 8006460:	4b2e      	ldr	r3, [pc, #184]	; (800651c <_strtod_l+0x93c>)
 8006462:	ea09 0303 	and.w	r3, r9, r3
 8006466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800646a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800646e:	d81a      	bhi.n	80064a6 <_strtod_l+0x8c6>
 8006470:	0d1b      	lsrs	r3, r3, #20
 8006472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	4299      	cmp	r1, r3
 800647c:	d118      	bne.n	80064b0 <_strtod_l+0x8d0>
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <_strtod_l+0x948>)
 8006480:	459a      	cmp	sl, r3
 8006482:	d102      	bne.n	800648a <_strtod_l+0x8aa>
 8006484:	3101      	adds	r1, #1
 8006486:	f43f adef 	beq.w	8006068 <_strtod_l+0x488>
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <_strtod_l+0x93c>)
 800648c:	ea0a 0303 	and.w	r3, sl, r3
 8006490:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006494:	f04f 0800 	mov.w	r8, #0
 8006498:	9b04      	ldr	r3, [sp, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1a2      	bne.n	80063e4 <_strtod_l+0x804>
 800649e:	e5ed      	b.n	800607c <_strtod_l+0x49c>
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064a4:	e7e9      	b.n	800647a <_strtod_l+0x89a>
 80064a6:	4613      	mov	r3, r2
 80064a8:	e7e7      	b.n	800647a <_strtod_l+0x89a>
 80064aa:	ea53 0308 	orrs.w	r3, r3, r8
 80064ae:	d08a      	beq.n	80063c6 <_strtod_l+0x7e6>
 80064b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b2:	b1e3      	cbz	r3, 80064ee <_strtod_l+0x90e>
 80064b4:	ea13 0f0a 	tst.w	r3, sl
 80064b8:	d0ee      	beq.n	8006498 <_strtod_l+0x8b8>
 80064ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	4640      	mov	r0, r8
 80064c0:	4649      	mov	r1, r9
 80064c2:	b1c3      	cbz	r3, 80064f6 <_strtod_l+0x916>
 80064c4:	f7ff fb6e 	bl	8005ba4 <sulp>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	ec51 0b18 	vmov	r0, r1, d8
 80064d0:	f7f9 fee6 	bl	80002a0 <__adddf3>
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	e7de      	b.n	8006498 <_strtod_l+0x8b8>
 80064da:	4013      	ands	r3, r2
 80064dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80064e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80064e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80064e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80064ec:	e7d4      	b.n	8006498 <_strtod_l+0x8b8>
 80064ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f0:	ea13 0f08 	tst.w	r3, r8
 80064f4:	e7e0      	b.n	80064b8 <_strtod_l+0x8d8>
 80064f6:	f7ff fb55 	bl	8005ba4 <sulp>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	ec51 0b18 	vmov	r0, r1, d8
 8006502:	f7f9 fecb 	bl	800029c <__aeabi_dsub>
 8006506:	2200      	movs	r2, #0
 8006508:	2300      	movs	r3, #0
 800650a:	4680      	mov	r8, r0
 800650c:	4689      	mov	r9, r1
 800650e:	f7fa fae5 	bl	8000adc <__aeabi_dcmpeq>
 8006512:	2800      	cmp	r0, #0
 8006514:	d0c0      	beq.n	8006498 <_strtod_l+0x8b8>
 8006516:	e618      	b.n	800614a <_strtod_l+0x56a>
 8006518:	fffffc02 	.word	0xfffffc02
 800651c:	7ff00000 	.word	0x7ff00000
 8006520:	39500000 	.word	0x39500000
 8006524:	000fffff 	.word	0x000fffff
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	0800a300 	.word	0x0800a300
 8006530:	4659      	mov	r1, fp
 8006532:	4628      	mov	r0, r5
 8006534:	f002 fb34 	bl	8008ba0 <__ratio>
 8006538:	ec57 6b10 	vmov	r6, r7, d0
 800653c:	ee10 0a10 	vmov	r0, s0
 8006540:	2200      	movs	r2, #0
 8006542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006546:	4639      	mov	r1, r7
 8006548:	f7fa fadc 	bl	8000b04 <__aeabi_dcmple>
 800654c:	2800      	cmp	r0, #0
 800654e:	d071      	beq.n	8006634 <_strtod_l+0xa54>
 8006550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d17c      	bne.n	8006650 <_strtod_l+0xa70>
 8006556:	f1b8 0f00 	cmp.w	r8, #0
 800655a:	d15a      	bne.n	8006612 <_strtod_l+0xa32>
 800655c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006560:	2b00      	cmp	r3, #0
 8006562:	d15d      	bne.n	8006620 <_strtod_l+0xa40>
 8006564:	4b90      	ldr	r3, [pc, #576]	; (80067a8 <_strtod_l+0xbc8>)
 8006566:	2200      	movs	r2, #0
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7fa fac0 	bl	8000af0 <__aeabi_dcmplt>
 8006570:	2800      	cmp	r0, #0
 8006572:	d15c      	bne.n	800662e <_strtod_l+0xa4e>
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	4b8c      	ldr	r3, [pc, #560]	; (80067ac <_strtod_l+0xbcc>)
 800657a:	2200      	movs	r2, #0
 800657c:	f7fa f846 	bl	800060c <__aeabi_dmul>
 8006580:	4606      	mov	r6, r0
 8006582:	460f      	mov	r7, r1
 8006584:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006588:	9606      	str	r6, [sp, #24]
 800658a:	9307      	str	r3, [sp, #28]
 800658c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006590:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006594:	4b86      	ldr	r3, [pc, #536]	; (80067b0 <_strtod_l+0xbd0>)
 8006596:	ea0a 0303 	and.w	r3, sl, r3
 800659a:	930d      	str	r3, [sp, #52]	; 0x34
 800659c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800659e:	4b85      	ldr	r3, [pc, #532]	; (80067b4 <_strtod_l+0xbd4>)
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f040 8090 	bne.w	80066c6 <_strtod_l+0xae6>
 80065a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80065aa:	ec49 8b10 	vmov	d0, r8, r9
 80065ae:	f002 fa2d 	bl	8008a0c <__ulp>
 80065b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065b6:	ec51 0b10 	vmov	r0, r1, d0
 80065ba:	f7fa f827 	bl	800060c <__aeabi_dmul>
 80065be:	4642      	mov	r2, r8
 80065c0:	464b      	mov	r3, r9
 80065c2:	f7f9 fe6d 	bl	80002a0 <__adddf3>
 80065c6:	460b      	mov	r3, r1
 80065c8:	4979      	ldr	r1, [pc, #484]	; (80067b0 <_strtod_l+0xbd0>)
 80065ca:	4a7b      	ldr	r2, [pc, #492]	; (80067b8 <_strtod_l+0xbd8>)
 80065cc:	4019      	ands	r1, r3
 80065ce:	4291      	cmp	r1, r2
 80065d0:	4680      	mov	r8, r0
 80065d2:	d944      	bls.n	800665e <_strtod_l+0xa7e>
 80065d4:	ee18 2a90 	vmov	r2, s17
 80065d8:	4b78      	ldr	r3, [pc, #480]	; (80067bc <_strtod_l+0xbdc>)
 80065da:	429a      	cmp	r2, r3
 80065dc:	d104      	bne.n	80065e8 <_strtod_l+0xa08>
 80065de:	ee18 3a10 	vmov	r3, s16
 80065e2:	3301      	adds	r3, #1
 80065e4:	f43f ad40 	beq.w	8006068 <_strtod_l+0x488>
 80065e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80067bc <_strtod_l+0xbdc>
 80065ec:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80065f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80065f2:	4620      	mov	r0, r4
 80065f4:	f001 fede 	bl	80083b4 <_Bfree>
 80065f8:	9905      	ldr	r1, [sp, #20]
 80065fa:	4620      	mov	r0, r4
 80065fc:	f001 feda 	bl	80083b4 <_Bfree>
 8006600:	4659      	mov	r1, fp
 8006602:	4620      	mov	r0, r4
 8006604:	f001 fed6 	bl	80083b4 <_Bfree>
 8006608:	4629      	mov	r1, r5
 800660a:	4620      	mov	r0, r4
 800660c:	f001 fed2 	bl	80083b4 <_Bfree>
 8006610:	e609      	b.n	8006226 <_strtod_l+0x646>
 8006612:	f1b8 0f01 	cmp.w	r8, #1
 8006616:	d103      	bne.n	8006620 <_strtod_l+0xa40>
 8006618:	f1b9 0f00 	cmp.w	r9, #0
 800661c:	f43f ad95 	beq.w	800614a <_strtod_l+0x56a>
 8006620:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006778 <_strtod_l+0xb98>
 8006624:	4f60      	ldr	r7, [pc, #384]	; (80067a8 <_strtod_l+0xbc8>)
 8006626:	ed8d 7b06 	vstr	d7, [sp, #24]
 800662a:	2600      	movs	r6, #0
 800662c:	e7ae      	b.n	800658c <_strtod_l+0x9ac>
 800662e:	4f5f      	ldr	r7, [pc, #380]	; (80067ac <_strtod_l+0xbcc>)
 8006630:	2600      	movs	r6, #0
 8006632:	e7a7      	b.n	8006584 <_strtod_l+0x9a4>
 8006634:	4b5d      	ldr	r3, [pc, #372]	; (80067ac <_strtod_l+0xbcc>)
 8006636:	4630      	mov	r0, r6
 8006638:	4639      	mov	r1, r7
 800663a:	2200      	movs	r2, #0
 800663c:	f7f9 ffe6 	bl	800060c <__aeabi_dmul>
 8006640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d09c      	beq.n	8006584 <_strtod_l+0x9a4>
 800664a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800664e:	e79d      	b.n	800658c <_strtod_l+0x9ac>
 8006650:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006780 <_strtod_l+0xba0>
 8006654:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006658:	ec57 6b17 	vmov	r6, r7, d7
 800665c:	e796      	b.n	800658c <_strtod_l+0x9ac>
 800665e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	46ca      	mov	sl, r9
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1c2      	bne.n	80065f0 <_strtod_l+0xa10>
 800666a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800666e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006670:	0d1b      	lsrs	r3, r3, #20
 8006672:	051b      	lsls	r3, r3, #20
 8006674:	429a      	cmp	r2, r3
 8006676:	d1bb      	bne.n	80065f0 <_strtod_l+0xa10>
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7fa fad6 	bl	8000c2c <__aeabi_d2lz>
 8006680:	f7f9 ff96 	bl	80005b0 <__aeabi_l2d>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	f7f9 fe06 	bl	800029c <__aeabi_dsub>
 8006690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006692:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006696:	ea43 0308 	orr.w	r3, r3, r8
 800669a:	4313      	orrs	r3, r2
 800669c:	4606      	mov	r6, r0
 800669e:	460f      	mov	r7, r1
 80066a0:	d054      	beq.n	800674c <_strtod_l+0xb6c>
 80066a2:	a339      	add	r3, pc, #228	; (adr r3, 8006788 <_strtod_l+0xba8>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7fa fa22 	bl	8000af0 <__aeabi_dcmplt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f47f ace5 	bne.w	800607c <_strtod_l+0x49c>
 80066b2:	a337      	add	r3, pc, #220	; (adr r3, 8006790 <_strtod_l+0xbb0>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	4630      	mov	r0, r6
 80066ba:	4639      	mov	r1, r7
 80066bc:	f7fa fa36 	bl	8000b2c <__aeabi_dcmpgt>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d095      	beq.n	80065f0 <_strtod_l+0xa10>
 80066c4:	e4da      	b.n	800607c <_strtod_l+0x49c>
 80066c6:	9b04      	ldr	r3, [sp, #16]
 80066c8:	b333      	cbz	r3, 8006718 <_strtod_l+0xb38>
 80066ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066d0:	d822      	bhi.n	8006718 <_strtod_l+0xb38>
 80066d2:	a331      	add	r3, pc, #196	; (adr r3, 8006798 <_strtod_l+0xbb8>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	4630      	mov	r0, r6
 80066da:	4639      	mov	r1, r7
 80066dc:	f7fa fa12 	bl	8000b04 <__aeabi_dcmple>
 80066e0:	b1a0      	cbz	r0, 800670c <_strtod_l+0xb2c>
 80066e2:	4639      	mov	r1, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7fa fa69 	bl	8000bbc <__aeabi_d2uiz>
 80066ea:	2801      	cmp	r0, #1
 80066ec:	bf38      	it	cc
 80066ee:	2001      	movcc	r0, #1
 80066f0:	f7f9 ff12 	bl	8000518 <__aeabi_ui2d>
 80066f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f6:	4606      	mov	r6, r0
 80066f8:	460f      	mov	r7, r1
 80066fa:	bb23      	cbnz	r3, 8006746 <_strtod_l+0xb66>
 80066fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006700:	9010      	str	r0, [sp, #64]	; 0x40
 8006702:	9311      	str	r3, [sp, #68]	; 0x44
 8006704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006708:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800670c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800670e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006710:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	930f      	str	r3, [sp, #60]	; 0x3c
 8006718:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800671c:	eeb0 0a48 	vmov.f32	s0, s16
 8006720:	eef0 0a68 	vmov.f32	s1, s17
 8006724:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006728:	f002 f970 	bl	8008a0c <__ulp>
 800672c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006730:	ec53 2b10 	vmov	r2, r3, d0
 8006734:	f7f9 ff6a 	bl	800060c <__aeabi_dmul>
 8006738:	ec53 2b18 	vmov	r2, r3, d8
 800673c:	f7f9 fdb0 	bl	80002a0 <__adddf3>
 8006740:	4680      	mov	r8, r0
 8006742:	4689      	mov	r9, r1
 8006744:	e78d      	b.n	8006662 <_strtod_l+0xa82>
 8006746:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800674a:	e7db      	b.n	8006704 <_strtod_l+0xb24>
 800674c:	a314      	add	r3, pc, #80	; (adr r3, 80067a0 <_strtod_l+0xbc0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7fa f9cd 	bl	8000af0 <__aeabi_dcmplt>
 8006756:	e7b3      	b.n	80066c0 <_strtod_l+0xae0>
 8006758:	2300      	movs	r3, #0
 800675a:	930a      	str	r3, [sp, #40]	; 0x28
 800675c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800675e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	f7ff ba7c 	b.w	8005c5e <_strtod_l+0x7e>
 8006766:	2a65      	cmp	r2, #101	; 0x65
 8006768:	f43f ab75 	beq.w	8005e56 <_strtod_l+0x276>
 800676c:	2a45      	cmp	r2, #69	; 0x45
 800676e:	f43f ab72 	beq.w	8005e56 <_strtod_l+0x276>
 8006772:	2301      	movs	r3, #1
 8006774:	f7ff bbaa 	b.w	8005ecc <_strtod_l+0x2ec>
 8006778:	00000000 	.word	0x00000000
 800677c:	bff00000 	.word	0xbff00000
 8006780:	00000000 	.word	0x00000000
 8006784:	3ff00000 	.word	0x3ff00000
 8006788:	94a03595 	.word	0x94a03595
 800678c:	3fdfffff 	.word	0x3fdfffff
 8006790:	35afe535 	.word	0x35afe535
 8006794:	3fe00000 	.word	0x3fe00000
 8006798:	ffc00000 	.word	0xffc00000
 800679c:	41dfffff 	.word	0x41dfffff
 80067a0:	94a03595 	.word	0x94a03595
 80067a4:	3fcfffff 	.word	0x3fcfffff
 80067a8:	3ff00000 	.word	0x3ff00000
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	7ff00000 	.word	0x7ff00000
 80067b4:	7fe00000 	.word	0x7fe00000
 80067b8:	7c9fffff 	.word	0x7c9fffff
 80067bc:	7fefffff 	.word	0x7fefffff

080067c0 <strtod>:
 80067c0:	460a      	mov	r2, r1
 80067c2:	4601      	mov	r1, r0
 80067c4:	4802      	ldr	r0, [pc, #8]	; (80067d0 <strtod+0x10>)
 80067c6:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <strtod+0x14>)
 80067c8:	6800      	ldr	r0, [r0, #0]
 80067ca:	f7ff ba09 	b.w	8005be0 <_strtod_l>
 80067ce:	bf00      	nop
 80067d0:	200001d8 	.word	0x200001d8
 80067d4:	20000020 	.word	0x20000020

080067d8 <_fwalk_sglue>:
 80067d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067dc:	4607      	mov	r7, r0
 80067de:	4688      	mov	r8, r1
 80067e0:	4614      	mov	r4, r2
 80067e2:	2600      	movs	r6, #0
 80067e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e8:	f1b9 0901 	subs.w	r9, r9, #1
 80067ec:	d505      	bpl.n	80067fa <_fwalk_sglue+0x22>
 80067ee:	6824      	ldr	r4, [r4, #0]
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d1f7      	bne.n	80067e4 <_fwalk_sglue+0xc>
 80067f4:	4630      	mov	r0, r6
 80067f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d907      	bls.n	8006810 <_fwalk_sglue+0x38>
 8006800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006804:	3301      	adds	r3, #1
 8006806:	d003      	beq.n	8006810 <_fwalk_sglue+0x38>
 8006808:	4629      	mov	r1, r5
 800680a:	4638      	mov	r0, r7
 800680c:	47c0      	blx	r8
 800680e:	4306      	orrs	r6, r0
 8006810:	3568      	adds	r5, #104	; 0x68
 8006812:	e7e9      	b.n	80067e8 <_fwalk_sglue+0x10>

08006814 <strncmp>:
 8006814:	b510      	push	{r4, lr}
 8006816:	b16a      	cbz	r2, 8006834 <strncmp+0x20>
 8006818:	3901      	subs	r1, #1
 800681a:	1884      	adds	r4, r0, r2
 800681c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006820:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006824:	429a      	cmp	r2, r3
 8006826:	d103      	bne.n	8006830 <strncmp+0x1c>
 8006828:	42a0      	cmp	r0, r4
 800682a:	d001      	beq.n	8006830 <strncmp+0x1c>
 800682c:	2a00      	cmp	r2, #0
 800682e:	d1f5      	bne.n	800681c <strncmp+0x8>
 8006830:	1ad0      	subs	r0, r2, r3
 8006832:	bd10      	pop	{r4, pc}
 8006834:	4610      	mov	r0, r2
 8006836:	e7fc      	b.n	8006832 <strncmp+0x1e>

08006838 <strncpy>:
 8006838:	b510      	push	{r4, lr}
 800683a:	3901      	subs	r1, #1
 800683c:	4603      	mov	r3, r0
 800683e:	b132      	cbz	r2, 800684e <strncpy+0x16>
 8006840:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006844:	f803 4b01 	strb.w	r4, [r3], #1
 8006848:	3a01      	subs	r2, #1
 800684a:	2c00      	cmp	r4, #0
 800684c:	d1f7      	bne.n	800683e <strncpy+0x6>
 800684e:	441a      	add	r2, r3
 8006850:	2100      	movs	r1, #0
 8006852:	4293      	cmp	r3, r2
 8006854:	d100      	bne.n	8006858 <strncpy+0x20>
 8006856:	bd10      	pop	{r4, pc}
 8006858:	f803 1b01 	strb.w	r1, [r3], #1
 800685c:	e7f9      	b.n	8006852 <strncpy+0x1a>
	...

08006860 <strtok>:
 8006860:	4b16      	ldr	r3, [pc, #88]	; (80068bc <strtok+0x5c>)
 8006862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006864:	681e      	ldr	r6, [r3, #0]
 8006866:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006868:	4605      	mov	r5, r0
 800686a:	b9fc      	cbnz	r4, 80068ac <strtok+0x4c>
 800686c:	2050      	movs	r0, #80	; 0x50
 800686e:	9101      	str	r1, [sp, #4]
 8006870:	f001 fbec 	bl	800804c <malloc>
 8006874:	9901      	ldr	r1, [sp, #4]
 8006876:	6470      	str	r0, [r6, #68]	; 0x44
 8006878:	4602      	mov	r2, r0
 800687a:	b920      	cbnz	r0, 8006886 <strtok+0x26>
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <strtok+0x60>)
 800687e:	4811      	ldr	r0, [pc, #68]	; (80068c4 <strtok+0x64>)
 8006880:	215b      	movs	r1, #91	; 0x5b
 8006882:	f000 f899 	bl	80069b8 <__assert_func>
 8006886:	e9c0 4400 	strd	r4, r4, [r0]
 800688a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800688e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006892:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006896:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800689a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800689e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80068a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80068a6:	6184      	str	r4, [r0, #24]
 80068a8:	7704      	strb	r4, [r0, #28]
 80068aa:	6244      	str	r4, [r0, #36]	; 0x24
 80068ac:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80068ae:	2301      	movs	r3, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	b002      	add	sp, #8
 80068b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068b8:	f000 b806 	b.w	80068c8 <__strtok_r>
 80068bc:	200001d8 	.word	0x200001d8
 80068c0:	0800a328 	.word	0x0800a328
 80068c4:	0800a33f 	.word	0x0800a33f

080068c8 <__strtok_r>:
 80068c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ca:	b908      	cbnz	r0, 80068d0 <__strtok_r+0x8>
 80068cc:	6810      	ldr	r0, [r2, #0]
 80068ce:	b188      	cbz	r0, 80068f4 <__strtok_r+0x2c>
 80068d0:	4604      	mov	r4, r0
 80068d2:	4620      	mov	r0, r4
 80068d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068d8:	460f      	mov	r7, r1
 80068da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068de:	b91e      	cbnz	r6, 80068e8 <__strtok_r+0x20>
 80068e0:	b965      	cbnz	r5, 80068fc <__strtok_r+0x34>
 80068e2:	6015      	str	r5, [r2, #0]
 80068e4:	4628      	mov	r0, r5
 80068e6:	e005      	b.n	80068f4 <__strtok_r+0x2c>
 80068e8:	42b5      	cmp	r5, r6
 80068ea:	d1f6      	bne.n	80068da <__strtok_r+0x12>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f0      	bne.n	80068d2 <__strtok_r+0xa>
 80068f0:	6014      	str	r4, [r2, #0]
 80068f2:	7003      	strb	r3, [r0, #0]
 80068f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f6:	461c      	mov	r4, r3
 80068f8:	e00c      	b.n	8006914 <__strtok_r+0x4c>
 80068fa:	b915      	cbnz	r5, 8006902 <__strtok_r+0x3a>
 80068fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006900:	460e      	mov	r6, r1
 8006902:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006906:	42ab      	cmp	r3, r5
 8006908:	d1f7      	bne.n	80068fa <__strtok_r+0x32>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0f3      	beq.n	80068f6 <__strtok_r+0x2e>
 800690e:	2300      	movs	r3, #0
 8006910:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006914:	6014      	str	r4, [r2, #0]
 8006916:	e7ed      	b.n	80068f4 <__strtok_r+0x2c>

08006918 <memset>:
 8006918:	4402      	add	r2, r0
 800691a:	4603      	mov	r3, r0
 800691c:	4293      	cmp	r3, r2
 800691e:	d100      	bne.n	8006922 <memset+0xa>
 8006920:	4770      	bx	lr
 8006922:	f803 1b01 	strb.w	r1, [r3], #1
 8006926:	e7f9      	b.n	800691c <memset+0x4>

08006928 <_localeconv_r>:
 8006928:	4800      	ldr	r0, [pc, #0]	; (800692c <_localeconv_r+0x4>)
 800692a:	4770      	bx	lr
 800692c:	20000110 	.word	0x20000110

08006930 <__errno>:
 8006930:	4b01      	ldr	r3, [pc, #4]	; (8006938 <__errno+0x8>)
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	200001d8 	.word	0x200001d8

0800693c <__libc_init_array>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4d0d      	ldr	r5, [pc, #52]	; (8006974 <__libc_init_array+0x38>)
 8006940:	4c0d      	ldr	r4, [pc, #52]	; (8006978 <__libc_init_array+0x3c>)
 8006942:	1b64      	subs	r4, r4, r5
 8006944:	10a4      	asrs	r4, r4, #2
 8006946:	2600      	movs	r6, #0
 8006948:	42a6      	cmp	r6, r4
 800694a:	d109      	bne.n	8006960 <__libc_init_array+0x24>
 800694c:	4d0b      	ldr	r5, [pc, #44]	; (800697c <__libc_init_array+0x40>)
 800694e:	4c0c      	ldr	r4, [pc, #48]	; (8006980 <__libc_init_array+0x44>)
 8006950:	f002 fdb2 	bl	80094b8 <_init>
 8006954:	1b64      	subs	r4, r4, r5
 8006956:	10a4      	asrs	r4, r4, #2
 8006958:	2600      	movs	r6, #0
 800695a:	42a6      	cmp	r6, r4
 800695c:	d105      	bne.n	800696a <__libc_init_array+0x2e>
 800695e:	bd70      	pop	{r4, r5, r6, pc}
 8006960:	f855 3b04 	ldr.w	r3, [r5], #4
 8006964:	4798      	blx	r3
 8006966:	3601      	adds	r6, #1
 8006968:	e7ee      	b.n	8006948 <__libc_init_array+0xc>
 800696a:	f855 3b04 	ldr.w	r3, [r5], #4
 800696e:	4798      	blx	r3
 8006970:	3601      	adds	r6, #1
 8006972:	e7f2      	b.n	800695a <__libc_init_array+0x1e>
 8006974:	0800a724 	.word	0x0800a724
 8006978:	0800a724 	.word	0x0800a724
 800697c:	0800a724 	.word	0x0800a724
 8006980:	0800a728 	.word	0x0800a728

08006984 <__retarget_lock_acquire_recursive>:
 8006984:	4770      	bx	lr

08006986 <__retarget_lock_release_recursive>:
 8006986:	4770      	bx	lr

08006988 <memcpy>:
 8006988:	440a      	add	r2, r1
 800698a:	4291      	cmp	r1, r2
 800698c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006990:	d100      	bne.n	8006994 <memcpy+0xc>
 8006992:	4770      	bx	lr
 8006994:	b510      	push	{r4, lr}
 8006996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699e:	4291      	cmp	r1, r2
 80069a0:	d1f9      	bne.n	8006996 <memcpy+0xe>
 80069a2:	bd10      	pop	{r4, pc}
 80069a4:	0000      	movs	r0, r0
	...

080069a8 <nan>:
 80069a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80069b0 <nan+0x8>
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	00000000 	.word	0x00000000
 80069b4:	7ff80000 	.word	0x7ff80000

080069b8 <__assert_func>:
 80069b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ba:	4614      	mov	r4, r2
 80069bc:	461a      	mov	r2, r3
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <__assert_func+0x2c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4605      	mov	r5, r0
 80069c4:	68d8      	ldr	r0, [r3, #12]
 80069c6:	b14c      	cbz	r4, 80069dc <__assert_func+0x24>
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <__assert_func+0x30>)
 80069ca:	9100      	str	r1, [sp, #0]
 80069cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069d0:	4906      	ldr	r1, [pc, #24]	; (80069ec <__assert_func+0x34>)
 80069d2:	462b      	mov	r3, r5
 80069d4:	f002 f99e 	bl	8008d14 <fiprintf>
 80069d8:	f002 fa5a 	bl	8008e90 <abort>
 80069dc:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <__assert_func+0x38>)
 80069de:	461c      	mov	r4, r3
 80069e0:	e7f3      	b.n	80069ca <__assert_func+0x12>
 80069e2:	bf00      	nop
 80069e4:	200001d8 	.word	0x200001d8
 80069e8:	0800a4a2 	.word	0x0800a4a2
 80069ec:	0800a4af 	.word	0x0800a4af
 80069f0:	0800a4dd 	.word	0x0800a4dd

080069f4 <quorem>:
 80069f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f8:	6903      	ldr	r3, [r0, #16]
 80069fa:	690c      	ldr	r4, [r1, #16]
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	4607      	mov	r7, r0
 8006a00:	db7e      	blt.n	8006b00 <quorem+0x10c>
 8006a02:	3c01      	subs	r4, #1
 8006a04:	f101 0814 	add.w	r8, r1, #20
 8006a08:	f100 0514 	add.w	r5, r0, #20
 8006a0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a26:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a2a:	d331      	bcc.n	8006a90 <quorem+0x9c>
 8006a2c:	f04f 0e00 	mov.w	lr, #0
 8006a30:	4640      	mov	r0, r8
 8006a32:	46ac      	mov	ip, r5
 8006a34:	46f2      	mov	sl, lr
 8006a36:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a3a:	b293      	uxth	r3, r2
 8006a3c:	fb06 e303 	mla	r3, r6, r3, lr
 8006a40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a44:	0c1a      	lsrs	r2, r3, #16
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	ebaa 0303 	sub.w	r3, sl, r3
 8006a4c:	f8dc a000 	ldr.w	sl, [ip]
 8006a50:	fa13 f38a 	uxtah	r3, r3, sl
 8006a54:	fb06 220e 	mla	r2, r6, lr, r2
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a60:	b292      	uxth	r2, r2
 8006a62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a6e:	4581      	cmp	r9, r0
 8006a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a74:	f84c 3b04 	str.w	r3, [ip], #4
 8006a78:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a7c:	d2db      	bcs.n	8006a36 <quorem+0x42>
 8006a7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a82:	b92b      	cbnz	r3, 8006a90 <quorem+0x9c>
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	3b04      	subs	r3, #4
 8006a88:	429d      	cmp	r5, r3
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	d32c      	bcc.n	8006ae8 <quorem+0xf4>
 8006a8e:	613c      	str	r4, [r7, #16]
 8006a90:	4638      	mov	r0, r7
 8006a92:	f001 ff15 	bl	80088c0 <__mcmp>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	db22      	blt.n	8006ae0 <quorem+0xec>
 8006a9a:	3601      	adds	r6, #1
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006aa4:	f8d1 c000 	ldr.w	ip, [r1]
 8006aa8:	b293      	uxth	r3, r2
 8006aaa:	1ac3      	subs	r3, r0, r3
 8006aac:	0c12      	lsrs	r2, r2, #16
 8006aae:	fa13 f38c 	uxtah	r3, r3, ip
 8006ab2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ab6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac0:	45c1      	cmp	r9, r8
 8006ac2:	f841 3b04 	str.w	r3, [r1], #4
 8006ac6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006aca:	d2e9      	bcs.n	8006aa0 <quorem+0xac>
 8006acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ad4:	b922      	cbnz	r2, 8006ae0 <quorem+0xec>
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	429d      	cmp	r5, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	d30a      	bcc.n	8006af4 <quorem+0x100>
 8006ade:	613c      	str	r4, [r7, #16]
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	b003      	add	sp, #12
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	3b04      	subs	r3, #4
 8006aec:	2a00      	cmp	r2, #0
 8006aee:	d1ce      	bne.n	8006a8e <quorem+0x9a>
 8006af0:	3c01      	subs	r4, #1
 8006af2:	e7c9      	b.n	8006a88 <quorem+0x94>
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	3b04      	subs	r3, #4
 8006af8:	2a00      	cmp	r2, #0
 8006afa:	d1f0      	bne.n	8006ade <quorem+0xea>
 8006afc:	3c01      	subs	r4, #1
 8006afe:	e7eb      	b.n	8006ad8 <quorem+0xe4>
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7ee      	b.n	8006ae2 <quorem+0xee>
 8006b04:	0000      	movs	r0, r0
	...

08006b08 <_dtoa_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	ed2d 8b04 	vpush	{d8-d9}
 8006b10:	69c5      	ldr	r5, [r0, #28]
 8006b12:	b093      	sub	sp, #76	; 0x4c
 8006b14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b18:	ec57 6b10 	vmov	r6, r7, d0
 8006b1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b20:	9107      	str	r1, [sp, #28]
 8006b22:	4604      	mov	r4, r0
 8006b24:	920a      	str	r2, [sp, #40]	; 0x28
 8006b26:	930d      	str	r3, [sp, #52]	; 0x34
 8006b28:	b975      	cbnz	r5, 8006b48 <_dtoa_r+0x40>
 8006b2a:	2010      	movs	r0, #16
 8006b2c:	f001 fa8e 	bl	800804c <malloc>
 8006b30:	4602      	mov	r2, r0
 8006b32:	61e0      	str	r0, [r4, #28]
 8006b34:	b920      	cbnz	r0, 8006b40 <_dtoa_r+0x38>
 8006b36:	4bae      	ldr	r3, [pc, #696]	; (8006df0 <_dtoa_r+0x2e8>)
 8006b38:	21ef      	movs	r1, #239	; 0xef
 8006b3a:	48ae      	ldr	r0, [pc, #696]	; (8006df4 <_dtoa_r+0x2ec>)
 8006b3c:	f7ff ff3c 	bl	80069b8 <__assert_func>
 8006b40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b44:	6005      	str	r5, [r0, #0]
 8006b46:	60c5      	str	r5, [r0, #12]
 8006b48:	69e3      	ldr	r3, [r4, #28]
 8006b4a:	6819      	ldr	r1, [r3, #0]
 8006b4c:	b151      	cbz	r1, 8006b64 <_dtoa_r+0x5c>
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	604a      	str	r2, [r1, #4]
 8006b52:	2301      	movs	r3, #1
 8006b54:	4093      	lsls	r3, r2
 8006b56:	608b      	str	r3, [r1, #8]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f001 fc2b 	bl	80083b4 <_Bfree>
 8006b5e:	69e3      	ldr	r3, [r4, #28]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	1e3b      	subs	r3, r7, #0
 8006b66:	bfbb      	ittet	lt
 8006b68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b6c:	9303      	strlt	r3, [sp, #12]
 8006b6e:	2300      	movge	r3, #0
 8006b70:	2201      	movlt	r2, #1
 8006b72:	bfac      	ite	ge
 8006b74:	f8c8 3000 	strge.w	r3, [r8]
 8006b78:	f8c8 2000 	strlt.w	r2, [r8]
 8006b7c:	4b9e      	ldr	r3, [pc, #632]	; (8006df8 <_dtoa_r+0x2f0>)
 8006b7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b82:	ea33 0308 	bics.w	r3, r3, r8
 8006b86:	d11b      	bne.n	8006bc0 <_dtoa_r+0xb8>
 8006b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b94:	4333      	orrs	r3, r6
 8006b96:	f000 8593 	beq.w	80076c0 <_dtoa_r+0xbb8>
 8006b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b9c:	b963      	cbnz	r3, 8006bb8 <_dtoa_r+0xb0>
 8006b9e:	4b97      	ldr	r3, [pc, #604]	; (8006dfc <_dtoa_r+0x2f4>)
 8006ba0:	e027      	b.n	8006bf2 <_dtoa_r+0xea>
 8006ba2:	4b97      	ldr	r3, [pc, #604]	; (8006e00 <_dtoa_r+0x2f8>)
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	9800      	ldr	r0, [sp, #0]
 8006bae:	b013      	add	sp, #76	; 0x4c
 8006bb0:	ecbd 8b04 	vpop	{d8-d9}
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	4b90      	ldr	r3, [pc, #576]	; (8006dfc <_dtoa_r+0x2f4>)
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	3303      	adds	r3, #3
 8006bbe:	e7f3      	b.n	8006ba8 <_dtoa_r+0xa0>
 8006bc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	ec51 0b17 	vmov	r0, r1, d7
 8006bca:	eeb0 8a47 	vmov.f32	s16, s14
 8006bce:	eef0 8a67 	vmov.f32	s17, s15
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f7f9 ff82 	bl	8000adc <__aeabi_dcmpeq>
 8006bd8:	4681      	mov	r9, r0
 8006bda:	b160      	cbz	r0, 8006bf6 <_dtoa_r+0xee>
 8006bdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bde:	2301      	movs	r3, #1
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8568 	beq.w	80076ba <_dtoa_r+0xbb2>
 8006bea:	4b86      	ldr	r3, [pc, #536]	; (8006e04 <_dtoa_r+0x2fc>)
 8006bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	e7da      	b.n	8006bac <_dtoa_r+0xa4>
 8006bf6:	aa10      	add	r2, sp, #64	; 0x40
 8006bf8:	a911      	add	r1, sp, #68	; 0x44
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8006c00:	eef0 0a68 	vmov.f32	s1, s17
 8006c04:	f001 ff72 	bl	8008aec <__d2b>
 8006c08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c0c:	4682      	mov	sl, r0
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	d07f      	beq.n	8006d12 <_dtoa_r+0x20a>
 8006c12:	ee18 3a90 	vmov	r3, s17
 8006c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c1e:	ec51 0b18 	vmov	r0, r1, d8
 8006c22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006c2e:	4619      	mov	r1, r3
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b75      	ldr	r3, [pc, #468]	; (8006e08 <_dtoa_r+0x300>)
 8006c34:	f7f9 fb32 	bl	800029c <__aeabi_dsub>
 8006c38:	a367      	add	r3, pc, #412	; (adr r3, 8006dd8 <_dtoa_r+0x2d0>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fce5 	bl	800060c <__aeabi_dmul>
 8006c42:	a367      	add	r3, pc, #412	; (adr r3, 8006de0 <_dtoa_r+0x2d8>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fb2a 	bl	80002a0 <__adddf3>
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	460f      	mov	r7, r1
 8006c52:	f7f9 fc71 	bl	8000538 <__aeabi_i2d>
 8006c56:	a364      	add	r3, pc, #400	; (adr r3, 8006de8 <_dtoa_r+0x2e0>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fcd6 	bl	800060c <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4630      	mov	r0, r6
 8006c66:	4639      	mov	r1, r7
 8006c68:	f7f9 fb1a 	bl	80002a0 <__adddf3>
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	f7f9 ff7c 	bl	8000b6c <__aeabi_d2iz>
 8006c74:	2200      	movs	r2, #0
 8006c76:	4683      	mov	fp, r0
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 ff37 	bl	8000af0 <__aeabi_dcmplt>
 8006c82:	b148      	cbz	r0, 8006c98 <_dtoa_r+0x190>
 8006c84:	4658      	mov	r0, fp
 8006c86:	f7f9 fc57 	bl	8000538 <__aeabi_i2d>
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	f7f9 ff25 	bl	8000adc <__aeabi_dcmpeq>
 8006c92:	b908      	cbnz	r0, 8006c98 <_dtoa_r+0x190>
 8006c94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c98:	f1bb 0f16 	cmp.w	fp, #22
 8006c9c:	d857      	bhi.n	8006d4e <_dtoa_r+0x246>
 8006c9e:	4b5b      	ldr	r3, [pc, #364]	; (8006e0c <_dtoa_r+0x304>)
 8006ca0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	ec51 0b18 	vmov	r0, r1, d8
 8006cac:	f7f9 ff20 	bl	8000af0 <__aeabi_dcmplt>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d04e      	beq.n	8006d52 <_dtoa_r+0x24a>
 8006cb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006cb8:	2300      	movs	r3, #0
 8006cba:	930c      	str	r3, [sp, #48]	; 0x30
 8006cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cbe:	1b5b      	subs	r3, r3, r5
 8006cc0:	1e5a      	subs	r2, r3, #1
 8006cc2:	bf45      	ittet	mi
 8006cc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cc8:	9305      	strmi	r3, [sp, #20]
 8006cca:	2300      	movpl	r3, #0
 8006ccc:	2300      	movmi	r3, #0
 8006cce:	9206      	str	r2, [sp, #24]
 8006cd0:	bf54      	ite	pl
 8006cd2:	9305      	strpl	r3, [sp, #20]
 8006cd4:	9306      	strmi	r3, [sp, #24]
 8006cd6:	f1bb 0f00 	cmp.w	fp, #0
 8006cda:	db3c      	blt.n	8006d56 <_dtoa_r+0x24e>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006ce2:	445b      	add	r3, fp
 8006ce4:	9306      	str	r3, [sp, #24]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9308      	str	r3, [sp, #32]
 8006cea:	9b07      	ldr	r3, [sp, #28]
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d868      	bhi.n	8006dc2 <_dtoa_r+0x2ba>
 8006cf0:	2b05      	cmp	r3, #5
 8006cf2:	bfc4      	itt	gt
 8006cf4:	3b04      	subgt	r3, #4
 8006cf6:	9307      	strgt	r3, [sp, #28]
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	f1a3 0302 	sub.w	r3, r3, #2
 8006cfe:	bfcc      	ite	gt
 8006d00:	2500      	movgt	r5, #0
 8006d02:	2501      	movle	r5, #1
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	f200 8085 	bhi.w	8006e14 <_dtoa_r+0x30c>
 8006d0a:	e8df f003 	tbb	[pc, r3]
 8006d0e:	3b2e      	.short	0x3b2e
 8006d10:	5839      	.short	0x5839
 8006d12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d16:	441d      	add	r5, r3
 8006d18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	bfc1      	itttt	gt
 8006d20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d24:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006d2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d30:	bfd6      	itet	le
 8006d32:	f1c3 0320 	rsble	r3, r3, #32
 8006d36:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d3a:	fa06 f003 	lslle.w	r0, r6, r3
 8006d3e:	f7f9 fbeb 	bl	8000518 <__aeabi_ui2d>
 8006d42:	2201      	movs	r2, #1
 8006d44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d48:	3d01      	subs	r5, #1
 8006d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8006d4c:	e76f      	b.n	8006c2e <_dtoa_r+0x126>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7b3      	b.n	8006cba <_dtoa_r+0x1b2>
 8006d52:	900c      	str	r0, [sp, #48]	; 0x30
 8006d54:	e7b2      	b.n	8006cbc <_dtoa_r+0x1b4>
 8006d56:	9b05      	ldr	r3, [sp, #20]
 8006d58:	eba3 030b 	sub.w	r3, r3, fp
 8006d5c:	9305      	str	r3, [sp, #20]
 8006d5e:	f1cb 0300 	rsb	r3, fp, #0
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	2300      	movs	r3, #0
 8006d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d68:	e7bf      	b.n	8006cea <_dtoa_r+0x1e2>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc52      	bgt.n	8006e1a <_dtoa_r+0x312>
 8006d74:	2301      	movs	r3, #1
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d7e:	e00b      	b.n	8006d98 <_dtoa_r+0x290>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e7f3      	b.n	8006d6c <_dtoa_r+0x264>
 8006d84:	2300      	movs	r3, #0
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	445b      	add	r3, fp
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	bfb8      	it	lt
 8006d96:	2301      	movlt	r3, #1
 8006d98:	69e0      	ldr	r0, [r4, #28]
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	f102 0614 	add.w	r6, r2, #20
 8006da2:	429e      	cmp	r6, r3
 8006da4:	d93d      	bls.n	8006e22 <_dtoa_r+0x31a>
 8006da6:	6041      	str	r1, [r0, #4]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fac3 	bl	8008334 <_Balloc>
 8006dae:	9000      	str	r0, [sp, #0]
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d139      	bne.n	8006e28 <_dtoa_r+0x320>
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <_dtoa_r+0x308>)
 8006db6:	4602      	mov	r2, r0
 8006db8:	f240 11af 	movw	r1, #431	; 0x1af
 8006dbc:	e6bd      	b.n	8006b3a <_dtoa_r+0x32>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7e1      	b.n	8006d86 <_dtoa_r+0x27e>
 8006dc2:	2501      	movs	r5, #1
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9307      	str	r3, [sp, #28]
 8006dc8:	9509      	str	r5, [sp, #36]	; 0x24
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2312      	movs	r3, #18
 8006dd6:	e7d1      	b.n	8006d7c <_dtoa_r+0x274>
 8006dd8:	636f4361 	.word	0x636f4361
 8006ddc:	3fd287a7 	.word	0x3fd287a7
 8006de0:	8b60c8b3 	.word	0x8b60c8b3
 8006de4:	3fc68a28 	.word	0x3fc68a28
 8006de8:	509f79fb 	.word	0x509f79fb
 8006dec:	3fd34413 	.word	0x3fd34413
 8006df0:	0800a328 	.word	0x0800a328
 8006df4:	0800a4eb 	.word	0x0800a4eb
 8006df8:	7ff00000 	.word	0x7ff00000
 8006dfc:	0800a4e7 	.word	0x0800a4e7
 8006e00:	0800a4de 	.word	0x0800a4de
 8006e04:	0800a2ad 	.word	0x0800a2ad
 8006e08:	3ff80000 	.word	0x3ff80000
 8006e0c:	0800a648 	.word	0x0800a648
 8006e10:	0800a543 	.word	0x0800a543
 8006e14:	2301      	movs	r3, #1
 8006e16:	9309      	str	r3, [sp, #36]	; 0x24
 8006e18:	e7d7      	b.n	8006dca <_dtoa_r+0x2c2>
 8006e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	e7ba      	b.n	8006d98 <_dtoa_r+0x290>
 8006e22:	3101      	adds	r1, #1
 8006e24:	0052      	lsls	r2, r2, #1
 8006e26:	e7ba      	b.n	8006d9e <_dtoa_r+0x296>
 8006e28:	69e3      	ldr	r3, [r4, #28]
 8006e2a:	9a00      	ldr	r2, [sp, #0]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	2b0e      	cmp	r3, #14
 8006e32:	f200 80a8 	bhi.w	8006f86 <_dtoa_r+0x47e>
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	f000 80a5 	beq.w	8006f86 <_dtoa_r+0x47e>
 8006e3c:	f1bb 0f00 	cmp.w	fp, #0
 8006e40:	dd38      	ble.n	8006eb4 <_dtoa_r+0x3ac>
 8006e42:	4bc0      	ldr	r3, [pc, #768]	; (8007144 <_dtoa_r+0x63c>)
 8006e44:	f00b 020f 	and.w	r2, fp, #15
 8006e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006e58:	d019      	beq.n	8006e8e <_dtoa_r+0x386>
 8006e5a:	4bbb      	ldr	r3, [pc, #748]	; (8007148 <_dtoa_r+0x640>)
 8006e5c:	ec51 0b18 	vmov	r0, r1, d8
 8006e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e64:	f7f9 fcfc 	bl	8000860 <__aeabi_ddiv>
 8006e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6c:	f008 080f 	and.w	r8, r8, #15
 8006e70:	2503      	movs	r5, #3
 8006e72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007148 <_dtoa_r+0x640>
 8006e76:	f1b8 0f00 	cmp.w	r8, #0
 8006e7a:	d10a      	bne.n	8006e92 <_dtoa_r+0x38a>
 8006e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	f7f9 fcec 	bl	8000860 <__aeabi_ddiv>
 8006e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e8c:	e02b      	b.n	8006ee6 <_dtoa_r+0x3de>
 8006e8e:	2502      	movs	r5, #2
 8006e90:	e7ef      	b.n	8006e72 <_dtoa_r+0x36a>
 8006e92:	f018 0f01 	tst.w	r8, #1
 8006e96:	d008      	beq.n	8006eaa <_dtoa_r+0x3a2>
 8006e98:	4630      	mov	r0, r6
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ea0:	f7f9 fbb4 	bl	800060c <__aeabi_dmul>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006eae:	f109 0908 	add.w	r9, r9, #8
 8006eb2:	e7e0      	b.n	8006e76 <_dtoa_r+0x36e>
 8006eb4:	f000 809f 	beq.w	8006ff6 <_dtoa_r+0x4ee>
 8006eb8:	f1cb 0600 	rsb	r6, fp, #0
 8006ebc:	4ba1      	ldr	r3, [pc, #644]	; (8007144 <_dtoa_r+0x63c>)
 8006ebe:	4fa2      	ldr	r7, [pc, #648]	; (8007148 <_dtoa_r+0x640>)
 8006ec0:	f006 020f 	and.w	r2, r6, #15
 8006ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	ec51 0b18 	vmov	r0, r1, d8
 8006ed0:	f7f9 fb9c 	bl	800060c <__aeabi_dmul>
 8006ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed8:	1136      	asrs	r6, r6, #4
 8006eda:	2300      	movs	r3, #0
 8006edc:	2502      	movs	r5, #2
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	d17e      	bne.n	8006fe0 <_dtoa_r+0x4d8>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1d0      	bne.n	8006e88 <_dtoa_r+0x380>
 8006ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ee8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8084 	beq.w	8006ffa <_dtoa_r+0x4f2>
 8006ef2:	4b96      	ldr	r3, [pc, #600]	; (800714c <_dtoa_r+0x644>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4640      	mov	r0, r8
 8006ef8:	4649      	mov	r1, r9
 8006efa:	f7f9 fdf9 	bl	8000af0 <__aeabi_dcmplt>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d07b      	beq.n	8006ffa <_dtoa_r+0x4f2>
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d078      	beq.n	8006ffa <_dtoa_r+0x4f2>
 8006f08:	9b01      	ldr	r3, [sp, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dd39      	ble.n	8006f82 <_dtoa_r+0x47a>
 8006f0e:	4b90      	ldr	r3, [pc, #576]	; (8007150 <_dtoa_r+0x648>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	4640      	mov	r0, r8
 8006f14:	4649      	mov	r1, r9
 8006f16:	f7f9 fb79 	bl	800060c <__aeabi_dmul>
 8006f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1e:	9e01      	ldr	r6, [sp, #4]
 8006f20:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006f24:	3501      	adds	r5, #1
 8006f26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f7f9 fb04 	bl	8000538 <__aeabi_i2d>
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	f7f9 fb6a 	bl	800060c <__aeabi_dmul>
 8006f38:	4b86      	ldr	r3, [pc, #536]	; (8007154 <_dtoa_r+0x64c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f7f9 f9b0 	bl	80002a0 <__adddf3>
 8006f40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f48:	9303      	str	r3, [sp, #12]
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d158      	bne.n	8007000 <_dtoa_r+0x4f8>
 8006f4e:	4b82      	ldr	r3, [pc, #520]	; (8007158 <_dtoa_r+0x650>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 f9a1 	bl	800029c <__aeabi_dsub>
 8006f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4689      	mov	r9, r1
 8006f62:	f7f9 fde3 	bl	8000b2c <__aeabi_dcmpgt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f040 8296 	bne.w	8007498 <_dtoa_r+0x990>
 8006f6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f70:	4640      	mov	r0, r8
 8006f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 fdba 	bl	8000af0 <__aeabi_dcmplt>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f040 8289 	bne.w	8007494 <_dtoa_r+0x98c>
 8006f82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f2c0 814e 	blt.w	800722a <_dtoa_r+0x722>
 8006f8e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f92:	f300 814a 	bgt.w	800722a <_dtoa_r+0x722>
 8006f96:	4b6b      	ldr	r3, [pc, #428]	; (8007144 <_dtoa_r+0x63c>)
 8006f98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f280 80dc 	bge.w	8007160 <_dtoa_r+0x658>
 8006fa8:	9b04      	ldr	r3, [sp, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f300 80d8 	bgt.w	8007160 <_dtoa_r+0x658>
 8006fb0:	f040 826f 	bne.w	8007492 <_dtoa_r+0x98a>
 8006fb4:	4b68      	ldr	r3, [pc, #416]	; (8007158 <_dtoa_r+0x650>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fb26 	bl	800060c <__aeabi_dmul>
 8006fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc4:	f7f9 fda8 	bl	8000b18 <__aeabi_dcmpge>
 8006fc8:	9e04      	ldr	r6, [sp, #16]
 8006fca:	4637      	mov	r7, r6
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f040 8245 	bne.w	800745c <_dtoa_r+0x954>
 8006fd2:	9d00      	ldr	r5, [sp, #0]
 8006fd4:	2331      	movs	r3, #49	; 0x31
 8006fd6:	f805 3b01 	strb.w	r3, [r5], #1
 8006fda:	f10b 0b01 	add.w	fp, fp, #1
 8006fde:	e241      	b.n	8007464 <_dtoa_r+0x95c>
 8006fe0:	07f2      	lsls	r2, r6, #31
 8006fe2:	d505      	bpl.n	8006ff0 <_dtoa_r+0x4e8>
 8006fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe8:	f7f9 fb10 	bl	800060c <__aeabi_dmul>
 8006fec:	3501      	adds	r5, #1
 8006fee:	2301      	movs	r3, #1
 8006ff0:	1076      	asrs	r6, r6, #1
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	e773      	b.n	8006ede <_dtoa_r+0x3d6>
 8006ff6:	2502      	movs	r5, #2
 8006ff8:	e775      	b.n	8006ee6 <_dtoa_r+0x3de>
 8006ffa:	9e04      	ldr	r6, [sp, #16]
 8006ffc:	465f      	mov	r7, fp
 8006ffe:	e792      	b.n	8006f26 <_dtoa_r+0x41e>
 8007000:	9900      	ldr	r1, [sp, #0]
 8007002:	4b50      	ldr	r3, [pc, #320]	; (8007144 <_dtoa_r+0x63c>)
 8007004:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007008:	4431      	add	r1, r6
 800700a:	9102      	str	r1, [sp, #8]
 800700c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700e:	eeb0 9a47 	vmov.f32	s18, s14
 8007012:	eef0 9a67 	vmov.f32	s19, s15
 8007016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800701a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701e:	2900      	cmp	r1, #0
 8007020:	d044      	beq.n	80070ac <_dtoa_r+0x5a4>
 8007022:	494e      	ldr	r1, [pc, #312]	; (800715c <_dtoa_r+0x654>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 fc1b 	bl	8000860 <__aeabi_ddiv>
 800702a:	ec53 2b19 	vmov	r2, r3, d9
 800702e:	f7f9 f935 	bl	800029c <__aeabi_dsub>
 8007032:	9d00      	ldr	r5, [sp, #0]
 8007034:	ec41 0b19 	vmov	d9, r0, r1
 8007038:	4649      	mov	r1, r9
 800703a:	4640      	mov	r0, r8
 800703c:	f7f9 fd96 	bl	8000b6c <__aeabi_d2iz>
 8007040:	4606      	mov	r6, r0
 8007042:	f7f9 fa79 	bl	8000538 <__aeabi_i2d>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 f925 	bl	800029c <__aeabi_dsub>
 8007052:	3630      	adds	r6, #48	; 0x30
 8007054:	f805 6b01 	strb.w	r6, [r5], #1
 8007058:	ec53 2b19 	vmov	r2, r3, d9
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	f7f9 fd46 	bl	8000af0 <__aeabi_dcmplt>
 8007064:	2800      	cmp	r0, #0
 8007066:	d164      	bne.n	8007132 <_dtoa_r+0x62a>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	4937      	ldr	r1, [pc, #220]	; (800714c <_dtoa_r+0x644>)
 800706e:	2000      	movs	r0, #0
 8007070:	f7f9 f914 	bl	800029c <__aeabi_dsub>
 8007074:	ec53 2b19 	vmov	r2, r3, d9
 8007078:	f7f9 fd3a 	bl	8000af0 <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 80b6 	bne.w	80071ee <_dtoa_r+0x6e6>
 8007082:	9b02      	ldr	r3, [sp, #8]
 8007084:	429d      	cmp	r5, r3
 8007086:	f43f af7c 	beq.w	8006f82 <_dtoa_r+0x47a>
 800708a:	4b31      	ldr	r3, [pc, #196]	; (8007150 <_dtoa_r+0x648>)
 800708c:	ec51 0b19 	vmov	r0, r1, d9
 8007090:	2200      	movs	r2, #0
 8007092:	f7f9 fabb 	bl	800060c <__aeabi_dmul>
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <_dtoa_r+0x648>)
 8007098:	ec41 0b19 	vmov	d9, r0, r1
 800709c:	2200      	movs	r2, #0
 800709e:	4640      	mov	r0, r8
 80070a0:	4649      	mov	r1, r9
 80070a2:	f7f9 fab3 	bl	800060c <__aeabi_dmul>
 80070a6:	4680      	mov	r8, r0
 80070a8:	4689      	mov	r9, r1
 80070aa:	e7c5      	b.n	8007038 <_dtoa_r+0x530>
 80070ac:	ec51 0b17 	vmov	r0, r1, d7
 80070b0:	f7f9 faac 	bl	800060c <__aeabi_dmul>
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	9d00      	ldr	r5, [sp, #0]
 80070b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80070ba:	ec41 0b19 	vmov	d9, r0, r1
 80070be:	4649      	mov	r1, r9
 80070c0:	4640      	mov	r0, r8
 80070c2:	f7f9 fd53 	bl	8000b6c <__aeabi_d2iz>
 80070c6:	4606      	mov	r6, r0
 80070c8:	f7f9 fa36 	bl	8000538 <__aeabi_i2d>
 80070cc:	3630      	adds	r6, #48	; 0x30
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4640      	mov	r0, r8
 80070d4:	4649      	mov	r1, r9
 80070d6:	f7f9 f8e1 	bl	800029c <__aeabi_dsub>
 80070da:	f805 6b01 	strb.w	r6, [r5], #1
 80070de:	9b02      	ldr	r3, [sp, #8]
 80070e0:	429d      	cmp	r5, r3
 80070e2:	4680      	mov	r8, r0
 80070e4:	4689      	mov	r9, r1
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	d124      	bne.n	8007136 <_dtoa_r+0x62e>
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <_dtoa_r+0x654>)
 80070ee:	ec51 0b19 	vmov	r0, r1, d9
 80070f2:	f7f9 f8d5 	bl	80002a0 <__adddf3>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fd15 	bl	8000b2c <__aeabi_dcmpgt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d173      	bne.n	80071ee <_dtoa_r+0x6e6>
 8007106:	ec53 2b19 	vmov	r2, r3, d9
 800710a:	4914      	ldr	r1, [pc, #80]	; (800715c <_dtoa_r+0x654>)
 800710c:	2000      	movs	r0, #0
 800710e:	f7f9 f8c5 	bl	800029c <__aeabi_dsub>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 fce9 	bl	8000af0 <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	f43f af2f 	beq.w	8006f82 <_dtoa_r+0x47a>
 8007124:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007126:	1e6b      	subs	r3, r5, #1
 8007128:	930f      	str	r3, [sp, #60]	; 0x3c
 800712a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d0f8      	beq.n	8007124 <_dtoa_r+0x61c>
 8007132:	46bb      	mov	fp, r7
 8007134:	e04a      	b.n	80071cc <_dtoa_r+0x6c4>
 8007136:	4b06      	ldr	r3, [pc, #24]	; (8007150 <_dtoa_r+0x648>)
 8007138:	f7f9 fa68 	bl	800060c <__aeabi_dmul>
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	e7bd      	b.n	80070be <_dtoa_r+0x5b6>
 8007142:	bf00      	nop
 8007144:	0800a648 	.word	0x0800a648
 8007148:	0800a620 	.word	0x0800a620
 800714c:	3ff00000 	.word	0x3ff00000
 8007150:	40240000 	.word	0x40240000
 8007154:	401c0000 	.word	0x401c0000
 8007158:	40140000 	.word	0x40140000
 800715c:	3fe00000 	.word	0x3fe00000
 8007160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007164:	9d00      	ldr	r5, [sp, #0]
 8007166:	4642      	mov	r2, r8
 8007168:	464b      	mov	r3, r9
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	f7f9 fb77 	bl	8000860 <__aeabi_ddiv>
 8007172:	f7f9 fcfb 	bl	8000b6c <__aeabi_d2iz>
 8007176:	9001      	str	r0, [sp, #4]
 8007178:	f7f9 f9de 	bl	8000538 <__aeabi_i2d>
 800717c:	4642      	mov	r2, r8
 800717e:	464b      	mov	r3, r9
 8007180:	f7f9 fa44 	bl	800060c <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4630      	mov	r0, r6
 800718a:	4639      	mov	r1, r7
 800718c:	f7f9 f886 	bl	800029c <__aeabi_dsub>
 8007190:	9e01      	ldr	r6, [sp, #4]
 8007192:	9f04      	ldr	r7, [sp, #16]
 8007194:	3630      	adds	r6, #48	; 0x30
 8007196:	f805 6b01 	strb.w	r6, [r5], #1
 800719a:	9e00      	ldr	r6, [sp, #0]
 800719c:	1bae      	subs	r6, r5, r6
 800719e:	42b7      	cmp	r7, r6
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	d134      	bne.n	8007210 <_dtoa_r+0x708>
 80071a6:	f7f9 f87b 	bl	80002a0 <__adddf3>
 80071aa:	4642      	mov	r2, r8
 80071ac:	464b      	mov	r3, r9
 80071ae:	4606      	mov	r6, r0
 80071b0:	460f      	mov	r7, r1
 80071b2:	f7f9 fcbb 	bl	8000b2c <__aeabi_dcmpgt>
 80071b6:	b9c8      	cbnz	r0, 80071ec <_dtoa_r+0x6e4>
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fc8c 	bl	8000adc <__aeabi_dcmpeq>
 80071c4:	b110      	cbz	r0, 80071cc <_dtoa_r+0x6c4>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	07db      	lsls	r3, r3, #31
 80071ca:	d40f      	bmi.n	80071ec <_dtoa_r+0x6e4>
 80071cc:	4651      	mov	r1, sl
 80071ce:	4620      	mov	r0, r4
 80071d0:	f001 f8f0 	bl	80083b4 <_Bfree>
 80071d4:	2300      	movs	r3, #0
 80071d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071d8:	702b      	strb	r3, [r5, #0]
 80071da:	f10b 0301 	add.w	r3, fp, #1
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f ace2 	beq.w	8006bac <_dtoa_r+0xa4>
 80071e8:	601d      	str	r5, [r3, #0]
 80071ea:	e4df      	b.n	8006bac <_dtoa_r+0xa4>
 80071ec:	465f      	mov	r7, fp
 80071ee:	462b      	mov	r3, r5
 80071f0:	461d      	mov	r5, r3
 80071f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f6:	2a39      	cmp	r2, #57	; 0x39
 80071f8:	d106      	bne.n	8007208 <_dtoa_r+0x700>
 80071fa:	9a00      	ldr	r2, [sp, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d1f7      	bne.n	80071f0 <_dtoa_r+0x6e8>
 8007200:	9900      	ldr	r1, [sp, #0]
 8007202:	2230      	movs	r2, #48	; 0x30
 8007204:	3701      	adds	r7, #1
 8007206:	700a      	strb	r2, [r1, #0]
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	3201      	adds	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e790      	b.n	8007132 <_dtoa_r+0x62a>
 8007210:	4ba3      	ldr	r3, [pc, #652]	; (80074a0 <_dtoa_r+0x998>)
 8007212:	2200      	movs	r2, #0
 8007214:	f7f9 f9fa 	bl	800060c <__aeabi_dmul>
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	4606      	mov	r6, r0
 800721e:	460f      	mov	r7, r1
 8007220:	f7f9 fc5c 	bl	8000adc <__aeabi_dcmpeq>
 8007224:	2800      	cmp	r0, #0
 8007226:	d09e      	beq.n	8007166 <_dtoa_r+0x65e>
 8007228:	e7d0      	b.n	80071cc <_dtoa_r+0x6c4>
 800722a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800722c:	2a00      	cmp	r2, #0
 800722e:	f000 80ca 	beq.w	80073c6 <_dtoa_r+0x8be>
 8007232:	9a07      	ldr	r2, [sp, #28]
 8007234:	2a01      	cmp	r2, #1
 8007236:	f300 80ad 	bgt.w	8007394 <_dtoa_r+0x88c>
 800723a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800723c:	2a00      	cmp	r2, #0
 800723e:	f000 80a5 	beq.w	800738c <_dtoa_r+0x884>
 8007242:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007246:	9e08      	ldr	r6, [sp, #32]
 8007248:	9d05      	ldr	r5, [sp, #20]
 800724a:	9a05      	ldr	r2, [sp, #20]
 800724c:	441a      	add	r2, r3
 800724e:	9205      	str	r2, [sp, #20]
 8007250:	9a06      	ldr	r2, [sp, #24]
 8007252:	2101      	movs	r1, #1
 8007254:	441a      	add	r2, r3
 8007256:	4620      	mov	r0, r4
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	f001 f9ab 	bl	80085b4 <__i2b>
 800725e:	4607      	mov	r7, r0
 8007260:	b165      	cbz	r5, 800727c <_dtoa_r+0x774>
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd09      	ble.n	800727c <_dtoa_r+0x774>
 8007268:	42ab      	cmp	r3, r5
 800726a:	9a05      	ldr	r2, [sp, #20]
 800726c:	bfa8      	it	ge
 800726e:	462b      	movge	r3, r5
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	9205      	str	r2, [sp, #20]
 8007274:	9a06      	ldr	r2, [sp, #24]
 8007276:	1aed      	subs	r5, r5, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	b1f3      	cbz	r3, 80072be <_dtoa_r+0x7b6>
 8007280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80a3 	beq.w	80073ce <_dtoa_r+0x8c6>
 8007288:	2e00      	cmp	r6, #0
 800728a:	dd10      	ble.n	80072ae <_dtoa_r+0x7a6>
 800728c:	4639      	mov	r1, r7
 800728e:	4632      	mov	r2, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f001 fa4f 	bl	8008734 <__pow5mult>
 8007296:	4652      	mov	r2, sl
 8007298:	4601      	mov	r1, r0
 800729a:	4607      	mov	r7, r0
 800729c:	4620      	mov	r0, r4
 800729e:	f001 f99f 	bl	80085e0 <__multiply>
 80072a2:	4651      	mov	r1, sl
 80072a4:	4680      	mov	r8, r0
 80072a6:	4620      	mov	r0, r4
 80072a8:	f001 f884 	bl	80083b4 <_Bfree>
 80072ac:	46c2      	mov	sl, r8
 80072ae:	9b08      	ldr	r3, [sp, #32]
 80072b0:	1b9a      	subs	r2, r3, r6
 80072b2:	d004      	beq.n	80072be <_dtoa_r+0x7b6>
 80072b4:	4651      	mov	r1, sl
 80072b6:	4620      	mov	r0, r4
 80072b8:	f001 fa3c 	bl	8008734 <__pow5mult>
 80072bc:	4682      	mov	sl, r0
 80072be:	2101      	movs	r1, #1
 80072c0:	4620      	mov	r0, r4
 80072c2:	f001 f977 	bl	80085b4 <__i2b>
 80072c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	4606      	mov	r6, r0
 80072cc:	f340 8081 	ble.w	80073d2 <_dtoa_r+0x8ca>
 80072d0:	461a      	mov	r2, r3
 80072d2:	4601      	mov	r1, r0
 80072d4:	4620      	mov	r0, r4
 80072d6:	f001 fa2d 	bl	8008734 <__pow5mult>
 80072da:	9b07      	ldr	r3, [sp, #28]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	4606      	mov	r6, r0
 80072e0:	dd7a      	ble.n	80073d8 <_dtoa_r+0x8d0>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	6933      	ldr	r3, [r6, #16]
 80072e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072ec:	6918      	ldr	r0, [r3, #16]
 80072ee:	f001 f913 	bl	8008518 <__hi0bits>
 80072f2:	f1c0 0020 	rsb	r0, r0, #32
 80072f6:	9b06      	ldr	r3, [sp, #24]
 80072f8:	4418      	add	r0, r3
 80072fa:	f010 001f 	ands.w	r0, r0, #31
 80072fe:	f000 8094 	beq.w	800742a <_dtoa_r+0x922>
 8007302:	f1c0 0320 	rsb	r3, r0, #32
 8007306:	2b04      	cmp	r3, #4
 8007308:	f340 8085 	ble.w	8007416 <_dtoa_r+0x90e>
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	f1c0 001c 	rsb	r0, r0, #28
 8007312:	4403      	add	r3, r0
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	9b06      	ldr	r3, [sp, #24]
 8007318:	4403      	add	r3, r0
 800731a:	4405      	add	r5, r0
 800731c:	9306      	str	r3, [sp, #24]
 800731e:	9b05      	ldr	r3, [sp, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	dd05      	ble.n	8007330 <_dtoa_r+0x828>
 8007324:	4651      	mov	r1, sl
 8007326:	461a      	mov	r2, r3
 8007328:	4620      	mov	r0, r4
 800732a:	f001 fa5d 	bl	80087e8 <__lshift>
 800732e:	4682      	mov	sl, r0
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dd05      	ble.n	8007342 <_dtoa_r+0x83a>
 8007336:	4631      	mov	r1, r6
 8007338:	461a      	mov	r2, r3
 800733a:	4620      	mov	r0, r4
 800733c:	f001 fa54 	bl	80087e8 <__lshift>
 8007340:	4606      	mov	r6, r0
 8007342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d072      	beq.n	800742e <_dtoa_r+0x926>
 8007348:	4631      	mov	r1, r6
 800734a:	4650      	mov	r0, sl
 800734c:	f001 fab8 	bl	80088c0 <__mcmp>
 8007350:	2800      	cmp	r0, #0
 8007352:	da6c      	bge.n	800742e <_dtoa_r+0x926>
 8007354:	2300      	movs	r3, #0
 8007356:	4651      	mov	r1, sl
 8007358:	220a      	movs	r2, #10
 800735a:	4620      	mov	r0, r4
 800735c:	f001 f84c 	bl	80083f8 <__multadd>
 8007360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007362:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007366:	4682      	mov	sl, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 81b0 	beq.w	80076ce <_dtoa_r+0xbc6>
 800736e:	2300      	movs	r3, #0
 8007370:	4639      	mov	r1, r7
 8007372:	220a      	movs	r2, #10
 8007374:	4620      	mov	r0, r4
 8007376:	f001 f83f 	bl	80083f8 <__multadd>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	4607      	mov	r7, r0
 8007380:	f300 8096 	bgt.w	80074b0 <_dtoa_r+0x9a8>
 8007384:	9b07      	ldr	r3, [sp, #28]
 8007386:	2b02      	cmp	r3, #2
 8007388:	dc59      	bgt.n	800743e <_dtoa_r+0x936>
 800738a:	e091      	b.n	80074b0 <_dtoa_r+0x9a8>
 800738c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800738e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007392:	e758      	b.n	8007246 <_dtoa_r+0x73e>
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	1e5e      	subs	r6, r3, #1
 8007398:	9b08      	ldr	r3, [sp, #32]
 800739a:	42b3      	cmp	r3, r6
 800739c:	bfbf      	itttt	lt
 800739e:	9b08      	ldrlt	r3, [sp, #32]
 80073a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80073a2:	9608      	strlt	r6, [sp, #32]
 80073a4:	1af3      	sublt	r3, r6, r3
 80073a6:	bfb4      	ite	lt
 80073a8:	18d2      	addlt	r2, r2, r3
 80073aa:	1b9e      	subge	r6, r3, r6
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	bfbc      	itt	lt
 80073b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80073b2:	2600      	movlt	r6, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb7      	itett	lt
 80073b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80073bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80073c0:	1a9d      	sublt	r5, r3, r2
 80073c2:	2300      	movlt	r3, #0
 80073c4:	e741      	b.n	800724a <_dtoa_r+0x742>
 80073c6:	9e08      	ldr	r6, [sp, #32]
 80073c8:	9d05      	ldr	r5, [sp, #20]
 80073ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073cc:	e748      	b.n	8007260 <_dtoa_r+0x758>
 80073ce:	9a08      	ldr	r2, [sp, #32]
 80073d0:	e770      	b.n	80072b4 <_dtoa_r+0x7ac>
 80073d2:	9b07      	ldr	r3, [sp, #28]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	dc19      	bgt.n	800740c <_dtoa_r+0x904>
 80073d8:	9b02      	ldr	r3, [sp, #8]
 80073da:	b9bb      	cbnz	r3, 800740c <_dtoa_r+0x904>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e2:	b99b      	cbnz	r3, 800740c <_dtoa_r+0x904>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073ea:	0d1b      	lsrs	r3, r3, #20
 80073ec:	051b      	lsls	r3, r3, #20
 80073ee:	b183      	cbz	r3, 8007412 <_dtoa_r+0x90a>
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	3301      	adds	r3, #1
 80073f4:	9305      	str	r3, [sp, #20]
 80073f6:	9b06      	ldr	r3, [sp, #24]
 80073f8:	3301      	adds	r3, #1
 80073fa:	9306      	str	r3, [sp, #24]
 80073fc:	f04f 0801 	mov.w	r8, #1
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	f47f af6f 	bne.w	80072e6 <_dtoa_r+0x7de>
 8007408:	2001      	movs	r0, #1
 800740a:	e774      	b.n	80072f6 <_dtoa_r+0x7ee>
 800740c:	f04f 0800 	mov.w	r8, #0
 8007410:	e7f6      	b.n	8007400 <_dtoa_r+0x8f8>
 8007412:	4698      	mov	r8, r3
 8007414:	e7f4      	b.n	8007400 <_dtoa_r+0x8f8>
 8007416:	d082      	beq.n	800731e <_dtoa_r+0x816>
 8007418:	9a05      	ldr	r2, [sp, #20]
 800741a:	331c      	adds	r3, #28
 800741c:	441a      	add	r2, r3
 800741e:	9205      	str	r2, [sp, #20]
 8007420:	9a06      	ldr	r2, [sp, #24]
 8007422:	441a      	add	r2, r3
 8007424:	441d      	add	r5, r3
 8007426:	9206      	str	r2, [sp, #24]
 8007428:	e779      	b.n	800731e <_dtoa_r+0x816>
 800742a:	4603      	mov	r3, r0
 800742c:	e7f4      	b.n	8007418 <_dtoa_r+0x910>
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc37      	bgt.n	80074a4 <_dtoa_r+0x99c>
 8007434:	9b07      	ldr	r3, [sp, #28]
 8007436:	2b02      	cmp	r3, #2
 8007438:	dd34      	ble.n	80074a4 <_dtoa_r+0x99c>
 800743a:	9b04      	ldr	r3, [sp, #16]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	b963      	cbnz	r3, 800745c <_dtoa_r+0x954>
 8007442:	4631      	mov	r1, r6
 8007444:	2205      	movs	r2, #5
 8007446:	4620      	mov	r0, r4
 8007448:	f000 ffd6 	bl	80083f8 <__multadd>
 800744c:	4601      	mov	r1, r0
 800744e:	4606      	mov	r6, r0
 8007450:	4650      	mov	r0, sl
 8007452:	f001 fa35 	bl	80088c0 <__mcmp>
 8007456:	2800      	cmp	r0, #0
 8007458:	f73f adbb 	bgt.w	8006fd2 <_dtoa_r+0x4ca>
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	9d00      	ldr	r5, [sp, #0]
 8007460:	ea6f 0b03 	mvn.w	fp, r3
 8007464:	f04f 0800 	mov.w	r8, #0
 8007468:	4631      	mov	r1, r6
 800746a:	4620      	mov	r0, r4
 800746c:	f000 ffa2 	bl	80083b4 <_Bfree>
 8007470:	2f00      	cmp	r7, #0
 8007472:	f43f aeab 	beq.w	80071cc <_dtoa_r+0x6c4>
 8007476:	f1b8 0f00 	cmp.w	r8, #0
 800747a:	d005      	beq.n	8007488 <_dtoa_r+0x980>
 800747c:	45b8      	cmp	r8, r7
 800747e:	d003      	beq.n	8007488 <_dtoa_r+0x980>
 8007480:	4641      	mov	r1, r8
 8007482:	4620      	mov	r0, r4
 8007484:	f000 ff96 	bl	80083b4 <_Bfree>
 8007488:	4639      	mov	r1, r7
 800748a:	4620      	mov	r0, r4
 800748c:	f000 ff92 	bl	80083b4 <_Bfree>
 8007490:	e69c      	b.n	80071cc <_dtoa_r+0x6c4>
 8007492:	2600      	movs	r6, #0
 8007494:	4637      	mov	r7, r6
 8007496:	e7e1      	b.n	800745c <_dtoa_r+0x954>
 8007498:	46bb      	mov	fp, r7
 800749a:	4637      	mov	r7, r6
 800749c:	e599      	b.n	8006fd2 <_dtoa_r+0x4ca>
 800749e:	bf00      	nop
 80074a0:	40240000 	.word	0x40240000
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80c8 	beq.w	800763c <_dtoa_r+0xb34>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	dd05      	ble.n	80074c0 <_dtoa_r+0x9b8>
 80074b4:	4639      	mov	r1, r7
 80074b6:	462a      	mov	r2, r5
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 f995 	bl	80087e8 <__lshift>
 80074be:	4607      	mov	r7, r0
 80074c0:	f1b8 0f00 	cmp.w	r8, #0
 80074c4:	d05b      	beq.n	800757e <_dtoa_r+0xa76>
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 ff33 	bl	8008334 <_Balloc>
 80074ce:	4605      	mov	r5, r0
 80074d0:	b928      	cbnz	r0, 80074de <_dtoa_r+0x9d6>
 80074d2:	4b83      	ldr	r3, [pc, #524]	; (80076e0 <_dtoa_r+0xbd8>)
 80074d4:	4602      	mov	r2, r0
 80074d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074da:	f7ff bb2e 	b.w	8006b3a <_dtoa_r+0x32>
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	3202      	adds	r2, #2
 80074e2:	0092      	lsls	r2, r2, #2
 80074e4:	f107 010c 	add.w	r1, r7, #12
 80074e8:	300c      	adds	r0, #12
 80074ea:	f7ff fa4d 	bl	8006988 <memcpy>
 80074ee:	2201      	movs	r2, #1
 80074f0:	4629      	mov	r1, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	f001 f978 	bl	80087e8 <__lshift>
 80074f8:	9b00      	ldr	r3, [sp, #0]
 80074fa:	3301      	adds	r3, #1
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007502:	4413      	add	r3, r2
 8007504:	9308      	str	r3, [sp, #32]
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	46b8      	mov	r8, r7
 800750e:	9306      	str	r3, [sp, #24]
 8007510:	4607      	mov	r7, r0
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	4631      	mov	r1, r6
 8007516:	3b01      	subs	r3, #1
 8007518:	4650      	mov	r0, sl
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	f7ff fa6a 	bl	80069f4 <quorem>
 8007520:	4641      	mov	r1, r8
 8007522:	9002      	str	r0, [sp, #8]
 8007524:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007528:	4650      	mov	r0, sl
 800752a:	f001 f9c9 	bl	80088c0 <__mcmp>
 800752e:	463a      	mov	r2, r7
 8007530:	9005      	str	r0, [sp, #20]
 8007532:	4631      	mov	r1, r6
 8007534:	4620      	mov	r0, r4
 8007536:	f001 f9df 	bl	80088f8 <__mdiff>
 800753a:	68c2      	ldr	r2, [r0, #12]
 800753c:	4605      	mov	r5, r0
 800753e:	bb02      	cbnz	r2, 8007582 <_dtoa_r+0xa7a>
 8007540:	4601      	mov	r1, r0
 8007542:	4650      	mov	r0, sl
 8007544:	f001 f9bc 	bl	80088c0 <__mcmp>
 8007548:	4602      	mov	r2, r0
 800754a:	4629      	mov	r1, r5
 800754c:	4620      	mov	r0, r4
 800754e:	9209      	str	r2, [sp, #36]	; 0x24
 8007550:	f000 ff30 	bl	80083b4 <_Bfree>
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007558:	9d04      	ldr	r5, [sp, #16]
 800755a:	ea43 0102 	orr.w	r1, r3, r2
 800755e:	9b06      	ldr	r3, [sp, #24]
 8007560:	4319      	orrs	r1, r3
 8007562:	d110      	bne.n	8007586 <_dtoa_r+0xa7e>
 8007564:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007568:	d029      	beq.n	80075be <_dtoa_r+0xab6>
 800756a:	9b05      	ldr	r3, [sp, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	dd02      	ble.n	8007576 <_dtoa_r+0xa6e>
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	f883 9000 	strb.w	r9, [r3]
 800757c:	e774      	b.n	8007468 <_dtoa_r+0x960>
 800757e:	4638      	mov	r0, r7
 8007580:	e7ba      	b.n	80074f8 <_dtoa_r+0x9f0>
 8007582:	2201      	movs	r2, #1
 8007584:	e7e1      	b.n	800754a <_dtoa_r+0xa42>
 8007586:	9b05      	ldr	r3, [sp, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	db04      	blt.n	8007596 <_dtoa_r+0xa8e>
 800758c:	9907      	ldr	r1, [sp, #28]
 800758e:	430b      	orrs	r3, r1
 8007590:	9906      	ldr	r1, [sp, #24]
 8007592:	430b      	orrs	r3, r1
 8007594:	d120      	bne.n	80075d8 <_dtoa_r+0xad0>
 8007596:	2a00      	cmp	r2, #0
 8007598:	dded      	ble.n	8007576 <_dtoa_r+0xa6e>
 800759a:	4651      	mov	r1, sl
 800759c:	2201      	movs	r2, #1
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 f922 	bl	80087e8 <__lshift>
 80075a4:	4631      	mov	r1, r6
 80075a6:	4682      	mov	sl, r0
 80075a8:	f001 f98a 	bl	80088c0 <__mcmp>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	dc03      	bgt.n	80075b8 <_dtoa_r+0xab0>
 80075b0:	d1e1      	bne.n	8007576 <_dtoa_r+0xa6e>
 80075b2:	f019 0f01 	tst.w	r9, #1
 80075b6:	d0de      	beq.n	8007576 <_dtoa_r+0xa6e>
 80075b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075bc:	d1d8      	bne.n	8007570 <_dtoa_r+0xa68>
 80075be:	9a01      	ldr	r2, [sp, #4]
 80075c0:	2339      	movs	r3, #57	; 0x39
 80075c2:	7013      	strb	r3, [r2, #0]
 80075c4:	462b      	mov	r3, r5
 80075c6:	461d      	mov	r5, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075ce:	2a39      	cmp	r2, #57	; 0x39
 80075d0:	d06c      	beq.n	80076ac <_dtoa_r+0xba4>
 80075d2:	3201      	adds	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	e747      	b.n	8007468 <_dtoa_r+0x960>
 80075d8:	2a00      	cmp	r2, #0
 80075da:	dd07      	ble.n	80075ec <_dtoa_r+0xae4>
 80075dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075e0:	d0ed      	beq.n	80075be <_dtoa_r+0xab6>
 80075e2:	9a01      	ldr	r2, [sp, #4]
 80075e4:	f109 0301 	add.w	r3, r9, #1
 80075e8:	7013      	strb	r3, [r2, #0]
 80075ea:	e73d      	b.n	8007468 <_dtoa_r+0x960>
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	9a08      	ldr	r2, [sp, #32]
 80075f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d043      	beq.n	8007680 <_dtoa_r+0xb78>
 80075f8:	4651      	mov	r1, sl
 80075fa:	2300      	movs	r3, #0
 80075fc:	220a      	movs	r2, #10
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fefa 	bl	80083f8 <__multadd>
 8007604:	45b8      	cmp	r8, r7
 8007606:	4682      	mov	sl, r0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	f04f 020a 	mov.w	r2, #10
 8007610:	4641      	mov	r1, r8
 8007612:	4620      	mov	r0, r4
 8007614:	d107      	bne.n	8007626 <_dtoa_r+0xb1e>
 8007616:	f000 feef 	bl	80083f8 <__multadd>
 800761a:	4680      	mov	r8, r0
 800761c:	4607      	mov	r7, r0
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	3301      	adds	r3, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	e775      	b.n	8007512 <_dtoa_r+0xa0a>
 8007626:	f000 fee7 	bl	80083f8 <__multadd>
 800762a:	4639      	mov	r1, r7
 800762c:	4680      	mov	r8, r0
 800762e:	2300      	movs	r3, #0
 8007630:	220a      	movs	r2, #10
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fee0 	bl	80083f8 <__multadd>
 8007638:	4607      	mov	r7, r0
 800763a:	e7f0      	b.n	800761e <_dtoa_r+0xb16>
 800763c:	9b04      	ldr	r3, [sp, #16]
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	9d00      	ldr	r5, [sp, #0]
 8007642:	4631      	mov	r1, r6
 8007644:	4650      	mov	r0, sl
 8007646:	f7ff f9d5 	bl	80069f4 <quorem>
 800764a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	f805 9b01 	strb.w	r9, [r5], #1
 8007654:	1aea      	subs	r2, r5, r3
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	4293      	cmp	r3, r2
 800765a:	dd07      	ble.n	800766c <_dtoa_r+0xb64>
 800765c:	4651      	mov	r1, sl
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fec8 	bl	80083f8 <__multadd>
 8007668:	4682      	mov	sl, r0
 800766a:	e7ea      	b.n	8007642 <_dtoa_r+0xb3a>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfc8      	it	gt
 8007672:	461d      	movgt	r5, r3
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	bfd8      	it	le
 8007678:	2501      	movle	r5, #1
 800767a:	441d      	add	r5, r3
 800767c:	f04f 0800 	mov.w	r8, #0
 8007680:	4651      	mov	r1, sl
 8007682:	2201      	movs	r2, #1
 8007684:	4620      	mov	r0, r4
 8007686:	f001 f8af 	bl	80087e8 <__lshift>
 800768a:	4631      	mov	r1, r6
 800768c:	4682      	mov	sl, r0
 800768e:	f001 f917 	bl	80088c0 <__mcmp>
 8007692:	2800      	cmp	r0, #0
 8007694:	dc96      	bgt.n	80075c4 <_dtoa_r+0xabc>
 8007696:	d102      	bne.n	800769e <_dtoa_r+0xb96>
 8007698:	f019 0f01 	tst.w	r9, #1
 800769c:	d192      	bne.n	80075c4 <_dtoa_r+0xabc>
 800769e:	462b      	mov	r3, r5
 80076a0:	461d      	mov	r5, r3
 80076a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076a6:	2a30      	cmp	r2, #48	; 0x30
 80076a8:	d0fa      	beq.n	80076a0 <_dtoa_r+0xb98>
 80076aa:	e6dd      	b.n	8007468 <_dtoa_r+0x960>
 80076ac:	9a00      	ldr	r2, [sp, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d189      	bne.n	80075c6 <_dtoa_r+0xabe>
 80076b2:	f10b 0b01 	add.w	fp, fp, #1
 80076b6:	2331      	movs	r3, #49	; 0x31
 80076b8:	e796      	b.n	80075e8 <_dtoa_r+0xae0>
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <_dtoa_r+0xbdc>)
 80076bc:	f7ff ba99 	b.w	8006bf2 <_dtoa_r+0xea>
 80076c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f47f aa6d 	bne.w	8006ba2 <_dtoa_r+0x9a>
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <_dtoa_r+0xbe0>)
 80076ca:	f7ff ba92 	b.w	8006bf2 <_dtoa_r+0xea>
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dcb5      	bgt.n	8007640 <_dtoa_r+0xb38>
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	f73f aeb1 	bgt.w	800743e <_dtoa_r+0x936>
 80076dc:	e7b0      	b.n	8007640 <_dtoa_r+0xb38>
 80076de:	bf00      	nop
 80076e0:	0800a543 	.word	0x0800a543
 80076e4:	0800a2ac 	.word	0x0800a2ac
 80076e8:	0800a4de 	.word	0x0800a4de

080076ec <rshift>:
 80076ec:	6903      	ldr	r3, [r0, #16]
 80076ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80076fa:	f100 0414 	add.w	r4, r0, #20
 80076fe:	dd45      	ble.n	800778c <rshift+0xa0>
 8007700:	f011 011f 	ands.w	r1, r1, #31
 8007704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800770c:	d10c      	bne.n	8007728 <rshift+0x3c>
 800770e:	f100 0710 	add.w	r7, r0, #16
 8007712:	4629      	mov	r1, r5
 8007714:	42b1      	cmp	r1, r6
 8007716:	d334      	bcc.n	8007782 <rshift+0x96>
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	1eea      	subs	r2, r5, #3
 800771e:	4296      	cmp	r6, r2
 8007720:	bf38      	it	cc
 8007722:	2300      	movcc	r3, #0
 8007724:	4423      	add	r3, r4
 8007726:	e015      	b.n	8007754 <rshift+0x68>
 8007728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800772c:	f1c1 0820 	rsb	r8, r1, #32
 8007730:	40cf      	lsrs	r7, r1
 8007732:	f105 0e04 	add.w	lr, r5, #4
 8007736:	46a1      	mov	r9, r4
 8007738:	4576      	cmp	r6, lr
 800773a:	46f4      	mov	ip, lr
 800773c:	d815      	bhi.n	800776a <rshift+0x7e>
 800773e:	1a9a      	subs	r2, r3, r2
 8007740:	0092      	lsls	r2, r2, #2
 8007742:	3a04      	subs	r2, #4
 8007744:	3501      	adds	r5, #1
 8007746:	42ae      	cmp	r6, r5
 8007748:	bf38      	it	cc
 800774a:	2200      	movcc	r2, #0
 800774c:	18a3      	adds	r3, r4, r2
 800774e:	50a7      	str	r7, [r4, r2]
 8007750:	b107      	cbz	r7, 8007754 <rshift+0x68>
 8007752:	3304      	adds	r3, #4
 8007754:	1b1a      	subs	r2, r3, r4
 8007756:	42a3      	cmp	r3, r4
 8007758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800775c:	bf08      	it	eq
 800775e:	2300      	moveq	r3, #0
 8007760:	6102      	str	r2, [r0, #16]
 8007762:	bf08      	it	eq
 8007764:	6143      	streq	r3, [r0, #20]
 8007766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776a:	f8dc c000 	ldr.w	ip, [ip]
 800776e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007772:	ea4c 0707 	orr.w	r7, ip, r7
 8007776:	f849 7b04 	str.w	r7, [r9], #4
 800777a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800777e:	40cf      	lsrs	r7, r1
 8007780:	e7da      	b.n	8007738 <rshift+0x4c>
 8007782:	f851 cb04 	ldr.w	ip, [r1], #4
 8007786:	f847 cf04 	str.w	ip, [r7, #4]!
 800778a:	e7c3      	b.n	8007714 <rshift+0x28>
 800778c:	4623      	mov	r3, r4
 800778e:	e7e1      	b.n	8007754 <rshift+0x68>

08007790 <__hexdig_fun>:
 8007790:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007794:	2b09      	cmp	r3, #9
 8007796:	d802      	bhi.n	800779e <__hexdig_fun+0xe>
 8007798:	3820      	subs	r0, #32
 800779a:	b2c0      	uxtb	r0, r0
 800779c:	4770      	bx	lr
 800779e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077a2:	2b05      	cmp	r3, #5
 80077a4:	d801      	bhi.n	80077aa <__hexdig_fun+0x1a>
 80077a6:	3847      	subs	r0, #71	; 0x47
 80077a8:	e7f7      	b.n	800779a <__hexdig_fun+0xa>
 80077aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d801      	bhi.n	80077b6 <__hexdig_fun+0x26>
 80077b2:	3827      	subs	r0, #39	; 0x27
 80077b4:	e7f1      	b.n	800779a <__hexdig_fun+0xa>
 80077b6:	2000      	movs	r0, #0
 80077b8:	4770      	bx	lr
	...

080077bc <__gethex>:
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	4617      	mov	r7, r2
 80077c2:	680a      	ldr	r2, [r1, #0]
 80077c4:	b085      	sub	sp, #20
 80077c6:	f102 0b02 	add.w	fp, r2, #2
 80077ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80077ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80077d2:	4681      	mov	r9, r0
 80077d4:	468a      	mov	sl, r1
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	32fe      	adds	r2, #254	; 0xfe
 80077da:	eb02 030b 	add.w	r3, r2, fp
 80077de:	46d8      	mov	r8, fp
 80077e0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	2830      	cmp	r0, #48	; 0x30
 80077e8:	d0f7      	beq.n	80077da <__gethex+0x1e>
 80077ea:	f7ff ffd1 	bl	8007790 <__hexdig_fun>
 80077ee:	4604      	mov	r4, r0
 80077f0:	2800      	cmp	r0, #0
 80077f2:	d138      	bne.n	8007866 <__gethex+0xaa>
 80077f4:	49a7      	ldr	r1, [pc, #668]	; (8007a94 <__gethex+0x2d8>)
 80077f6:	2201      	movs	r2, #1
 80077f8:	4640      	mov	r0, r8
 80077fa:	f7ff f80b 	bl	8006814 <strncmp>
 80077fe:	4606      	mov	r6, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	d169      	bne.n	80078d8 <__gethex+0x11c>
 8007804:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007808:	465d      	mov	r5, fp
 800780a:	f7ff ffc1 	bl	8007790 <__hexdig_fun>
 800780e:	2800      	cmp	r0, #0
 8007810:	d064      	beq.n	80078dc <__gethex+0x120>
 8007812:	465a      	mov	r2, fp
 8007814:	7810      	ldrb	r0, [r2, #0]
 8007816:	2830      	cmp	r0, #48	; 0x30
 8007818:	4690      	mov	r8, r2
 800781a:	f102 0201 	add.w	r2, r2, #1
 800781e:	d0f9      	beq.n	8007814 <__gethex+0x58>
 8007820:	f7ff ffb6 	bl	8007790 <__hexdig_fun>
 8007824:	2301      	movs	r3, #1
 8007826:	fab0 f480 	clz	r4, r0
 800782a:	0964      	lsrs	r4, r4, #5
 800782c:	465e      	mov	r6, fp
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	4642      	mov	r2, r8
 8007832:	4615      	mov	r5, r2
 8007834:	3201      	adds	r2, #1
 8007836:	7828      	ldrb	r0, [r5, #0]
 8007838:	f7ff ffaa 	bl	8007790 <__hexdig_fun>
 800783c:	2800      	cmp	r0, #0
 800783e:	d1f8      	bne.n	8007832 <__gethex+0x76>
 8007840:	4994      	ldr	r1, [pc, #592]	; (8007a94 <__gethex+0x2d8>)
 8007842:	2201      	movs	r2, #1
 8007844:	4628      	mov	r0, r5
 8007846:	f7fe ffe5 	bl	8006814 <strncmp>
 800784a:	b978      	cbnz	r0, 800786c <__gethex+0xb0>
 800784c:	b946      	cbnz	r6, 8007860 <__gethex+0xa4>
 800784e:	1c6e      	adds	r6, r5, #1
 8007850:	4632      	mov	r2, r6
 8007852:	4615      	mov	r5, r2
 8007854:	3201      	adds	r2, #1
 8007856:	7828      	ldrb	r0, [r5, #0]
 8007858:	f7ff ff9a 	bl	8007790 <__hexdig_fun>
 800785c:	2800      	cmp	r0, #0
 800785e:	d1f8      	bne.n	8007852 <__gethex+0x96>
 8007860:	1b73      	subs	r3, r6, r5
 8007862:	009e      	lsls	r6, r3, #2
 8007864:	e004      	b.n	8007870 <__gethex+0xb4>
 8007866:	2400      	movs	r4, #0
 8007868:	4626      	mov	r6, r4
 800786a:	e7e1      	b.n	8007830 <__gethex+0x74>
 800786c:	2e00      	cmp	r6, #0
 800786e:	d1f7      	bne.n	8007860 <__gethex+0xa4>
 8007870:	782b      	ldrb	r3, [r5, #0]
 8007872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007876:	2b50      	cmp	r3, #80	; 0x50
 8007878:	d13d      	bne.n	80078f6 <__gethex+0x13a>
 800787a:	786b      	ldrb	r3, [r5, #1]
 800787c:	2b2b      	cmp	r3, #43	; 0x2b
 800787e:	d02f      	beq.n	80078e0 <__gethex+0x124>
 8007880:	2b2d      	cmp	r3, #45	; 0x2d
 8007882:	d031      	beq.n	80078e8 <__gethex+0x12c>
 8007884:	1c69      	adds	r1, r5, #1
 8007886:	f04f 0b00 	mov.w	fp, #0
 800788a:	7808      	ldrb	r0, [r1, #0]
 800788c:	f7ff ff80 	bl	8007790 <__hexdig_fun>
 8007890:	1e42      	subs	r2, r0, #1
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	2a18      	cmp	r2, #24
 8007896:	d82e      	bhi.n	80078f6 <__gethex+0x13a>
 8007898:	f1a0 0210 	sub.w	r2, r0, #16
 800789c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078a0:	f7ff ff76 	bl	8007790 <__hexdig_fun>
 80078a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80078a8:	fa5f fc8c 	uxtb.w	ip, ip
 80078ac:	f1bc 0f18 	cmp.w	ip, #24
 80078b0:	d91d      	bls.n	80078ee <__gethex+0x132>
 80078b2:	f1bb 0f00 	cmp.w	fp, #0
 80078b6:	d000      	beq.n	80078ba <__gethex+0xfe>
 80078b8:	4252      	negs	r2, r2
 80078ba:	4416      	add	r6, r2
 80078bc:	f8ca 1000 	str.w	r1, [sl]
 80078c0:	b1dc      	cbz	r4, 80078fa <__gethex+0x13e>
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bf14      	ite	ne
 80078c8:	f04f 0800 	movne.w	r8, #0
 80078cc:	f04f 0806 	moveq.w	r8, #6
 80078d0:	4640      	mov	r0, r8
 80078d2:	b005      	add	sp, #20
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	4645      	mov	r5, r8
 80078da:	4626      	mov	r6, r4
 80078dc:	2401      	movs	r4, #1
 80078de:	e7c7      	b.n	8007870 <__gethex+0xb4>
 80078e0:	f04f 0b00 	mov.w	fp, #0
 80078e4:	1ca9      	adds	r1, r5, #2
 80078e6:	e7d0      	b.n	800788a <__gethex+0xce>
 80078e8:	f04f 0b01 	mov.w	fp, #1
 80078ec:	e7fa      	b.n	80078e4 <__gethex+0x128>
 80078ee:	230a      	movs	r3, #10
 80078f0:	fb03 0002 	mla	r0, r3, r2, r0
 80078f4:	e7d0      	b.n	8007898 <__gethex+0xdc>
 80078f6:	4629      	mov	r1, r5
 80078f8:	e7e0      	b.n	80078bc <__gethex+0x100>
 80078fa:	eba5 0308 	sub.w	r3, r5, r8
 80078fe:	3b01      	subs	r3, #1
 8007900:	4621      	mov	r1, r4
 8007902:	2b07      	cmp	r3, #7
 8007904:	dc0a      	bgt.n	800791c <__gethex+0x160>
 8007906:	4648      	mov	r0, r9
 8007908:	f000 fd14 	bl	8008334 <_Balloc>
 800790c:	4604      	mov	r4, r0
 800790e:	b940      	cbnz	r0, 8007922 <__gethex+0x166>
 8007910:	4b61      	ldr	r3, [pc, #388]	; (8007a98 <__gethex+0x2dc>)
 8007912:	4602      	mov	r2, r0
 8007914:	21e4      	movs	r1, #228	; 0xe4
 8007916:	4861      	ldr	r0, [pc, #388]	; (8007a9c <__gethex+0x2e0>)
 8007918:	f7ff f84e 	bl	80069b8 <__assert_func>
 800791c:	3101      	adds	r1, #1
 800791e:	105b      	asrs	r3, r3, #1
 8007920:	e7ef      	b.n	8007902 <__gethex+0x146>
 8007922:	f100 0a14 	add.w	sl, r0, #20
 8007926:	2300      	movs	r3, #0
 8007928:	495a      	ldr	r1, [pc, #360]	; (8007a94 <__gethex+0x2d8>)
 800792a:	f8cd a004 	str.w	sl, [sp, #4]
 800792e:	469b      	mov	fp, r3
 8007930:	45a8      	cmp	r8, r5
 8007932:	d342      	bcc.n	80079ba <__gethex+0x1fe>
 8007934:	9801      	ldr	r0, [sp, #4]
 8007936:	f840 bb04 	str.w	fp, [r0], #4
 800793a:	eba0 000a 	sub.w	r0, r0, sl
 800793e:	1080      	asrs	r0, r0, #2
 8007940:	6120      	str	r0, [r4, #16]
 8007942:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007946:	4658      	mov	r0, fp
 8007948:	f000 fde6 	bl	8008518 <__hi0bits>
 800794c:	683d      	ldr	r5, [r7, #0]
 800794e:	eba8 0000 	sub.w	r0, r8, r0
 8007952:	42a8      	cmp	r0, r5
 8007954:	dd59      	ble.n	8007a0a <__gethex+0x24e>
 8007956:	eba0 0805 	sub.w	r8, r0, r5
 800795a:	4641      	mov	r1, r8
 800795c:	4620      	mov	r0, r4
 800795e:	f001 f975 	bl	8008c4c <__any_on>
 8007962:	4683      	mov	fp, r0
 8007964:	b1b8      	cbz	r0, 8007996 <__gethex+0x1da>
 8007966:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800796a:	1159      	asrs	r1, r3, #5
 800796c:	f003 021f 	and.w	r2, r3, #31
 8007970:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007974:	f04f 0b01 	mov.w	fp, #1
 8007978:	fa0b f202 	lsl.w	r2, fp, r2
 800797c:	420a      	tst	r2, r1
 800797e:	d00a      	beq.n	8007996 <__gethex+0x1da>
 8007980:	455b      	cmp	r3, fp
 8007982:	dd06      	ble.n	8007992 <__gethex+0x1d6>
 8007984:	f1a8 0102 	sub.w	r1, r8, #2
 8007988:	4620      	mov	r0, r4
 800798a:	f001 f95f 	bl	8008c4c <__any_on>
 800798e:	2800      	cmp	r0, #0
 8007990:	d138      	bne.n	8007a04 <__gethex+0x248>
 8007992:	f04f 0b02 	mov.w	fp, #2
 8007996:	4641      	mov	r1, r8
 8007998:	4620      	mov	r0, r4
 800799a:	f7ff fea7 	bl	80076ec <rshift>
 800799e:	4446      	add	r6, r8
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	42b3      	cmp	r3, r6
 80079a4:	da41      	bge.n	8007a2a <__gethex+0x26e>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4648      	mov	r0, r9
 80079aa:	f000 fd03 	bl	80083b4 <_Bfree>
 80079ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b0:	2300      	movs	r3, #0
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80079b8:	e78a      	b.n	80078d0 <__gethex+0x114>
 80079ba:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80079be:	2a2e      	cmp	r2, #46	; 0x2e
 80079c0:	d014      	beq.n	80079ec <__gethex+0x230>
 80079c2:	2b20      	cmp	r3, #32
 80079c4:	d106      	bne.n	80079d4 <__gethex+0x218>
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	f843 bb04 	str.w	fp, [r3], #4
 80079cc:	f04f 0b00 	mov.w	fp, #0
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	465b      	mov	r3, fp
 80079d4:	7828      	ldrb	r0, [r5, #0]
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	f7ff feda 	bl	8007790 <__hexdig_fun>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	f000 000f 	and.w	r0, r0, #15
 80079e2:	4098      	lsls	r0, r3
 80079e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80079e8:	3304      	adds	r3, #4
 80079ea:	e7a1      	b.n	8007930 <__gethex+0x174>
 80079ec:	45a8      	cmp	r8, r5
 80079ee:	d8e8      	bhi.n	80079c2 <__gethex+0x206>
 80079f0:	2201      	movs	r2, #1
 80079f2:	4628      	mov	r0, r5
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	f7fe ff0d 	bl	8006814 <strncmp>
 80079fa:	4926      	ldr	r1, [pc, #152]	; (8007a94 <__gethex+0x2d8>)
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d1df      	bne.n	80079c2 <__gethex+0x206>
 8007a02:	e795      	b.n	8007930 <__gethex+0x174>
 8007a04:	f04f 0b03 	mov.w	fp, #3
 8007a08:	e7c5      	b.n	8007996 <__gethex+0x1da>
 8007a0a:	da0b      	bge.n	8007a24 <__gethex+0x268>
 8007a0c:	eba5 0800 	sub.w	r8, r5, r0
 8007a10:	4621      	mov	r1, r4
 8007a12:	4642      	mov	r2, r8
 8007a14:	4648      	mov	r0, r9
 8007a16:	f000 fee7 	bl	80087e8 <__lshift>
 8007a1a:	eba6 0608 	sub.w	r6, r6, r8
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f100 0a14 	add.w	sl, r0, #20
 8007a24:	f04f 0b00 	mov.w	fp, #0
 8007a28:	e7ba      	b.n	80079a0 <__gethex+0x1e4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	42b3      	cmp	r3, r6
 8007a2e:	dd73      	ble.n	8007b18 <__gethex+0x35c>
 8007a30:	1b9e      	subs	r6, r3, r6
 8007a32:	42b5      	cmp	r5, r6
 8007a34:	dc34      	bgt.n	8007aa0 <__gethex+0x2e4>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d023      	beq.n	8007a84 <__gethex+0x2c8>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d025      	beq.n	8007a8c <__gethex+0x2d0>
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d115      	bne.n	8007a70 <__gethex+0x2b4>
 8007a44:	42b5      	cmp	r5, r6
 8007a46:	d113      	bne.n	8007a70 <__gethex+0x2b4>
 8007a48:	2d01      	cmp	r5, #1
 8007a4a:	d10b      	bne.n	8007a64 <__gethex+0x2a8>
 8007a4c:	9a02      	ldr	r2, [sp, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	2301      	movs	r3, #1
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	f8ca 3000 	str.w	r3, [sl]
 8007a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a5c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007a60:	601c      	str	r4, [r3, #0]
 8007a62:	e735      	b.n	80078d0 <__gethex+0x114>
 8007a64:	1e69      	subs	r1, r5, #1
 8007a66:	4620      	mov	r0, r4
 8007a68:	f001 f8f0 	bl	8008c4c <__any_on>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d1ed      	bne.n	8007a4c <__gethex+0x290>
 8007a70:	4621      	mov	r1, r4
 8007a72:	4648      	mov	r0, r9
 8007a74:	f000 fc9e 	bl	80083b4 <_Bfree>
 8007a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007a82:	e725      	b.n	80078d0 <__gethex+0x114>
 8007a84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f2      	bne.n	8007a70 <__gethex+0x2b4>
 8007a8a:	e7df      	b.n	8007a4c <__gethex+0x290>
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1dc      	bne.n	8007a4c <__gethex+0x290>
 8007a92:	e7ed      	b.n	8007a70 <__gethex+0x2b4>
 8007a94:	0800a2d0 	.word	0x0800a2d0
 8007a98:	0800a543 	.word	0x0800a543
 8007a9c:	0800a554 	.word	0x0800a554
 8007aa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007aa4:	f1bb 0f00 	cmp.w	fp, #0
 8007aa8:	d133      	bne.n	8007b12 <__gethex+0x356>
 8007aaa:	f1b8 0f00 	cmp.w	r8, #0
 8007aae:	d004      	beq.n	8007aba <__gethex+0x2fe>
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f001 f8ca 	bl	8008c4c <__any_on>
 8007ab8:	4683      	mov	fp, r0
 8007aba:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ac4:	f008 081f 	and.w	r8, r8, #31
 8007ac8:	fa03 f308 	lsl.w	r3, r3, r8
 8007acc:	4213      	tst	r3, r2
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	bf18      	it	ne
 8007ad4:	f04b 0b02 	orrne.w	fp, fp, #2
 8007ad8:	1bad      	subs	r5, r5, r6
 8007ada:	f7ff fe07 	bl	80076ec <rshift>
 8007ade:	687e      	ldr	r6, [r7, #4]
 8007ae0:	f04f 0802 	mov.w	r8, #2
 8007ae4:	f1bb 0f00 	cmp.w	fp, #0
 8007ae8:	d04a      	beq.n	8007b80 <__gethex+0x3c4>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d016      	beq.n	8007b1e <__gethex+0x362>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d018      	beq.n	8007b26 <__gethex+0x36a>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d109      	bne.n	8007b0c <__gethex+0x350>
 8007af8:	f01b 0f02 	tst.w	fp, #2
 8007afc:	d006      	beq.n	8007b0c <__gethex+0x350>
 8007afe:	f8da 3000 	ldr.w	r3, [sl]
 8007b02:	ea4b 0b03 	orr.w	fp, fp, r3
 8007b06:	f01b 0f01 	tst.w	fp, #1
 8007b0a:	d10f      	bne.n	8007b2c <__gethex+0x370>
 8007b0c:	f048 0810 	orr.w	r8, r8, #16
 8007b10:	e036      	b.n	8007b80 <__gethex+0x3c4>
 8007b12:	f04f 0b01 	mov.w	fp, #1
 8007b16:	e7d0      	b.n	8007aba <__gethex+0x2fe>
 8007b18:	f04f 0801 	mov.w	r8, #1
 8007b1c:	e7e2      	b.n	8007ae4 <__gethex+0x328>
 8007b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b20:	f1c3 0301 	rsb	r3, r3, #1
 8007b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0ef      	beq.n	8007b0c <__gethex+0x350>
 8007b2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b30:	f104 0214 	add.w	r2, r4, #20
 8007b34:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4694      	mov	ip, r2
 8007b42:	f852 1b04 	ldr.w	r1, [r2], #4
 8007b46:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007b4a:	d01e      	beq.n	8007b8a <__gethex+0x3ce>
 8007b4c:	3101      	adds	r1, #1
 8007b4e:	f8cc 1000 	str.w	r1, [ip]
 8007b52:	f1b8 0f02 	cmp.w	r8, #2
 8007b56:	f104 0214 	add.w	r2, r4, #20
 8007b5a:	d13d      	bne.n	8007bd8 <__gethex+0x41c>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	42ab      	cmp	r3, r5
 8007b62:	d10b      	bne.n	8007b7c <__gethex+0x3c0>
 8007b64:	1169      	asrs	r1, r5, #5
 8007b66:	2301      	movs	r3, #1
 8007b68:	f005 051f 	and.w	r5, r5, #31
 8007b6c:	fa03 f505 	lsl.w	r5, r3, r5
 8007b70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b74:	421d      	tst	r5, r3
 8007b76:	bf18      	it	ne
 8007b78:	f04f 0801 	movne.w	r8, #1
 8007b7c:	f048 0820 	orr.w	r8, r8, #32
 8007b80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b82:	601c      	str	r4, [r3, #0]
 8007b84:	9b02      	ldr	r3, [sp, #8]
 8007b86:	601e      	str	r6, [r3, #0]
 8007b88:	e6a2      	b.n	80078d0 <__gethex+0x114>
 8007b8a:	4290      	cmp	r0, r2
 8007b8c:	f842 3c04 	str.w	r3, [r2, #-4]
 8007b90:	d8d6      	bhi.n	8007b40 <__gethex+0x384>
 8007b92:	68a2      	ldr	r2, [r4, #8]
 8007b94:	4593      	cmp	fp, r2
 8007b96:	db17      	blt.n	8007bc8 <__gethex+0x40c>
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	f000 fbc9 	bl	8008334 <_Balloc>
 8007ba2:	4682      	mov	sl, r0
 8007ba4:	b918      	cbnz	r0, 8007bae <__gethex+0x3f2>
 8007ba6:	4b1b      	ldr	r3, [pc, #108]	; (8007c14 <__gethex+0x458>)
 8007ba8:	4602      	mov	r2, r0
 8007baa:	2184      	movs	r1, #132	; 0x84
 8007bac:	e6b3      	b.n	8007916 <__gethex+0x15a>
 8007bae:	6922      	ldr	r2, [r4, #16]
 8007bb0:	3202      	adds	r2, #2
 8007bb2:	f104 010c 	add.w	r1, r4, #12
 8007bb6:	0092      	lsls	r2, r2, #2
 8007bb8:	300c      	adds	r0, #12
 8007bba:	f7fe fee5 	bl	8006988 <memcpy>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 fbf7 	bl	80083b4 <_Bfree>
 8007bc6:	4654      	mov	r4, sl
 8007bc8:	6922      	ldr	r2, [r4, #16]
 8007bca:	1c51      	adds	r1, r2, #1
 8007bcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007bd0:	6121      	str	r1, [r4, #16]
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	6151      	str	r1, [r2, #20]
 8007bd6:	e7bc      	b.n	8007b52 <__gethex+0x396>
 8007bd8:	6921      	ldr	r1, [r4, #16]
 8007bda:	4559      	cmp	r1, fp
 8007bdc:	dd0b      	ble.n	8007bf6 <__gethex+0x43a>
 8007bde:	2101      	movs	r1, #1
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7ff fd83 	bl	80076ec <rshift>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3601      	adds	r6, #1
 8007bea:	42b3      	cmp	r3, r6
 8007bec:	f6ff aedb 	blt.w	80079a6 <__gethex+0x1ea>
 8007bf0:	f04f 0801 	mov.w	r8, #1
 8007bf4:	e7c2      	b.n	8007b7c <__gethex+0x3c0>
 8007bf6:	f015 051f 	ands.w	r5, r5, #31
 8007bfa:	d0f9      	beq.n	8007bf0 <__gethex+0x434>
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	441a      	add	r2, r3
 8007c00:	f1c5 0520 	rsb	r5, r5, #32
 8007c04:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007c08:	f000 fc86 	bl	8008518 <__hi0bits>
 8007c0c:	42a8      	cmp	r0, r5
 8007c0e:	dbe6      	blt.n	8007bde <__gethex+0x422>
 8007c10:	e7ee      	b.n	8007bf0 <__gethex+0x434>
 8007c12:	bf00      	nop
 8007c14:	0800a543 	.word	0x0800a543

08007c18 <L_shift>:
 8007c18:	f1c2 0208 	rsb	r2, r2, #8
 8007c1c:	0092      	lsls	r2, r2, #2
 8007c1e:	b570      	push	{r4, r5, r6, lr}
 8007c20:	f1c2 0620 	rsb	r6, r2, #32
 8007c24:	6843      	ldr	r3, [r0, #4]
 8007c26:	6804      	ldr	r4, [r0, #0]
 8007c28:	fa03 f506 	lsl.w	r5, r3, r6
 8007c2c:	432c      	orrs	r4, r5
 8007c2e:	40d3      	lsrs	r3, r2
 8007c30:	6004      	str	r4, [r0, #0]
 8007c32:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c36:	4288      	cmp	r0, r1
 8007c38:	d3f4      	bcc.n	8007c24 <L_shift+0xc>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}

08007c3c <__match>:
 8007c3c:	b530      	push	{r4, r5, lr}
 8007c3e:	6803      	ldr	r3, [r0, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c46:	b914      	cbnz	r4, 8007c4e <__match+0x12>
 8007c48:	6003      	str	r3, [r0, #0]
 8007c4a:	2001      	movs	r0, #1
 8007c4c:	bd30      	pop	{r4, r5, pc}
 8007c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c56:	2d19      	cmp	r5, #25
 8007c58:	bf98      	it	ls
 8007c5a:	3220      	addls	r2, #32
 8007c5c:	42a2      	cmp	r2, r4
 8007c5e:	d0f0      	beq.n	8007c42 <__match+0x6>
 8007c60:	2000      	movs	r0, #0
 8007c62:	e7f3      	b.n	8007c4c <__match+0x10>

08007c64 <__hexnan>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	680b      	ldr	r3, [r1, #0]
 8007c6a:	6801      	ldr	r1, [r0, #0]
 8007c6c:	115e      	asrs	r6, r3, #5
 8007c6e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c72:	f013 031f 	ands.w	r3, r3, #31
 8007c76:	b087      	sub	sp, #28
 8007c78:	bf18      	it	ne
 8007c7a:	3604      	addne	r6, #4
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	1f37      	subs	r7, r6, #4
 8007c80:	4682      	mov	sl, r0
 8007c82:	4690      	mov	r8, r2
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c8a:	46b9      	mov	r9, r7
 8007c8c:	463c      	mov	r4, r7
 8007c8e:	9502      	str	r5, [sp, #8]
 8007c90:	46ab      	mov	fp, r5
 8007c92:	784a      	ldrb	r2, [r1, #1]
 8007c94:	1c4b      	adds	r3, r1, #1
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	b342      	cbz	r2, 8007cec <__hexnan+0x88>
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	9105      	str	r1, [sp, #20]
 8007c9e:	9204      	str	r2, [sp, #16]
 8007ca0:	f7ff fd76 	bl	8007790 <__hexdig_fun>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d14f      	bne.n	8007d48 <__hexnan+0xe4>
 8007ca8:	9a04      	ldr	r2, [sp, #16]
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	2a20      	cmp	r2, #32
 8007cae:	d818      	bhi.n	8007ce2 <__hexnan+0x7e>
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	459b      	cmp	fp, r3
 8007cb4:	dd13      	ble.n	8007cde <__hexnan+0x7a>
 8007cb6:	454c      	cmp	r4, r9
 8007cb8:	d206      	bcs.n	8007cc8 <__hexnan+0x64>
 8007cba:	2d07      	cmp	r5, #7
 8007cbc:	dc04      	bgt.n	8007cc8 <__hexnan+0x64>
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7ff ffa8 	bl	8007c18 <L_shift>
 8007cc8:	4544      	cmp	r4, r8
 8007cca:	d950      	bls.n	8007d6e <__hexnan+0x10a>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f1a4 0904 	sub.w	r9, r4, #4
 8007cd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cd6:	f8cd b008 	str.w	fp, [sp, #8]
 8007cda:	464c      	mov	r4, r9
 8007cdc:	461d      	mov	r5, r3
 8007cde:	9903      	ldr	r1, [sp, #12]
 8007ce0:	e7d7      	b.n	8007c92 <__hexnan+0x2e>
 8007ce2:	2a29      	cmp	r2, #41	; 0x29
 8007ce4:	d155      	bne.n	8007d92 <__hexnan+0x12e>
 8007ce6:	3102      	adds	r1, #2
 8007ce8:	f8ca 1000 	str.w	r1, [sl]
 8007cec:	f1bb 0f00 	cmp.w	fp, #0
 8007cf0:	d04f      	beq.n	8007d92 <__hexnan+0x12e>
 8007cf2:	454c      	cmp	r4, r9
 8007cf4:	d206      	bcs.n	8007d04 <__hexnan+0xa0>
 8007cf6:	2d07      	cmp	r5, #7
 8007cf8:	dc04      	bgt.n	8007d04 <__hexnan+0xa0>
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff ff8a 	bl	8007c18 <L_shift>
 8007d04:	4544      	cmp	r4, r8
 8007d06:	d934      	bls.n	8007d72 <__hexnan+0x10e>
 8007d08:	f1a8 0204 	sub.w	r2, r8, #4
 8007d0c:	4623      	mov	r3, r4
 8007d0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d12:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d16:	429f      	cmp	r7, r3
 8007d18:	d2f9      	bcs.n	8007d0e <__hexnan+0xaa>
 8007d1a:	1b3b      	subs	r3, r7, r4
 8007d1c:	f023 0303 	bic.w	r3, r3, #3
 8007d20:	3304      	adds	r3, #4
 8007d22:	3e03      	subs	r6, #3
 8007d24:	3401      	adds	r4, #1
 8007d26:	42a6      	cmp	r6, r4
 8007d28:	bf38      	it	cc
 8007d2a:	2304      	movcc	r3, #4
 8007d2c:	4443      	add	r3, r8
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f843 2b04 	str.w	r2, [r3], #4
 8007d34:	429f      	cmp	r7, r3
 8007d36:	d2fb      	bcs.n	8007d30 <__hexnan+0xcc>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	b91b      	cbnz	r3, 8007d44 <__hexnan+0xe0>
 8007d3c:	4547      	cmp	r7, r8
 8007d3e:	d126      	bne.n	8007d8e <__hexnan+0x12a>
 8007d40:	2301      	movs	r3, #1
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	2005      	movs	r0, #5
 8007d46:	e025      	b.n	8007d94 <__hexnan+0x130>
 8007d48:	3501      	adds	r5, #1
 8007d4a:	2d08      	cmp	r5, #8
 8007d4c:	f10b 0b01 	add.w	fp, fp, #1
 8007d50:	dd06      	ble.n	8007d60 <__hexnan+0xfc>
 8007d52:	4544      	cmp	r4, r8
 8007d54:	d9c3      	bls.n	8007cde <__hexnan+0x7a>
 8007d56:	2300      	movs	r3, #0
 8007d58:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	3c04      	subs	r4, #4
 8007d60:	6822      	ldr	r2, [r4, #0]
 8007d62:	f000 000f 	and.w	r0, r0, #15
 8007d66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d6a:	6020      	str	r0, [r4, #0]
 8007d6c:	e7b7      	b.n	8007cde <__hexnan+0x7a>
 8007d6e:	2508      	movs	r5, #8
 8007d70:	e7b5      	b.n	8007cde <__hexnan+0x7a>
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0df      	beq.n	8007d38 <__hexnan+0xd4>
 8007d78:	f1c3 0320 	rsb	r3, r3, #32
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d80:	40da      	lsrs	r2, r3
 8007d82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d86:	4013      	ands	r3, r2
 8007d88:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d8c:	e7d4      	b.n	8007d38 <__hexnan+0xd4>
 8007d8e:	3f04      	subs	r7, #4
 8007d90:	e7d2      	b.n	8007d38 <__hexnan+0xd4>
 8007d92:	2004      	movs	r0, #4
 8007d94:	b007      	add	sp, #28
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d9a <__ssputs_r>:
 8007d9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9e:	688e      	ldr	r6, [r1, #8]
 8007da0:	461f      	mov	r7, r3
 8007da2:	42be      	cmp	r6, r7
 8007da4:	680b      	ldr	r3, [r1, #0]
 8007da6:	4682      	mov	sl, r0
 8007da8:	460c      	mov	r4, r1
 8007daa:	4690      	mov	r8, r2
 8007dac:	d82c      	bhi.n	8007e08 <__ssputs_r+0x6e>
 8007dae:	898a      	ldrh	r2, [r1, #12]
 8007db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007db4:	d026      	beq.n	8007e04 <__ssputs_r+0x6a>
 8007db6:	6965      	ldr	r5, [r4, #20]
 8007db8:	6909      	ldr	r1, [r1, #16]
 8007dba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dbe:	eba3 0901 	sub.w	r9, r3, r1
 8007dc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dc6:	1c7b      	adds	r3, r7, #1
 8007dc8:	444b      	add	r3, r9
 8007dca:	106d      	asrs	r5, r5, #1
 8007dcc:	429d      	cmp	r5, r3
 8007dce:	bf38      	it	cc
 8007dd0:	461d      	movcc	r5, r3
 8007dd2:	0553      	lsls	r3, r2, #21
 8007dd4:	d527      	bpl.n	8007e26 <__ssputs_r+0x8c>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f000 f960 	bl	800809c <_malloc_r>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	b360      	cbz	r0, 8007e3a <__ssputs_r+0xa0>
 8007de0:	6921      	ldr	r1, [r4, #16]
 8007de2:	464a      	mov	r2, r9
 8007de4:	f7fe fdd0 	bl	8006988 <memcpy>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	6126      	str	r6, [r4, #16]
 8007df6:	6165      	str	r5, [r4, #20]
 8007df8:	444e      	add	r6, r9
 8007dfa:	eba5 0509 	sub.w	r5, r5, r9
 8007dfe:	6026      	str	r6, [r4, #0]
 8007e00:	60a5      	str	r5, [r4, #8]
 8007e02:	463e      	mov	r6, r7
 8007e04:	42be      	cmp	r6, r7
 8007e06:	d900      	bls.n	8007e0a <__ssputs_r+0x70>
 8007e08:	463e      	mov	r6, r7
 8007e0a:	6820      	ldr	r0, [r4, #0]
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	4641      	mov	r1, r8
 8007e10:	f000 ffce 	bl	8008db0 <memmove>
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	1b9b      	subs	r3, r3, r6
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	4433      	add	r3, r6
 8007e1e:	6023      	str	r3, [r4, #0]
 8007e20:	2000      	movs	r0, #0
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	462a      	mov	r2, r5
 8007e28:	f000 ff86 	bl	8008d38 <_realloc_r>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d1e0      	bne.n	8007df4 <__ssputs_r+0x5a>
 8007e32:	6921      	ldr	r1, [r4, #16]
 8007e34:	4650      	mov	r0, sl
 8007e36:	f001 f849 	bl	8008ecc <_free_r>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	f8ca 3000 	str.w	r3, [sl]
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e4c:	e7e9      	b.n	8007e22 <__ssputs_r+0x88>
	...

08007e50 <_svfiprintf_r>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4698      	mov	r8, r3
 8007e56:	898b      	ldrh	r3, [r1, #12]
 8007e58:	061b      	lsls	r3, r3, #24
 8007e5a:	b09d      	sub	sp, #116	; 0x74
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	4614      	mov	r4, r2
 8007e62:	d50e      	bpl.n	8007e82 <_svfiprintf_r+0x32>
 8007e64:	690b      	ldr	r3, [r1, #16]
 8007e66:	b963      	cbnz	r3, 8007e82 <_svfiprintf_r+0x32>
 8007e68:	2140      	movs	r1, #64	; 0x40
 8007e6a:	f000 f917 	bl	800809c <_malloc_r>
 8007e6e:	6028      	str	r0, [r5, #0]
 8007e70:	6128      	str	r0, [r5, #16]
 8007e72:	b920      	cbnz	r0, 8007e7e <_svfiprintf_r+0x2e>
 8007e74:	230c      	movs	r3, #12
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e7c:	e0d0      	b.n	8008020 <_svfiprintf_r+0x1d0>
 8007e7e:	2340      	movs	r3, #64	; 0x40
 8007e80:	616b      	str	r3, [r5, #20]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9309      	str	r3, [sp, #36]	; 0x24
 8007e86:	2320      	movs	r3, #32
 8007e88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e90:	2330      	movs	r3, #48	; 0x30
 8007e92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008038 <_svfiprintf_r+0x1e8>
 8007e96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e9a:	f04f 0901 	mov.w	r9, #1
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	469a      	mov	sl, r3
 8007ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea6:	b10a      	cbz	r2, 8007eac <_svfiprintf_r+0x5c>
 8007ea8:	2a25      	cmp	r2, #37	; 0x25
 8007eaa:	d1f9      	bne.n	8007ea0 <_svfiprintf_r+0x50>
 8007eac:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb0:	d00b      	beq.n	8007eca <_svfiprintf_r+0x7a>
 8007eb2:	465b      	mov	r3, fp
 8007eb4:	4622      	mov	r2, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff ff6e 	bl	8007d9a <__ssputs_r>
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	f000 80a9 	beq.w	8008016 <_svfiprintf_r+0x1c6>
 8007ec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec6:	445a      	add	r2, fp
 8007ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80a1 	beq.w	8008016 <_svfiprintf_r+0x1c6>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ede:	f10a 0a01 	add.w	sl, sl, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	9307      	str	r3, [sp, #28]
 8007ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eea:	931a      	str	r3, [sp, #104]	; 0x68
 8007eec:	4654      	mov	r4, sl
 8007eee:	2205      	movs	r2, #5
 8007ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef4:	4850      	ldr	r0, [pc, #320]	; (8008038 <_svfiprintf_r+0x1e8>)
 8007ef6:	f7f8 f96b 	bl	80001d0 <memchr>
 8007efa:	9a04      	ldr	r2, [sp, #16]
 8007efc:	b9d8      	cbnz	r0, 8007f36 <_svfiprintf_r+0xe6>
 8007efe:	06d0      	lsls	r0, r2, #27
 8007f00:	bf44      	itt	mi
 8007f02:	2320      	movmi	r3, #32
 8007f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f08:	0711      	lsls	r1, r2, #28
 8007f0a:	bf44      	itt	mi
 8007f0c:	232b      	movmi	r3, #43	; 0x2b
 8007f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f12:	f89a 3000 	ldrb.w	r3, [sl]
 8007f16:	2b2a      	cmp	r3, #42	; 0x2a
 8007f18:	d015      	beq.n	8007f46 <_svfiprintf_r+0xf6>
 8007f1a:	9a07      	ldr	r2, [sp, #28]
 8007f1c:	4654      	mov	r4, sl
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f04f 0c0a 	mov.w	ip, #10
 8007f24:	4621      	mov	r1, r4
 8007f26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2a:	3b30      	subs	r3, #48	; 0x30
 8007f2c:	2b09      	cmp	r3, #9
 8007f2e:	d94d      	bls.n	8007fcc <_svfiprintf_r+0x17c>
 8007f30:	b1b0      	cbz	r0, 8007f60 <_svfiprintf_r+0x110>
 8007f32:	9207      	str	r2, [sp, #28]
 8007f34:	e014      	b.n	8007f60 <_svfiprintf_r+0x110>
 8007f36:	eba0 0308 	sub.w	r3, r0, r8
 8007f3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	9304      	str	r3, [sp, #16]
 8007f42:	46a2      	mov	sl, r4
 8007f44:	e7d2      	b.n	8007eec <_svfiprintf_r+0x9c>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	1d19      	adds	r1, r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9103      	str	r1, [sp, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfbb      	ittet	lt
 8007f52:	425b      	neglt	r3, r3
 8007f54:	f042 0202 	orrlt.w	r2, r2, #2
 8007f58:	9307      	strge	r3, [sp, #28]
 8007f5a:	9307      	strlt	r3, [sp, #28]
 8007f5c:	bfb8      	it	lt
 8007f5e:	9204      	strlt	r2, [sp, #16]
 8007f60:	7823      	ldrb	r3, [r4, #0]
 8007f62:	2b2e      	cmp	r3, #46	; 0x2e
 8007f64:	d10c      	bne.n	8007f80 <_svfiprintf_r+0x130>
 8007f66:	7863      	ldrb	r3, [r4, #1]
 8007f68:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6a:	d134      	bne.n	8007fd6 <_svfiprintf_r+0x186>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	1d1a      	adds	r2, r3, #4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	9203      	str	r2, [sp, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bfb8      	it	lt
 8007f78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f7c:	3402      	adds	r4, #2
 8007f7e:	9305      	str	r3, [sp, #20]
 8007f80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008048 <_svfiprintf_r+0x1f8>
 8007f84:	7821      	ldrb	r1, [r4, #0]
 8007f86:	2203      	movs	r2, #3
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f7f8 f921 	bl	80001d0 <memchr>
 8007f8e:	b138      	cbz	r0, 8007fa0 <_svfiprintf_r+0x150>
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	eba0 000a 	sub.w	r0, r0, sl
 8007f96:	2240      	movs	r2, #64	; 0x40
 8007f98:	4082      	lsls	r2, r0
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	3401      	adds	r4, #1
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa4:	4825      	ldr	r0, [pc, #148]	; (800803c <_svfiprintf_r+0x1ec>)
 8007fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007faa:	2206      	movs	r2, #6
 8007fac:	f7f8 f910 	bl	80001d0 <memchr>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d038      	beq.n	8008026 <_svfiprintf_r+0x1d6>
 8007fb4:	4b22      	ldr	r3, [pc, #136]	; (8008040 <_svfiprintf_r+0x1f0>)
 8007fb6:	bb1b      	cbnz	r3, 8008000 <_svfiprintf_r+0x1b0>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	3307      	adds	r3, #7
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	9303      	str	r3, [sp, #12]
 8007fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc6:	4433      	add	r3, r6
 8007fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fca:	e768      	b.n	8007e9e <_svfiprintf_r+0x4e>
 8007fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	e7a6      	b.n	8007f24 <_svfiprintf_r+0xd4>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	3401      	adds	r4, #1
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f04f 0c0a 	mov.w	ip, #10
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe8:	3a30      	subs	r2, #48	; 0x30
 8007fea:	2a09      	cmp	r2, #9
 8007fec:	d903      	bls.n	8007ff6 <_svfiprintf_r+0x1a6>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0c6      	beq.n	8007f80 <_svfiprintf_r+0x130>
 8007ff2:	9105      	str	r1, [sp, #20]
 8007ff4:	e7c4      	b.n	8007f80 <_svfiprintf_r+0x130>
 8007ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e7f0      	b.n	8007fe2 <_svfiprintf_r+0x192>
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <_svfiprintf_r+0x1f4>)
 8008008:	a904      	add	r1, sp, #16
 800800a:	4638      	mov	r0, r7
 800800c:	f7fd f952 	bl	80052b4 <_printf_float>
 8008010:	1c42      	adds	r2, r0, #1
 8008012:	4606      	mov	r6, r0
 8008014:	d1d6      	bne.n	8007fc4 <_svfiprintf_r+0x174>
 8008016:	89ab      	ldrh	r3, [r5, #12]
 8008018:	065b      	lsls	r3, r3, #25
 800801a:	f53f af2d 	bmi.w	8007e78 <_svfiprintf_r+0x28>
 800801e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008020:	b01d      	add	sp, #116	; 0x74
 8008022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	ab03      	add	r3, sp, #12
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	462a      	mov	r2, r5
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_svfiprintf_r+0x1f4>)
 800802e:	a904      	add	r1, sp, #16
 8008030:	4638      	mov	r0, r7
 8008032:	f7fd fbe3 	bl	80057fc <_printf_i>
 8008036:	e7eb      	b.n	8008010 <_svfiprintf_r+0x1c0>
 8008038:	0800a5b4 	.word	0x0800a5b4
 800803c:	0800a5be 	.word	0x0800a5be
 8008040:	080052b5 	.word	0x080052b5
 8008044:	08007d9b 	.word	0x08007d9b
 8008048:	0800a5ba 	.word	0x0800a5ba

0800804c <malloc>:
 800804c:	4b02      	ldr	r3, [pc, #8]	; (8008058 <malloc+0xc>)
 800804e:	4601      	mov	r1, r0
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f000 b823 	b.w	800809c <_malloc_r>
 8008056:	bf00      	nop
 8008058:	200001d8 	.word	0x200001d8

0800805c <sbrk_aligned>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	4e0e      	ldr	r6, [pc, #56]	; (8008098 <sbrk_aligned+0x3c>)
 8008060:	460c      	mov	r4, r1
 8008062:	6831      	ldr	r1, [r6, #0]
 8008064:	4605      	mov	r5, r0
 8008066:	b911      	cbnz	r1, 800806e <sbrk_aligned+0x12>
 8008068:	f000 fef0 	bl	8008e4c <_sbrk_r>
 800806c:	6030      	str	r0, [r6, #0]
 800806e:	4621      	mov	r1, r4
 8008070:	4628      	mov	r0, r5
 8008072:	f000 feeb 	bl	8008e4c <_sbrk_r>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d00a      	beq.n	8008090 <sbrk_aligned+0x34>
 800807a:	1cc4      	adds	r4, r0, #3
 800807c:	f024 0403 	bic.w	r4, r4, #3
 8008080:	42a0      	cmp	r0, r4
 8008082:	d007      	beq.n	8008094 <sbrk_aligned+0x38>
 8008084:	1a21      	subs	r1, r4, r0
 8008086:	4628      	mov	r0, r5
 8008088:	f000 fee0 	bl	8008e4c <_sbrk_r>
 800808c:	3001      	adds	r0, #1
 800808e:	d101      	bne.n	8008094 <sbrk_aligned+0x38>
 8008090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008094:	4620      	mov	r0, r4
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	20000a84 	.word	0x20000a84

0800809c <_malloc_r>:
 800809c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a0:	1ccd      	adds	r5, r1, #3
 80080a2:	f025 0503 	bic.w	r5, r5, #3
 80080a6:	3508      	adds	r5, #8
 80080a8:	2d0c      	cmp	r5, #12
 80080aa:	bf38      	it	cc
 80080ac:	250c      	movcc	r5, #12
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	4607      	mov	r7, r0
 80080b2:	db01      	blt.n	80080b8 <_malloc_r+0x1c>
 80080b4:	42a9      	cmp	r1, r5
 80080b6:	d905      	bls.n	80080c4 <_malloc_r+0x28>
 80080b8:	230c      	movs	r3, #12
 80080ba:	603b      	str	r3, [r7, #0]
 80080bc:	2600      	movs	r6, #0
 80080be:	4630      	mov	r0, r6
 80080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008198 <_malloc_r+0xfc>
 80080c8:	f000 f928 	bl	800831c <__malloc_lock>
 80080cc:	f8d8 3000 	ldr.w	r3, [r8]
 80080d0:	461c      	mov	r4, r3
 80080d2:	bb5c      	cbnz	r4, 800812c <_malloc_r+0x90>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7ff ffc0 	bl	800805c <sbrk_aligned>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	4604      	mov	r4, r0
 80080e0:	d155      	bne.n	800818e <_malloc_r+0xf2>
 80080e2:	f8d8 4000 	ldr.w	r4, [r8]
 80080e6:	4626      	mov	r6, r4
 80080e8:	2e00      	cmp	r6, #0
 80080ea:	d145      	bne.n	8008178 <_malloc_r+0xdc>
 80080ec:	2c00      	cmp	r4, #0
 80080ee:	d048      	beq.n	8008182 <_malloc_r+0xe6>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	4631      	mov	r1, r6
 80080f4:	4638      	mov	r0, r7
 80080f6:	eb04 0903 	add.w	r9, r4, r3
 80080fa:	f000 fea7 	bl	8008e4c <_sbrk_r>
 80080fe:	4581      	cmp	r9, r0
 8008100:	d13f      	bne.n	8008182 <_malloc_r+0xe6>
 8008102:	6821      	ldr	r1, [r4, #0]
 8008104:	1a6d      	subs	r5, r5, r1
 8008106:	4629      	mov	r1, r5
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff ffa7 	bl	800805c <sbrk_aligned>
 800810e:	3001      	adds	r0, #1
 8008110:	d037      	beq.n	8008182 <_malloc_r+0xe6>
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	442b      	add	r3, r5
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	f8d8 3000 	ldr.w	r3, [r8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d038      	beq.n	8008192 <_malloc_r+0xf6>
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	42a2      	cmp	r2, r4
 8008124:	d12b      	bne.n	800817e <_malloc_r+0xe2>
 8008126:	2200      	movs	r2, #0
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	e00f      	b.n	800814c <_malloc_r+0xb0>
 800812c:	6822      	ldr	r2, [r4, #0]
 800812e:	1b52      	subs	r2, r2, r5
 8008130:	d41f      	bmi.n	8008172 <_malloc_r+0xd6>
 8008132:	2a0b      	cmp	r2, #11
 8008134:	d917      	bls.n	8008166 <_malloc_r+0xca>
 8008136:	1961      	adds	r1, r4, r5
 8008138:	42a3      	cmp	r3, r4
 800813a:	6025      	str	r5, [r4, #0]
 800813c:	bf18      	it	ne
 800813e:	6059      	strne	r1, [r3, #4]
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	bf08      	it	eq
 8008144:	f8c8 1000 	streq.w	r1, [r8]
 8008148:	5162      	str	r2, [r4, r5]
 800814a:	604b      	str	r3, [r1, #4]
 800814c:	4638      	mov	r0, r7
 800814e:	f104 060b 	add.w	r6, r4, #11
 8008152:	f000 f8e9 	bl	8008328 <__malloc_unlock>
 8008156:	f026 0607 	bic.w	r6, r6, #7
 800815a:	1d23      	adds	r3, r4, #4
 800815c:	1af2      	subs	r2, r6, r3
 800815e:	d0ae      	beq.n	80080be <_malloc_r+0x22>
 8008160:	1b9b      	subs	r3, r3, r6
 8008162:	50a3      	str	r3, [r4, r2]
 8008164:	e7ab      	b.n	80080be <_malloc_r+0x22>
 8008166:	42a3      	cmp	r3, r4
 8008168:	6862      	ldr	r2, [r4, #4]
 800816a:	d1dd      	bne.n	8008128 <_malloc_r+0x8c>
 800816c:	f8c8 2000 	str.w	r2, [r8]
 8008170:	e7ec      	b.n	800814c <_malloc_r+0xb0>
 8008172:	4623      	mov	r3, r4
 8008174:	6864      	ldr	r4, [r4, #4]
 8008176:	e7ac      	b.n	80080d2 <_malloc_r+0x36>
 8008178:	4634      	mov	r4, r6
 800817a:	6876      	ldr	r6, [r6, #4]
 800817c:	e7b4      	b.n	80080e8 <_malloc_r+0x4c>
 800817e:	4613      	mov	r3, r2
 8008180:	e7cc      	b.n	800811c <_malloc_r+0x80>
 8008182:	230c      	movs	r3, #12
 8008184:	603b      	str	r3, [r7, #0]
 8008186:	4638      	mov	r0, r7
 8008188:	f000 f8ce 	bl	8008328 <__malloc_unlock>
 800818c:	e797      	b.n	80080be <_malloc_r+0x22>
 800818e:	6025      	str	r5, [r4, #0]
 8008190:	e7dc      	b.n	800814c <_malloc_r+0xb0>
 8008192:	605b      	str	r3, [r3, #4]
 8008194:	deff      	udf	#255	; 0xff
 8008196:	bf00      	nop
 8008198:	20000a80 	.word	0x20000a80

0800819c <__ascii_mbtowc>:
 800819c:	b082      	sub	sp, #8
 800819e:	b901      	cbnz	r1, 80081a2 <__ascii_mbtowc+0x6>
 80081a0:	a901      	add	r1, sp, #4
 80081a2:	b142      	cbz	r2, 80081b6 <__ascii_mbtowc+0x1a>
 80081a4:	b14b      	cbz	r3, 80081ba <__ascii_mbtowc+0x1e>
 80081a6:	7813      	ldrb	r3, [r2, #0]
 80081a8:	600b      	str	r3, [r1, #0]
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	1e10      	subs	r0, r2, #0
 80081ae:	bf18      	it	ne
 80081b0:	2001      	movne	r0, #1
 80081b2:	b002      	add	sp, #8
 80081b4:	4770      	bx	lr
 80081b6:	4610      	mov	r0, r2
 80081b8:	e7fb      	b.n	80081b2 <__ascii_mbtowc+0x16>
 80081ba:	f06f 0001 	mvn.w	r0, #1
 80081be:	e7f8      	b.n	80081b2 <__ascii_mbtowc+0x16>

080081c0 <__sflush_r>:
 80081c0:	898a      	ldrh	r2, [r1, #12]
 80081c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	0710      	lsls	r0, r2, #28
 80081ca:	460c      	mov	r4, r1
 80081cc:	d458      	bmi.n	8008280 <__sflush_r+0xc0>
 80081ce:	684b      	ldr	r3, [r1, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc05      	bgt.n	80081e0 <__sflush_r+0x20>
 80081d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dc02      	bgt.n	80081e0 <__sflush_r+0x20>
 80081da:	2000      	movs	r0, #0
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081e2:	2e00      	cmp	r6, #0
 80081e4:	d0f9      	beq.n	80081da <__sflush_r+0x1a>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081ec:	682f      	ldr	r7, [r5, #0]
 80081ee:	6a21      	ldr	r1, [r4, #32]
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	d032      	beq.n	800825a <__sflush_r+0x9a>
 80081f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	075a      	lsls	r2, r3, #29
 80081fa:	d505      	bpl.n	8008208 <__sflush_r+0x48>
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	1ac0      	subs	r0, r0, r3
 8008200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008202:	b10b      	cbz	r3, 8008208 <__sflush_r+0x48>
 8008204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008206:	1ac0      	subs	r0, r0, r3
 8008208:	2300      	movs	r3, #0
 800820a:	4602      	mov	r2, r0
 800820c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820e:	6a21      	ldr	r1, [r4, #32]
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	d106      	bne.n	8008228 <__sflush_r+0x68>
 800821a:	6829      	ldr	r1, [r5, #0]
 800821c:	291d      	cmp	r1, #29
 800821e:	d82b      	bhi.n	8008278 <__sflush_r+0xb8>
 8008220:	4a29      	ldr	r2, [pc, #164]	; (80082c8 <__sflush_r+0x108>)
 8008222:	410a      	asrs	r2, r1
 8008224:	07d6      	lsls	r6, r2, #31
 8008226:	d427      	bmi.n	8008278 <__sflush_r+0xb8>
 8008228:	2200      	movs	r2, #0
 800822a:	6062      	str	r2, [r4, #4]
 800822c:	04d9      	lsls	r1, r3, #19
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	6022      	str	r2, [r4, #0]
 8008232:	d504      	bpl.n	800823e <__sflush_r+0x7e>
 8008234:	1c42      	adds	r2, r0, #1
 8008236:	d101      	bne.n	800823c <__sflush_r+0x7c>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b903      	cbnz	r3, 800823e <__sflush_r+0x7e>
 800823c:	6560      	str	r0, [r4, #84]	; 0x54
 800823e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008240:	602f      	str	r7, [r5, #0]
 8008242:	2900      	cmp	r1, #0
 8008244:	d0c9      	beq.n	80081da <__sflush_r+0x1a>
 8008246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800824a:	4299      	cmp	r1, r3
 800824c:	d002      	beq.n	8008254 <__sflush_r+0x94>
 800824e:	4628      	mov	r0, r5
 8008250:	f000 fe3c 	bl	8008ecc <_free_r>
 8008254:	2000      	movs	r0, #0
 8008256:	6360      	str	r0, [r4, #52]	; 0x34
 8008258:	e7c0      	b.n	80081dc <__sflush_r+0x1c>
 800825a:	2301      	movs	r3, #1
 800825c:	4628      	mov	r0, r5
 800825e:	47b0      	blx	r6
 8008260:	1c41      	adds	r1, r0, #1
 8008262:	d1c8      	bne.n	80081f6 <__sflush_r+0x36>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0c5      	beq.n	80081f6 <__sflush_r+0x36>
 800826a:	2b1d      	cmp	r3, #29
 800826c:	d001      	beq.n	8008272 <__sflush_r+0xb2>
 800826e:	2b16      	cmp	r3, #22
 8008270:	d101      	bne.n	8008276 <__sflush_r+0xb6>
 8008272:	602f      	str	r7, [r5, #0]
 8008274:	e7b1      	b.n	80081da <__sflush_r+0x1a>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7ad      	b.n	80081dc <__sflush_r+0x1c>
 8008280:	690f      	ldr	r7, [r1, #16]
 8008282:	2f00      	cmp	r7, #0
 8008284:	d0a9      	beq.n	80081da <__sflush_r+0x1a>
 8008286:	0793      	lsls	r3, r2, #30
 8008288:	680e      	ldr	r6, [r1, #0]
 800828a:	bf08      	it	eq
 800828c:	694b      	ldreq	r3, [r1, #20]
 800828e:	600f      	str	r7, [r1, #0]
 8008290:	bf18      	it	ne
 8008292:	2300      	movne	r3, #0
 8008294:	eba6 0807 	sub.w	r8, r6, r7
 8008298:	608b      	str	r3, [r1, #8]
 800829a:	f1b8 0f00 	cmp.w	r8, #0
 800829e:	dd9c      	ble.n	80081da <__sflush_r+0x1a>
 80082a0:	6a21      	ldr	r1, [r4, #32]
 80082a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082a4:	4643      	mov	r3, r8
 80082a6:	463a      	mov	r2, r7
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b0      	blx	r6
 80082ac:	2800      	cmp	r0, #0
 80082ae:	dc06      	bgt.n	80082be <__sflush_r+0xfe>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082bc:	e78e      	b.n	80081dc <__sflush_r+0x1c>
 80082be:	4407      	add	r7, r0
 80082c0:	eba8 0800 	sub.w	r8, r8, r0
 80082c4:	e7e9      	b.n	800829a <__sflush_r+0xda>
 80082c6:	bf00      	nop
 80082c8:	dfbffffe 	.word	0xdfbffffe

080082cc <_fflush_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	4605      	mov	r5, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	b913      	cbnz	r3, 80082dc <_fflush_r+0x10>
 80082d6:	2500      	movs	r5, #0
 80082d8:	4628      	mov	r0, r5
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	b118      	cbz	r0, 80082e6 <_fflush_r+0x1a>
 80082de:	6a03      	ldr	r3, [r0, #32]
 80082e0:	b90b      	cbnz	r3, 80082e6 <_fflush_r+0x1a>
 80082e2:	f7fd fc47 	bl	8005b74 <__sinit>
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f3      	beq.n	80082d6 <_fflush_r+0xa>
 80082ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082f0:	07d0      	lsls	r0, r2, #31
 80082f2:	d404      	bmi.n	80082fe <_fflush_r+0x32>
 80082f4:	0599      	lsls	r1, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_fflush_r+0x32>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f7fe fb43 	bl	8006984 <__retarget_lock_acquire_recursive>
 80082fe:	4628      	mov	r0, r5
 8008300:	4621      	mov	r1, r4
 8008302:	f7ff ff5d 	bl	80081c0 <__sflush_r>
 8008306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008308:	07da      	lsls	r2, r3, #31
 800830a:	4605      	mov	r5, r0
 800830c:	d4e4      	bmi.n	80082d8 <_fflush_r+0xc>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	059b      	lsls	r3, r3, #22
 8008312:	d4e1      	bmi.n	80082d8 <_fflush_r+0xc>
 8008314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008316:	f7fe fb36 	bl	8006986 <__retarget_lock_release_recursive>
 800831a:	e7dd      	b.n	80082d8 <_fflush_r+0xc>

0800831c <__malloc_lock>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__malloc_lock+0x8>)
 800831e:	f7fe bb31 	b.w	8006984 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000a7c 	.word	0x20000a7c

08008328 <__malloc_unlock>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__malloc_unlock+0x8>)
 800832a:	f7fe bb2c 	b.w	8006986 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000a7c 	.word	0x20000a7c

08008334 <_Balloc>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	69c6      	ldr	r6, [r0, #28]
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	b976      	cbnz	r6, 800835c <_Balloc+0x28>
 800833e:	2010      	movs	r0, #16
 8008340:	f7ff fe84 	bl	800804c <malloc>
 8008344:	4602      	mov	r2, r0
 8008346:	61e0      	str	r0, [r4, #28]
 8008348:	b920      	cbnz	r0, 8008354 <_Balloc+0x20>
 800834a:	4b18      	ldr	r3, [pc, #96]	; (80083ac <_Balloc+0x78>)
 800834c:	4818      	ldr	r0, [pc, #96]	; (80083b0 <_Balloc+0x7c>)
 800834e:	216b      	movs	r1, #107	; 0x6b
 8008350:	f7fe fb32 	bl	80069b8 <__assert_func>
 8008354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008358:	6006      	str	r6, [r0, #0]
 800835a:	60c6      	str	r6, [r0, #12]
 800835c:	69e6      	ldr	r6, [r4, #28]
 800835e:	68f3      	ldr	r3, [r6, #12]
 8008360:	b183      	cbz	r3, 8008384 <_Balloc+0x50>
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800836a:	b9b8      	cbnz	r0, 800839c <_Balloc+0x68>
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f605 	lsl.w	r6, r1, r5
 8008372:	1d72      	adds	r2, r6, #5
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4620      	mov	r0, r4
 8008378:	f000 fd91 	bl	8008e9e <_calloc_r>
 800837c:	b160      	cbz	r0, 8008398 <_Balloc+0x64>
 800837e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008382:	e00e      	b.n	80083a2 <_Balloc+0x6e>
 8008384:	2221      	movs	r2, #33	; 0x21
 8008386:	2104      	movs	r1, #4
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fd88 	bl	8008e9e <_calloc_r>
 800838e:	69e3      	ldr	r3, [r4, #28]
 8008390:	60f0      	str	r0, [r6, #12]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e4      	bne.n	8008362 <_Balloc+0x2e>
 8008398:	2000      	movs	r0, #0
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083a2:	2300      	movs	r3, #0
 80083a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a8:	e7f7      	b.n	800839a <_Balloc+0x66>
 80083aa:	bf00      	nop
 80083ac:	0800a328 	.word	0x0800a328
 80083b0:	0800a5c5 	.word	0x0800a5c5

080083b4 <_Bfree>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	69c6      	ldr	r6, [r0, #28]
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b976      	cbnz	r6, 80083dc <_Bfree+0x28>
 80083be:	2010      	movs	r0, #16
 80083c0:	f7ff fe44 	bl	800804c <malloc>
 80083c4:	4602      	mov	r2, r0
 80083c6:	61e8      	str	r0, [r5, #28]
 80083c8:	b920      	cbnz	r0, 80083d4 <_Bfree+0x20>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <_Bfree+0x3c>)
 80083cc:	4809      	ldr	r0, [pc, #36]	; (80083f4 <_Bfree+0x40>)
 80083ce:	218f      	movs	r1, #143	; 0x8f
 80083d0:	f7fe faf2 	bl	80069b8 <__assert_func>
 80083d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d8:	6006      	str	r6, [r0, #0]
 80083da:	60c6      	str	r6, [r0, #12]
 80083dc:	b13c      	cbz	r4, 80083ee <_Bfree+0x3a>
 80083de:	69eb      	ldr	r3, [r5, #28]
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e8:	6021      	str	r1, [r4, #0]
 80083ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	0800a328 	.word	0x0800a328
 80083f4:	0800a5c5 	.word	0x0800a5c5

080083f8 <__multadd>:
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	690d      	ldr	r5, [r1, #16]
 80083fe:	4607      	mov	r7, r0
 8008400:	460c      	mov	r4, r1
 8008402:	461e      	mov	r6, r3
 8008404:	f101 0c14 	add.w	ip, r1, #20
 8008408:	2000      	movs	r0, #0
 800840a:	f8dc 3000 	ldr.w	r3, [ip]
 800840e:	b299      	uxth	r1, r3
 8008410:	fb02 6101 	mla	r1, r2, r1, r6
 8008414:	0c1e      	lsrs	r6, r3, #16
 8008416:	0c0b      	lsrs	r3, r1, #16
 8008418:	fb02 3306 	mla	r3, r2, r6, r3
 800841c:	b289      	uxth	r1, r1
 800841e:	3001      	adds	r0, #1
 8008420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008424:	4285      	cmp	r5, r0
 8008426:	f84c 1b04 	str.w	r1, [ip], #4
 800842a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800842e:	dcec      	bgt.n	800840a <__multadd+0x12>
 8008430:	b30e      	cbz	r6, 8008476 <__multadd+0x7e>
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc19      	bgt.n	800846c <__multadd+0x74>
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	4638      	mov	r0, r7
 800843c:	3101      	adds	r1, #1
 800843e:	f7ff ff79 	bl	8008334 <_Balloc>
 8008442:	4680      	mov	r8, r0
 8008444:	b928      	cbnz	r0, 8008452 <__multadd+0x5a>
 8008446:	4602      	mov	r2, r0
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <__multadd+0x84>)
 800844a:	480d      	ldr	r0, [pc, #52]	; (8008480 <__multadd+0x88>)
 800844c:	21ba      	movs	r1, #186	; 0xba
 800844e:	f7fe fab3 	bl	80069b8 <__assert_func>
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	f104 010c 	add.w	r1, r4, #12
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	300c      	adds	r0, #12
 800845e:	f7fe fa93 	bl	8006988 <memcpy>
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ffa5 	bl	80083b4 <_Bfree>
 800846a:	4644      	mov	r4, r8
 800846c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008470:	3501      	adds	r5, #1
 8008472:	615e      	str	r6, [r3, #20]
 8008474:	6125      	str	r5, [r4, #16]
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	0800a543 	.word	0x0800a543
 8008480:	0800a5c5 	.word	0x0800a5c5

08008484 <__s2b>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4615      	mov	r5, r2
 800848c:	461f      	mov	r7, r3
 800848e:	2209      	movs	r2, #9
 8008490:	3308      	adds	r3, #8
 8008492:	4606      	mov	r6, r0
 8008494:	fb93 f3f2 	sdiv	r3, r3, r2
 8008498:	2100      	movs	r1, #0
 800849a:	2201      	movs	r2, #1
 800849c:	429a      	cmp	r2, r3
 800849e:	db09      	blt.n	80084b4 <__s2b+0x30>
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff ff47 	bl	8008334 <_Balloc>
 80084a6:	b940      	cbnz	r0, 80084ba <__s2b+0x36>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b19      	ldr	r3, [pc, #100]	; (8008510 <__s2b+0x8c>)
 80084ac:	4819      	ldr	r0, [pc, #100]	; (8008514 <__s2b+0x90>)
 80084ae:	21d3      	movs	r1, #211	; 0xd3
 80084b0:	f7fe fa82 	bl	80069b8 <__assert_func>
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	3101      	adds	r1, #1
 80084b8:	e7f0      	b.n	800849c <__s2b+0x18>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	6143      	str	r3, [r0, #20]
 80084be:	2d09      	cmp	r5, #9
 80084c0:	f04f 0301 	mov.w	r3, #1
 80084c4:	6103      	str	r3, [r0, #16]
 80084c6:	dd16      	ble.n	80084f6 <__s2b+0x72>
 80084c8:	f104 0909 	add.w	r9, r4, #9
 80084cc:	46c8      	mov	r8, r9
 80084ce:	442c      	add	r4, r5
 80084d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084d4:	4601      	mov	r1, r0
 80084d6:	3b30      	subs	r3, #48	; 0x30
 80084d8:	220a      	movs	r2, #10
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ff8c 	bl	80083f8 <__multadd>
 80084e0:	45a0      	cmp	r8, r4
 80084e2:	d1f5      	bne.n	80084d0 <__s2b+0x4c>
 80084e4:	f1a5 0408 	sub.w	r4, r5, #8
 80084e8:	444c      	add	r4, r9
 80084ea:	1b2d      	subs	r5, r5, r4
 80084ec:	1963      	adds	r3, r4, r5
 80084ee:	42bb      	cmp	r3, r7
 80084f0:	db04      	blt.n	80084fc <__s2b+0x78>
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	340a      	adds	r4, #10
 80084f8:	2509      	movs	r5, #9
 80084fa:	e7f6      	b.n	80084ea <__s2b+0x66>
 80084fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008500:	4601      	mov	r1, r0
 8008502:	3b30      	subs	r3, #48	; 0x30
 8008504:	220a      	movs	r2, #10
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff76 	bl	80083f8 <__multadd>
 800850c:	e7ee      	b.n	80084ec <__s2b+0x68>
 800850e:	bf00      	nop
 8008510:	0800a543 	.word	0x0800a543
 8008514:	0800a5c5 	.word	0x0800a5c5

08008518 <__hi0bits>:
 8008518:	0c03      	lsrs	r3, r0, #16
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	b9d3      	cbnz	r3, 8008554 <__hi0bits+0x3c>
 800851e:	0400      	lsls	r0, r0, #16
 8008520:	2310      	movs	r3, #16
 8008522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008526:	bf04      	itt	eq
 8008528:	0200      	lsleq	r0, r0, #8
 800852a:	3308      	addeq	r3, #8
 800852c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008530:	bf04      	itt	eq
 8008532:	0100      	lsleq	r0, r0, #4
 8008534:	3304      	addeq	r3, #4
 8008536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800853a:	bf04      	itt	eq
 800853c:	0080      	lsleq	r0, r0, #2
 800853e:	3302      	addeq	r3, #2
 8008540:	2800      	cmp	r0, #0
 8008542:	db05      	blt.n	8008550 <__hi0bits+0x38>
 8008544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008548:	f103 0301 	add.w	r3, r3, #1
 800854c:	bf08      	it	eq
 800854e:	2320      	moveq	r3, #32
 8008550:	4618      	mov	r0, r3
 8008552:	4770      	bx	lr
 8008554:	2300      	movs	r3, #0
 8008556:	e7e4      	b.n	8008522 <__hi0bits+0xa>

08008558 <__lo0bits>:
 8008558:	6803      	ldr	r3, [r0, #0]
 800855a:	f013 0207 	ands.w	r2, r3, #7
 800855e:	d00c      	beq.n	800857a <__lo0bits+0x22>
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d422      	bmi.n	80085aa <__lo0bits+0x52>
 8008564:	079a      	lsls	r2, r3, #30
 8008566:	bf49      	itett	mi
 8008568:	085b      	lsrmi	r3, r3, #1
 800856a:	089b      	lsrpl	r3, r3, #2
 800856c:	6003      	strmi	r3, [r0, #0]
 800856e:	2201      	movmi	r2, #1
 8008570:	bf5c      	itt	pl
 8008572:	6003      	strpl	r3, [r0, #0]
 8008574:	2202      	movpl	r2, #2
 8008576:	4610      	mov	r0, r2
 8008578:	4770      	bx	lr
 800857a:	b299      	uxth	r1, r3
 800857c:	b909      	cbnz	r1, 8008582 <__lo0bits+0x2a>
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	2210      	movs	r2, #16
 8008582:	b2d9      	uxtb	r1, r3
 8008584:	b909      	cbnz	r1, 800858a <__lo0bits+0x32>
 8008586:	3208      	adds	r2, #8
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	0719      	lsls	r1, r3, #28
 800858c:	bf04      	itt	eq
 800858e:	091b      	lsreq	r3, r3, #4
 8008590:	3204      	addeq	r2, #4
 8008592:	0799      	lsls	r1, r3, #30
 8008594:	bf04      	itt	eq
 8008596:	089b      	lsreq	r3, r3, #2
 8008598:	3202      	addeq	r2, #2
 800859a:	07d9      	lsls	r1, r3, #31
 800859c:	d403      	bmi.n	80085a6 <__lo0bits+0x4e>
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	f102 0201 	add.w	r2, r2, #1
 80085a4:	d003      	beq.n	80085ae <__lo0bits+0x56>
 80085a6:	6003      	str	r3, [r0, #0]
 80085a8:	e7e5      	b.n	8008576 <__lo0bits+0x1e>
 80085aa:	2200      	movs	r2, #0
 80085ac:	e7e3      	b.n	8008576 <__lo0bits+0x1e>
 80085ae:	2220      	movs	r2, #32
 80085b0:	e7e1      	b.n	8008576 <__lo0bits+0x1e>
	...

080085b4 <__i2b>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	460c      	mov	r4, r1
 80085b8:	2101      	movs	r1, #1
 80085ba:	f7ff febb 	bl	8008334 <_Balloc>
 80085be:	4602      	mov	r2, r0
 80085c0:	b928      	cbnz	r0, 80085ce <__i2b+0x1a>
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <__i2b+0x24>)
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <__i2b+0x28>)
 80085c6:	f240 1145 	movw	r1, #325	; 0x145
 80085ca:	f7fe f9f5 	bl	80069b8 <__assert_func>
 80085ce:	2301      	movs	r3, #1
 80085d0:	6144      	str	r4, [r0, #20]
 80085d2:	6103      	str	r3, [r0, #16]
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	bf00      	nop
 80085d8:	0800a543 	.word	0x0800a543
 80085dc:	0800a5c5 	.word	0x0800a5c5

080085e0 <__multiply>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	4691      	mov	r9, r2
 80085e6:	690a      	ldr	r2, [r1, #16]
 80085e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	bfb8      	it	lt
 80085f0:	460b      	movlt	r3, r1
 80085f2:	460c      	mov	r4, r1
 80085f4:	bfbc      	itt	lt
 80085f6:	464c      	movlt	r4, r9
 80085f8:	4699      	movlt	r9, r3
 80085fa:	6927      	ldr	r7, [r4, #16]
 80085fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008600:	68a3      	ldr	r3, [r4, #8]
 8008602:	6861      	ldr	r1, [r4, #4]
 8008604:	eb07 060a 	add.w	r6, r7, sl
 8008608:	42b3      	cmp	r3, r6
 800860a:	b085      	sub	sp, #20
 800860c:	bfb8      	it	lt
 800860e:	3101      	addlt	r1, #1
 8008610:	f7ff fe90 	bl	8008334 <_Balloc>
 8008614:	b930      	cbnz	r0, 8008624 <__multiply+0x44>
 8008616:	4602      	mov	r2, r0
 8008618:	4b44      	ldr	r3, [pc, #272]	; (800872c <__multiply+0x14c>)
 800861a:	4845      	ldr	r0, [pc, #276]	; (8008730 <__multiply+0x150>)
 800861c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008620:	f7fe f9ca 	bl	80069b8 <__assert_func>
 8008624:	f100 0514 	add.w	r5, r0, #20
 8008628:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800862c:	462b      	mov	r3, r5
 800862e:	2200      	movs	r2, #0
 8008630:	4543      	cmp	r3, r8
 8008632:	d321      	bcc.n	8008678 <__multiply+0x98>
 8008634:	f104 0314 	add.w	r3, r4, #20
 8008638:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800863c:	f109 0314 	add.w	r3, r9, #20
 8008640:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008644:	9202      	str	r2, [sp, #8]
 8008646:	1b3a      	subs	r2, r7, r4
 8008648:	3a15      	subs	r2, #21
 800864a:	f022 0203 	bic.w	r2, r2, #3
 800864e:	3204      	adds	r2, #4
 8008650:	f104 0115 	add.w	r1, r4, #21
 8008654:	428f      	cmp	r7, r1
 8008656:	bf38      	it	cc
 8008658:	2204      	movcc	r2, #4
 800865a:	9201      	str	r2, [sp, #4]
 800865c:	9a02      	ldr	r2, [sp, #8]
 800865e:	9303      	str	r3, [sp, #12]
 8008660:	429a      	cmp	r2, r3
 8008662:	d80c      	bhi.n	800867e <__multiply+0x9e>
 8008664:	2e00      	cmp	r6, #0
 8008666:	dd03      	ble.n	8008670 <__multiply+0x90>
 8008668:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05b      	beq.n	8008728 <__multiply+0x148>
 8008670:	6106      	str	r6, [r0, #16]
 8008672:	b005      	add	sp, #20
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	f843 2b04 	str.w	r2, [r3], #4
 800867c:	e7d8      	b.n	8008630 <__multiply+0x50>
 800867e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008682:	f1ba 0f00 	cmp.w	sl, #0
 8008686:	d024      	beq.n	80086d2 <__multiply+0xf2>
 8008688:	f104 0e14 	add.w	lr, r4, #20
 800868c:	46a9      	mov	r9, r5
 800868e:	f04f 0c00 	mov.w	ip, #0
 8008692:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008696:	f8d9 1000 	ldr.w	r1, [r9]
 800869a:	fa1f fb82 	uxth.w	fp, r2
 800869e:	b289      	uxth	r1, r1
 80086a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80086a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086a8:	f8d9 2000 	ldr.w	r2, [r9]
 80086ac:	4461      	add	r1, ip
 80086ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80086b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086ba:	b289      	uxth	r1, r1
 80086bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086c0:	4577      	cmp	r7, lr
 80086c2:	f849 1b04 	str.w	r1, [r9], #4
 80086c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086ca:	d8e2      	bhi.n	8008692 <__multiply+0xb2>
 80086cc:	9a01      	ldr	r2, [sp, #4]
 80086ce:	f845 c002 	str.w	ip, [r5, r2]
 80086d2:	9a03      	ldr	r2, [sp, #12]
 80086d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086d8:	3304      	adds	r3, #4
 80086da:	f1b9 0f00 	cmp.w	r9, #0
 80086de:	d021      	beq.n	8008724 <__multiply+0x144>
 80086e0:	6829      	ldr	r1, [r5, #0]
 80086e2:	f104 0c14 	add.w	ip, r4, #20
 80086e6:	46ae      	mov	lr, r5
 80086e8:	f04f 0a00 	mov.w	sl, #0
 80086ec:	f8bc b000 	ldrh.w	fp, [ip]
 80086f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086f4:	fb09 220b 	mla	r2, r9, fp, r2
 80086f8:	4452      	add	r2, sl
 80086fa:	b289      	uxth	r1, r1
 80086fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008700:	f84e 1b04 	str.w	r1, [lr], #4
 8008704:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800870c:	f8be 1000 	ldrh.w	r1, [lr]
 8008710:	fb09 110a 	mla	r1, r9, sl, r1
 8008714:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008718:	4567      	cmp	r7, ip
 800871a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800871e:	d8e5      	bhi.n	80086ec <__multiply+0x10c>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	50a9      	str	r1, [r5, r2]
 8008724:	3504      	adds	r5, #4
 8008726:	e799      	b.n	800865c <__multiply+0x7c>
 8008728:	3e01      	subs	r6, #1
 800872a:	e79b      	b.n	8008664 <__multiply+0x84>
 800872c:	0800a543 	.word	0x0800a543
 8008730:	0800a5c5 	.word	0x0800a5c5

08008734 <__pow5mult>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4615      	mov	r5, r2
 800873a:	f012 0203 	ands.w	r2, r2, #3
 800873e:	4606      	mov	r6, r0
 8008740:	460f      	mov	r7, r1
 8008742:	d007      	beq.n	8008754 <__pow5mult+0x20>
 8008744:	4c25      	ldr	r4, [pc, #148]	; (80087dc <__pow5mult+0xa8>)
 8008746:	3a01      	subs	r2, #1
 8008748:	2300      	movs	r3, #0
 800874a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800874e:	f7ff fe53 	bl	80083f8 <__multadd>
 8008752:	4607      	mov	r7, r0
 8008754:	10ad      	asrs	r5, r5, #2
 8008756:	d03d      	beq.n	80087d4 <__pow5mult+0xa0>
 8008758:	69f4      	ldr	r4, [r6, #28]
 800875a:	b97c      	cbnz	r4, 800877c <__pow5mult+0x48>
 800875c:	2010      	movs	r0, #16
 800875e:	f7ff fc75 	bl	800804c <malloc>
 8008762:	4602      	mov	r2, r0
 8008764:	61f0      	str	r0, [r6, #28]
 8008766:	b928      	cbnz	r0, 8008774 <__pow5mult+0x40>
 8008768:	4b1d      	ldr	r3, [pc, #116]	; (80087e0 <__pow5mult+0xac>)
 800876a:	481e      	ldr	r0, [pc, #120]	; (80087e4 <__pow5mult+0xb0>)
 800876c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008770:	f7fe f922 	bl	80069b8 <__assert_func>
 8008774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008778:	6004      	str	r4, [r0, #0]
 800877a:	60c4      	str	r4, [r0, #12]
 800877c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008784:	b94c      	cbnz	r4, 800879a <__pow5mult+0x66>
 8008786:	f240 2171 	movw	r1, #625	; 0x271
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ff12 	bl	80085b4 <__i2b>
 8008790:	2300      	movs	r3, #0
 8008792:	f8c8 0008 	str.w	r0, [r8, #8]
 8008796:	4604      	mov	r4, r0
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 0900 	mov.w	r9, #0
 800879e:	07eb      	lsls	r3, r5, #31
 80087a0:	d50a      	bpl.n	80087b8 <__pow5mult+0x84>
 80087a2:	4639      	mov	r1, r7
 80087a4:	4622      	mov	r2, r4
 80087a6:	4630      	mov	r0, r6
 80087a8:	f7ff ff1a 	bl	80085e0 <__multiply>
 80087ac:	4639      	mov	r1, r7
 80087ae:	4680      	mov	r8, r0
 80087b0:	4630      	mov	r0, r6
 80087b2:	f7ff fdff 	bl	80083b4 <_Bfree>
 80087b6:	4647      	mov	r7, r8
 80087b8:	106d      	asrs	r5, r5, #1
 80087ba:	d00b      	beq.n	80087d4 <__pow5mult+0xa0>
 80087bc:	6820      	ldr	r0, [r4, #0]
 80087be:	b938      	cbnz	r0, 80087d0 <__pow5mult+0x9c>
 80087c0:	4622      	mov	r2, r4
 80087c2:	4621      	mov	r1, r4
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ff0b 	bl	80085e0 <__multiply>
 80087ca:	6020      	str	r0, [r4, #0]
 80087cc:	f8c0 9000 	str.w	r9, [r0]
 80087d0:	4604      	mov	r4, r0
 80087d2:	e7e4      	b.n	800879e <__pow5mult+0x6a>
 80087d4:	4638      	mov	r0, r7
 80087d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087da:	bf00      	nop
 80087dc:	0800a710 	.word	0x0800a710
 80087e0:	0800a328 	.word	0x0800a328
 80087e4:	0800a5c5 	.word	0x0800a5c5

080087e8 <__lshift>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	460c      	mov	r4, r1
 80087ee:	6849      	ldr	r1, [r1, #4]
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	4607      	mov	r7, r0
 80087fa:	4691      	mov	r9, r2
 80087fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008800:	f108 0601 	add.w	r6, r8, #1
 8008804:	42b3      	cmp	r3, r6
 8008806:	db0b      	blt.n	8008820 <__lshift+0x38>
 8008808:	4638      	mov	r0, r7
 800880a:	f7ff fd93 	bl	8008334 <_Balloc>
 800880e:	4605      	mov	r5, r0
 8008810:	b948      	cbnz	r0, 8008826 <__lshift+0x3e>
 8008812:	4602      	mov	r2, r0
 8008814:	4b28      	ldr	r3, [pc, #160]	; (80088b8 <__lshift+0xd0>)
 8008816:	4829      	ldr	r0, [pc, #164]	; (80088bc <__lshift+0xd4>)
 8008818:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800881c:	f7fe f8cc 	bl	80069b8 <__assert_func>
 8008820:	3101      	adds	r1, #1
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	e7ee      	b.n	8008804 <__lshift+0x1c>
 8008826:	2300      	movs	r3, #0
 8008828:	f100 0114 	add.w	r1, r0, #20
 800882c:	f100 0210 	add.w	r2, r0, #16
 8008830:	4618      	mov	r0, r3
 8008832:	4553      	cmp	r3, sl
 8008834:	db33      	blt.n	800889e <__lshift+0xb6>
 8008836:	6920      	ldr	r0, [r4, #16]
 8008838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800883c:	f104 0314 	add.w	r3, r4, #20
 8008840:	f019 091f 	ands.w	r9, r9, #31
 8008844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008848:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800884c:	d02b      	beq.n	80088a6 <__lshift+0xbe>
 800884e:	f1c9 0e20 	rsb	lr, r9, #32
 8008852:	468a      	mov	sl, r1
 8008854:	2200      	movs	r2, #0
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	fa00 f009 	lsl.w	r0, r0, r9
 800885c:	4310      	orrs	r0, r2
 800885e:	f84a 0b04 	str.w	r0, [sl], #4
 8008862:	f853 2b04 	ldr.w	r2, [r3], #4
 8008866:	459c      	cmp	ip, r3
 8008868:	fa22 f20e 	lsr.w	r2, r2, lr
 800886c:	d8f3      	bhi.n	8008856 <__lshift+0x6e>
 800886e:	ebac 0304 	sub.w	r3, ip, r4
 8008872:	3b15      	subs	r3, #21
 8008874:	f023 0303 	bic.w	r3, r3, #3
 8008878:	3304      	adds	r3, #4
 800887a:	f104 0015 	add.w	r0, r4, #21
 800887e:	4584      	cmp	ip, r0
 8008880:	bf38      	it	cc
 8008882:	2304      	movcc	r3, #4
 8008884:	50ca      	str	r2, [r1, r3]
 8008886:	b10a      	cbz	r2, 800888c <__lshift+0xa4>
 8008888:	f108 0602 	add.w	r6, r8, #2
 800888c:	3e01      	subs	r6, #1
 800888e:	4638      	mov	r0, r7
 8008890:	612e      	str	r6, [r5, #16]
 8008892:	4621      	mov	r1, r4
 8008894:	f7ff fd8e 	bl	80083b4 <_Bfree>
 8008898:	4628      	mov	r0, r5
 800889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889e:	f842 0f04 	str.w	r0, [r2, #4]!
 80088a2:	3301      	adds	r3, #1
 80088a4:	e7c5      	b.n	8008832 <__lshift+0x4a>
 80088a6:	3904      	subs	r1, #4
 80088a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80088b0:	459c      	cmp	ip, r3
 80088b2:	d8f9      	bhi.n	80088a8 <__lshift+0xc0>
 80088b4:	e7ea      	b.n	800888c <__lshift+0xa4>
 80088b6:	bf00      	nop
 80088b8:	0800a543 	.word	0x0800a543
 80088bc:	0800a5c5 	.word	0x0800a5c5

080088c0 <__mcmp>:
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	6902      	ldr	r2, [r0, #16]
 80088c4:	690c      	ldr	r4, [r1, #16]
 80088c6:	1b12      	subs	r2, r2, r4
 80088c8:	d10e      	bne.n	80088e8 <__mcmp+0x28>
 80088ca:	f100 0314 	add.w	r3, r0, #20
 80088ce:	3114      	adds	r1, #20
 80088d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088e0:	42a5      	cmp	r5, r4
 80088e2:	d003      	beq.n	80088ec <__mcmp+0x2c>
 80088e4:	d305      	bcc.n	80088f2 <__mcmp+0x32>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4610      	mov	r0, r2
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	4283      	cmp	r3, r0
 80088ee:	d3f3      	bcc.n	80088d8 <__mcmp+0x18>
 80088f0:	e7fa      	b.n	80088e8 <__mcmp+0x28>
 80088f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f6:	e7f7      	b.n	80088e8 <__mcmp+0x28>

080088f8 <__mdiff>:
 80088f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	4606      	mov	r6, r0
 8008900:	4611      	mov	r1, r2
 8008902:	4620      	mov	r0, r4
 8008904:	4690      	mov	r8, r2
 8008906:	f7ff ffdb 	bl	80088c0 <__mcmp>
 800890a:	1e05      	subs	r5, r0, #0
 800890c:	d110      	bne.n	8008930 <__mdiff+0x38>
 800890e:	4629      	mov	r1, r5
 8008910:	4630      	mov	r0, r6
 8008912:	f7ff fd0f 	bl	8008334 <_Balloc>
 8008916:	b930      	cbnz	r0, 8008926 <__mdiff+0x2e>
 8008918:	4b3a      	ldr	r3, [pc, #232]	; (8008a04 <__mdiff+0x10c>)
 800891a:	4602      	mov	r2, r0
 800891c:	f240 2137 	movw	r1, #567	; 0x237
 8008920:	4839      	ldr	r0, [pc, #228]	; (8008a08 <__mdiff+0x110>)
 8008922:	f7fe f849 	bl	80069b8 <__assert_func>
 8008926:	2301      	movs	r3, #1
 8008928:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800892c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	bfa4      	itt	ge
 8008932:	4643      	movge	r3, r8
 8008934:	46a0      	movge	r8, r4
 8008936:	4630      	mov	r0, r6
 8008938:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800893c:	bfa6      	itte	ge
 800893e:	461c      	movge	r4, r3
 8008940:	2500      	movge	r5, #0
 8008942:	2501      	movlt	r5, #1
 8008944:	f7ff fcf6 	bl	8008334 <_Balloc>
 8008948:	b920      	cbnz	r0, 8008954 <__mdiff+0x5c>
 800894a:	4b2e      	ldr	r3, [pc, #184]	; (8008a04 <__mdiff+0x10c>)
 800894c:	4602      	mov	r2, r0
 800894e:	f240 2145 	movw	r1, #581	; 0x245
 8008952:	e7e5      	b.n	8008920 <__mdiff+0x28>
 8008954:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008958:	6926      	ldr	r6, [r4, #16]
 800895a:	60c5      	str	r5, [r0, #12]
 800895c:	f104 0914 	add.w	r9, r4, #20
 8008960:	f108 0514 	add.w	r5, r8, #20
 8008964:	f100 0e14 	add.w	lr, r0, #20
 8008968:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800896c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008970:	f108 0210 	add.w	r2, r8, #16
 8008974:	46f2      	mov	sl, lr
 8008976:	2100      	movs	r1, #0
 8008978:	f859 3b04 	ldr.w	r3, [r9], #4
 800897c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008980:	fa11 f88b 	uxtah	r8, r1, fp
 8008984:	b299      	uxth	r1, r3
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	eba8 0801 	sub.w	r8, r8, r1
 800898c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008990:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008994:	fa1f f888 	uxth.w	r8, r8
 8008998:	1419      	asrs	r1, r3, #16
 800899a:	454e      	cmp	r6, r9
 800899c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089a0:	f84a 3b04 	str.w	r3, [sl], #4
 80089a4:	d8e8      	bhi.n	8008978 <__mdiff+0x80>
 80089a6:	1b33      	subs	r3, r6, r4
 80089a8:	3b15      	subs	r3, #21
 80089aa:	f023 0303 	bic.w	r3, r3, #3
 80089ae:	3304      	adds	r3, #4
 80089b0:	3415      	adds	r4, #21
 80089b2:	42a6      	cmp	r6, r4
 80089b4:	bf38      	it	cc
 80089b6:	2304      	movcc	r3, #4
 80089b8:	441d      	add	r5, r3
 80089ba:	4473      	add	r3, lr
 80089bc:	469e      	mov	lr, r3
 80089be:	462e      	mov	r6, r5
 80089c0:	4566      	cmp	r6, ip
 80089c2:	d30e      	bcc.n	80089e2 <__mdiff+0xea>
 80089c4:	f10c 0203 	add.w	r2, ip, #3
 80089c8:	1b52      	subs	r2, r2, r5
 80089ca:	f022 0203 	bic.w	r2, r2, #3
 80089ce:	3d03      	subs	r5, #3
 80089d0:	45ac      	cmp	ip, r5
 80089d2:	bf38      	it	cc
 80089d4:	2200      	movcc	r2, #0
 80089d6:	4413      	add	r3, r2
 80089d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80089dc:	b17a      	cbz	r2, 80089fe <__mdiff+0x106>
 80089de:	6107      	str	r7, [r0, #16]
 80089e0:	e7a4      	b.n	800892c <__mdiff+0x34>
 80089e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80089e6:	fa11 f288 	uxtah	r2, r1, r8
 80089ea:	1414      	asrs	r4, r2, #16
 80089ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089f0:	b292      	uxth	r2, r2
 80089f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089f6:	f84e 2b04 	str.w	r2, [lr], #4
 80089fa:	1421      	asrs	r1, r4, #16
 80089fc:	e7e0      	b.n	80089c0 <__mdiff+0xc8>
 80089fe:	3f01      	subs	r7, #1
 8008a00:	e7ea      	b.n	80089d8 <__mdiff+0xe0>
 8008a02:	bf00      	nop
 8008a04:	0800a543 	.word	0x0800a543
 8008a08:	0800a5c5 	.word	0x0800a5c5

08008a0c <__ulp>:
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	ed8d 0b00 	vstr	d0, [sp]
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <__ulp+0x48>)
 8008a16:	4013      	ands	r3, r2
 8008a18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc08      	bgt.n	8008a32 <__ulp+0x26>
 8008a20:	425b      	negs	r3, r3
 8008a22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008a26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a2a:	da04      	bge.n	8008a36 <__ulp+0x2a>
 8008a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a30:	4113      	asrs	r3, r2
 8008a32:	2200      	movs	r2, #0
 8008a34:	e008      	b.n	8008a48 <__ulp+0x3c>
 8008a36:	f1a2 0314 	sub.w	r3, r2, #20
 8008a3a:	2b1e      	cmp	r3, #30
 8008a3c:	bfda      	itte	le
 8008a3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008a42:	40da      	lsrle	r2, r3
 8008a44:	2201      	movgt	r2, #1
 8008a46:	2300      	movs	r3, #0
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	ec41 0b10 	vmov	d0, r0, r1
 8008a50:	b002      	add	sp, #8
 8008a52:	4770      	bx	lr
 8008a54:	7ff00000 	.word	0x7ff00000

08008a58 <__b2d>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	6906      	ldr	r6, [r0, #16]
 8008a5e:	f100 0814 	add.w	r8, r0, #20
 8008a62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a66:	1f37      	subs	r7, r6, #4
 8008a68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7ff fd53 	bl	8008518 <__hi0bits>
 8008a72:	f1c0 0320 	rsb	r3, r0, #32
 8008a76:	280a      	cmp	r0, #10
 8008a78:	600b      	str	r3, [r1, #0]
 8008a7a:	491b      	ldr	r1, [pc, #108]	; (8008ae8 <__b2d+0x90>)
 8008a7c:	dc15      	bgt.n	8008aaa <__b2d+0x52>
 8008a7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a82:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a86:	45b8      	cmp	r8, r7
 8008a88:	ea43 0501 	orr.w	r5, r3, r1
 8008a8c:	bf34      	ite	cc
 8008a8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a92:	2300      	movcs	r3, #0
 8008a94:	3015      	adds	r0, #21
 8008a96:	fa02 f000 	lsl.w	r0, r2, r0
 8008a9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a9e:	4303      	orrs	r3, r0
 8008aa0:	461c      	mov	r4, r3
 8008aa2:	ec45 4b10 	vmov	d0, r4, r5
 8008aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aaa:	45b8      	cmp	r8, r7
 8008aac:	bf3a      	itte	cc
 8008aae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ab2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ab6:	2300      	movcs	r3, #0
 8008ab8:	380b      	subs	r0, #11
 8008aba:	d012      	beq.n	8008ae2 <__b2d+0x8a>
 8008abc:	f1c0 0120 	rsb	r1, r0, #32
 8008ac0:	fa23 f401 	lsr.w	r4, r3, r1
 8008ac4:	4082      	lsls	r2, r0
 8008ac6:	4322      	orrs	r2, r4
 8008ac8:	4547      	cmp	r7, r8
 8008aca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008ace:	bf8c      	ite	hi
 8008ad0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ad4:	2200      	movls	r2, #0
 8008ad6:	4083      	lsls	r3, r0
 8008ad8:	40ca      	lsrs	r2, r1
 8008ada:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	e7de      	b.n	8008aa0 <__b2d+0x48>
 8008ae2:	ea42 0501 	orr.w	r5, r2, r1
 8008ae6:	e7db      	b.n	8008aa0 <__b2d+0x48>
 8008ae8:	3ff00000 	.word	0x3ff00000

08008aec <__d2b>:
 8008aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	460f      	mov	r7, r1
 8008af2:	2101      	movs	r1, #1
 8008af4:	ec59 8b10 	vmov	r8, r9, d0
 8008af8:	4616      	mov	r6, r2
 8008afa:	f7ff fc1b 	bl	8008334 <_Balloc>
 8008afe:	4604      	mov	r4, r0
 8008b00:	b930      	cbnz	r0, 8008b10 <__d2b+0x24>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <__d2b+0xac>)
 8008b06:	4825      	ldr	r0, [pc, #148]	; (8008b9c <__d2b+0xb0>)
 8008b08:	f240 310f 	movw	r1, #783	; 0x30f
 8008b0c:	f7fd ff54 	bl	80069b8 <__assert_func>
 8008b10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b18:	bb2d      	cbnz	r5, 8008b66 <__d2b+0x7a>
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b20:	d026      	beq.n	8008b70 <__d2b+0x84>
 8008b22:	4668      	mov	r0, sp
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	f7ff fd17 	bl	8008558 <__lo0bits>
 8008b2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b2e:	b1e8      	cbz	r0, 8008b6c <__d2b+0x80>
 8008b30:	f1c0 0320 	rsb	r3, r0, #32
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	40c2      	lsrs	r2, r0
 8008b3c:	6163      	str	r3, [r4, #20]
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	61a3      	str	r3, [r4, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf14      	ite	ne
 8008b48:	2202      	movne	r2, #2
 8008b4a:	2201      	moveq	r2, #1
 8008b4c:	6122      	str	r2, [r4, #16]
 8008b4e:	b1bd      	cbz	r5, 8008b80 <__d2b+0x94>
 8008b50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b54:	4405      	add	r5, r0
 8008b56:	603d      	str	r5, [r7, #0]
 8008b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b5c:	6030      	str	r0, [r6, #0]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	b003      	add	sp, #12
 8008b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b6a:	e7d6      	b.n	8008b1a <__d2b+0x2e>
 8008b6c:	6161      	str	r1, [r4, #20]
 8008b6e:	e7e7      	b.n	8008b40 <__d2b+0x54>
 8008b70:	a801      	add	r0, sp, #4
 8008b72:	f7ff fcf1 	bl	8008558 <__lo0bits>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	6163      	str	r3, [r4, #20]
 8008b7a:	3020      	adds	r0, #32
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	e7e5      	b.n	8008b4c <__d2b+0x60>
 8008b80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b88:	6038      	str	r0, [r7, #0]
 8008b8a:	6918      	ldr	r0, [r3, #16]
 8008b8c:	f7ff fcc4 	bl	8008518 <__hi0bits>
 8008b90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b94:	e7e2      	b.n	8008b5c <__d2b+0x70>
 8008b96:	bf00      	nop
 8008b98:	0800a543 	.word	0x0800a543
 8008b9c:	0800a5c5 	.word	0x0800a5c5

08008ba0 <__ratio>:
 8008ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	4688      	mov	r8, r1
 8008ba6:	4669      	mov	r1, sp
 8008ba8:	4681      	mov	r9, r0
 8008baa:	f7ff ff55 	bl	8008a58 <__b2d>
 8008bae:	a901      	add	r1, sp, #4
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	ec55 4b10 	vmov	r4, r5, d0
 8008bb6:	f7ff ff4f 	bl	8008a58 <__b2d>
 8008bba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bc2:	eba3 0c02 	sub.w	ip, r3, r2
 8008bc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008bd0:	ec51 0b10 	vmov	r0, r1, d0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfd6      	itet	le
 8008bd8:	460a      	movle	r2, r1
 8008bda:	462a      	movgt	r2, r5
 8008bdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008be0:	468b      	mov	fp, r1
 8008be2:	462f      	mov	r7, r5
 8008be4:	bfd4      	ite	le
 8008be6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008bea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bee:	4620      	mov	r0, r4
 8008bf0:	ee10 2a10 	vmov	r2, s0
 8008bf4:	465b      	mov	r3, fp
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	f7f7 fe32 	bl	8000860 <__aeabi_ddiv>
 8008bfc:	ec41 0b10 	vmov	d0, r0, r1
 8008c00:	b003      	add	sp, #12
 8008c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c06 <__copybits>:
 8008c06:	3901      	subs	r1, #1
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	1149      	asrs	r1, r1, #5
 8008c0c:	6914      	ldr	r4, [r2, #16]
 8008c0e:	3101      	adds	r1, #1
 8008c10:	f102 0314 	add.w	r3, r2, #20
 8008c14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c1c:	1f05      	subs	r5, r0, #4
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	d30c      	bcc.n	8008c3c <__copybits+0x36>
 8008c22:	1aa3      	subs	r3, r4, r2
 8008c24:	3b11      	subs	r3, #17
 8008c26:	f023 0303 	bic.w	r3, r3, #3
 8008c2a:	3211      	adds	r2, #17
 8008c2c:	42a2      	cmp	r2, r4
 8008c2e:	bf88      	it	hi
 8008c30:	2300      	movhi	r3, #0
 8008c32:	4418      	add	r0, r3
 8008c34:	2300      	movs	r3, #0
 8008c36:	4288      	cmp	r0, r1
 8008c38:	d305      	bcc.n	8008c46 <__copybits+0x40>
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c40:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c44:	e7eb      	b.n	8008c1e <__copybits+0x18>
 8008c46:	f840 3b04 	str.w	r3, [r0], #4
 8008c4a:	e7f4      	b.n	8008c36 <__copybits+0x30>

08008c4c <__any_on>:
 8008c4c:	f100 0214 	add.w	r2, r0, #20
 8008c50:	6900      	ldr	r0, [r0, #16]
 8008c52:	114b      	asrs	r3, r1, #5
 8008c54:	4298      	cmp	r0, r3
 8008c56:	b510      	push	{r4, lr}
 8008c58:	db11      	blt.n	8008c7e <__any_on+0x32>
 8008c5a:	dd0a      	ble.n	8008c72 <__any_on+0x26>
 8008c5c:	f011 011f 	ands.w	r1, r1, #31
 8008c60:	d007      	beq.n	8008c72 <__any_on+0x26>
 8008c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c66:	fa24 f001 	lsr.w	r0, r4, r1
 8008c6a:	fa00 f101 	lsl.w	r1, r0, r1
 8008c6e:	428c      	cmp	r4, r1
 8008c70:	d10b      	bne.n	8008c8a <__any_on+0x3e>
 8008c72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d803      	bhi.n	8008c82 <__any_on+0x36>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	4603      	mov	r3, r0
 8008c80:	e7f7      	b.n	8008c72 <__any_on+0x26>
 8008c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d0f5      	beq.n	8008c76 <__any_on+0x2a>
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	e7f6      	b.n	8008c7c <__any_on+0x30>

08008c8e <__sread>:
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	460c      	mov	r4, r1
 8008c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c96:	f000 f8c7 	bl	8008e28 <_read_r>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	bfab      	itete	ge
 8008c9e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ca0:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca2:	181b      	addge	r3, r3, r0
 8008ca4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ca8:	bfac      	ite	ge
 8008caa:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cac:	81a3      	strhlt	r3, [r4, #12]
 8008cae:	bd10      	pop	{r4, pc}

08008cb0 <__swrite>:
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	461f      	mov	r7, r3
 8008cb6:	898b      	ldrh	r3, [r1, #12]
 8008cb8:	05db      	lsls	r3, r3, #23
 8008cba:	4605      	mov	r5, r0
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	4616      	mov	r6, r2
 8008cc0:	d505      	bpl.n	8008cce <__swrite+0x1e>
 8008cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f000 f89b 	bl	8008e04 <_lseek_r>
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	4628      	mov	r0, r5
 8008ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce4:	f000 b8c2 	b.w	8008e6c <_write_r>

08008ce8 <__sseek>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	460c      	mov	r4, r1
 8008cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf0:	f000 f888 	bl	8008e04 <_lseek_r>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	bf15      	itete	ne
 8008cfa:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cfc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d00:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d04:	81a3      	strheq	r3, [r4, #12]
 8008d06:	bf18      	it	ne
 8008d08:	81a3      	strhne	r3, [r4, #12]
 8008d0a:	bd10      	pop	{r4, pc}

08008d0c <__sclose>:
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	f000 b868 	b.w	8008de4 <_close_r>

08008d14 <fiprintf>:
 8008d14:	b40e      	push	{r1, r2, r3}
 8008d16:	b503      	push	{r0, r1, lr}
 8008d18:	4601      	mov	r1, r0
 8008d1a:	ab03      	add	r3, sp, #12
 8008d1c:	4805      	ldr	r0, [pc, #20]	; (8008d34 <fiprintf+0x20>)
 8008d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d22:	6800      	ldr	r0, [r0, #0]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	f000 f947 	bl	8008fb8 <_vfiprintf_r>
 8008d2a:	b002      	add	sp, #8
 8008d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d30:	b003      	add	sp, #12
 8008d32:	4770      	bx	lr
 8008d34:	200001d8 	.word	0x200001d8

08008d38 <_realloc_r>:
 8008d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3c:	4680      	mov	r8, r0
 8008d3e:	4614      	mov	r4, r2
 8008d40:	460e      	mov	r6, r1
 8008d42:	b921      	cbnz	r1, 8008d4e <_realloc_r+0x16>
 8008d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	4611      	mov	r1, r2
 8008d4a:	f7ff b9a7 	b.w	800809c <_malloc_r>
 8008d4e:	b92a      	cbnz	r2, 8008d5c <_realloc_r+0x24>
 8008d50:	f000 f8bc 	bl	8008ecc <_free_r>
 8008d54:	4625      	mov	r5, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d5c:	f000 fa46 	bl	80091ec <_malloc_usable_size_r>
 8008d60:	4284      	cmp	r4, r0
 8008d62:	4607      	mov	r7, r0
 8008d64:	d802      	bhi.n	8008d6c <_realloc_r+0x34>
 8008d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d6a:	d812      	bhi.n	8008d92 <_realloc_r+0x5a>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7ff f994 	bl	800809c <_malloc_r>
 8008d74:	4605      	mov	r5, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0ed      	beq.n	8008d56 <_realloc_r+0x1e>
 8008d7a:	42bc      	cmp	r4, r7
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4631      	mov	r1, r6
 8008d80:	bf28      	it	cs
 8008d82:	463a      	movcs	r2, r7
 8008d84:	f7fd fe00 	bl	8006988 <memcpy>
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f000 f89e 	bl	8008ecc <_free_r>
 8008d90:	e7e1      	b.n	8008d56 <_realloc_r+0x1e>
 8008d92:	4635      	mov	r5, r6
 8008d94:	e7df      	b.n	8008d56 <_realloc_r+0x1e>

08008d96 <__ascii_wctomb>:
 8008d96:	b149      	cbz	r1, 8008dac <__ascii_wctomb+0x16>
 8008d98:	2aff      	cmp	r2, #255	; 0xff
 8008d9a:	bf85      	ittet	hi
 8008d9c:	238a      	movhi	r3, #138	; 0x8a
 8008d9e:	6003      	strhi	r3, [r0, #0]
 8008da0:	700a      	strbls	r2, [r1, #0]
 8008da2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008da6:	bf98      	it	ls
 8008da8:	2001      	movls	r0, #1
 8008daa:	4770      	bx	lr
 8008dac:	4608      	mov	r0, r1
 8008dae:	4770      	bx	lr

08008db0 <memmove>:
 8008db0:	4288      	cmp	r0, r1
 8008db2:	b510      	push	{r4, lr}
 8008db4:	eb01 0402 	add.w	r4, r1, r2
 8008db8:	d902      	bls.n	8008dc0 <memmove+0x10>
 8008dba:	4284      	cmp	r4, r0
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	d807      	bhi.n	8008dd0 <memmove+0x20>
 8008dc0:	1e43      	subs	r3, r0, #1
 8008dc2:	42a1      	cmp	r1, r4
 8008dc4:	d008      	beq.n	8008dd8 <memmove+0x28>
 8008dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dce:	e7f8      	b.n	8008dc2 <memmove+0x12>
 8008dd0:	4402      	add	r2, r0
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	428a      	cmp	r2, r1
 8008dd6:	d100      	bne.n	8008dda <memmove+0x2a>
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008de2:	e7f7      	b.n	8008dd4 <memmove+0x24>

08008de4 <_close_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d06      	ldr	r5, [pc, #24]	; (8008e00 <_close_r+0x1c>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	602b      	str	r3, [r5, #0]
 8008df0:	f7f9 f8fd 	bl	8001fee <_close>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_close_r+0x1a>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_close_r+0x1a>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000a88 	.word	0x20000a88

08008e04 <_lseek_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	4d07      	ldr	r5, [pc, #28]	; (8008e24 <_lseek_r+0x20>)
 8008e08:	4604      	mov	r4, r0
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f7f9 f912 	bl	800203c <_lseek>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_lseek_r+0x1e>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_lseek_r+0x1e>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	20000a88 	.word	0x20000a88

08008e28 <_read_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_read_r+0x20>)
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f9 f8a0 	bl	8001f7c <_read>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_read_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_read_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20000a88 	.word	0x20000a88

08008e4c <_sbrk_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d06      	ldr	r5, [pc, #24]	; (8008e68 <_sbrk_r+0x1c>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	f7f9 f8fe 	bl	8002058 <_sbrk>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_sbrk_r+0x1a>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_sbrk_r+0x1a>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000a88 	.word	0x20000a88

08008e6c <_write_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	4d07      	ldr	r5, [pc, #28]	; (8008e8c <_write_r+0x20>)
 8008e70:	4604      	mov	r4, r0
 8008e72:	4608      	mov	r0, r1
 8008e74:	4611      	mov	r1, r2
 8008e76:	2200      	movs	r2, #0
 8008e78:	602a      	str	r2, [r5, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7f9 f89b 	bl	8001fb6 <_write>
 8008e80:	1c43      	adds	r3, r0, #1
 8008e82:	d102      	bne.n	8008e8a <_write_r+0x1e>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	b103      	cbz	r3, 8008e8a <_write_r+0x1e>
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	20000a88 	.word	0x20000a88

08008e90 <abort>:
 8008e90:	b508      	push	{r3, lr}
 8008e92:	2006      	movs	r0, #6
 8008e94:	f000 faf4 	bl	8009480 <raise>
 8008e98:	2001      	movs	r0, #1
 8008e9a:	f7f9 f865 	bl	8001f68 <_exit>

08008e9e <_calloc_r>:
 8008e9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ea0:	fba1 2402 	umull	r2, r4, r1, r2
 8008ea4:	b94c      	cbnz	r4, 8008eba <_calloc_r+0x1c>
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	9201      	str	r2, [sp, #4]
 8008eaa:	f7ff f8f7 	bl	800809c <_malloc_r>
 8008eae:	9a01      	ldr	r2, [sp, #4]
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	b930      	cbnz	r0, 8008ec2 <_calloc_r+0x24>
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	b003      	add	sp, #12
 8008eb8:	bd30      	pop	{r4, r5, pc}
 8008eba:	220c      	movs	r2, #12
 8008ebc:	6002      	str	r2, [r0, #0]
 8008ebe:	2500      	movs	r5, #0
 8008ec0:	e7f8      	b.n	8008eb4 <_calloc_r+0x16>
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	f7fd fd28 	bl	8006918 <memset>
 8008ec8:	e7f4      	b.n	8008eb4 <_calloc_r+0x16>
	...

08008ecc <_free_r>:
 8008ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d044      	beq.n	8008f5c <_free_r+0x90>
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f1a1 0404 	sub.w	r4, r1, #4
 8008ede:	bfb8      	it	lt
 8008ee0:	18e4      	addlt	r4, r4, r3
 8008ee2:	f7ff fa1b 	bl	800831c <__malloc_lock>
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <_free_r+0x94>)
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	b933      	cbnz	r3, 8008efc <_free_r+0x30>
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6014      	str	r4, [r2, #0]
 8008ef2:	b003      	add	sp, #12
 8008ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef8:	f7ff ba16 	b.w	8008328 <__malloc_unlock>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d908      	bls.n	8008f12 <_free_r+0x46>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf01      	itttt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	1949      	addeq	r1, r1, r5
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	e7ed      	b.n	8008eee <_free_r+0x22>
 8008f12:	461a      	mov	r2, r3
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b10b      	cbz	r3, 8008f1c <_free_r+0x50>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d9fa      	bls.n	8008f12 <_free_r+0x46>
 8008f1c:	6811      	ldr	r1, [r2, #0]
 8008f1e:	1855      	adds	r5, r2, r1
 8008f20:	42a5      	cmp	r5, r4
 8008f22:	d10b      	bne.n	8008f3c <_free_r+0x70>
 8008f24:	6824      	ldr	r4, [r4, #0]
 8008f26:	4421      	add	r1, r4
 8008f28:	1854      	adds	r4, r2, r1
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	d1e0      	bne.n	8008ef2 <_free_r+0x26>
 8008f30:	681c      	ldr	r4, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	6053      	str	r3, [r2, #4]
 8008f36:	440c      	add	r4, r1
 8008f38:	6014      	str	r4, [r2, #0]
 8008f3a:	e7da      	b.n	8008ef2 <_free_r+0x26>
 8008f3c:	d902      	bls.n	8008f44 <_free_r+0x78>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	e7d6      	b.n	8008ef2 <_free_r+0x26>
 8008f44:	6825      	ldr	r5, [r4, #0]
 8008f46:	1961      	adds	r1, r4, r5
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	bf04      	itt	eq
 8008f4c:	6819      	ldreq	r1, [r3, #0]
 8008f4e:	685b      	ldreq	r3, [r3, #4]
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	bf04      	itt	eq
 8008f54:	1949      	addeq	r1, r1, r5
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	6054      	str	r4, [r2, #4]
 8008f5a:	e7ca      	b.n	8008ef2 <_free_r+0x26>
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bd30      	pop	{r4, r5, pc}
 8008f60:	20000a80 	.word	0x20000a80

08008f64 <__sfputc_r>:
 8008f64:	6893      	ldr	r3, [r2, #8]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	b410      	push	{r4}
 8008f6c:	6093      	str	r3, [r2, #8]
 8008f6e:	da08      	bge.n	8008f82 <__sfputc_r+0x1e>
 8008f70:	6994      	ldr	r4, [r2, #24]
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	db01      	blt.n	8008f7a <__sfputc_r+0x16>
 8008f76:	290a      	cmp	r1, #10
 8008f78:	d103      	bne.n	8008f82 <__sfputc_r+0x1e>
 8008f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7e:	f000 b93d 	b.w	80091fc <__swbuf_r>
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	1c58      	adds	r0, r3, #1
 8008f86:	6010      	str	r0, [r2, #0]
 8008f88:	7019      	strb	r1, [r3, #0]
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <__sfputs_r>:
 8008f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f94:	4606      	mov	r6, r0
 8008f96:	460f      	mov	r7, r1
 8008f98:	4614      	mov	r4, r2
 8008f9a:	18d5      	adds	r5, r2, r3
 8008f9c:	42ac      	cmp	r4, r5
 8008f9e:	d101      	bne.n	8008fa4 <__sfputs_r+0x12>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e007      	b.n	8008fb4 <__sfputs_r+0x22>
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	463a      	mov	r2, r7
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff ffda 	bl	8008f64 <__sfputc_r>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d1f3      	bne.n	8008f9c <__sfputs_r+0xa>
 8008fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb8 <_vfiprintf_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	b09d      	sub	sp, #116	; 0x74
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	4698      	mov	r8, r3
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	b118      	cbz	r0, 8008fd0 <_vfiprintf_r+0x18>
 8008fc8:	6a03      	ldr	r3, [r0, #32]
 8008fca:	b90b      	cbnz	r3, 8008fd0 <_vfiprintf_r+0x18>
 8008fcc:	f7fc fdd2 	bl	8005b74 <__sinit>
 8008fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd2:	07d9      	lsls	r1, r3, #31
 8008fd4:	d405      	bmi.n	8008fe2 <_vfiprintf_r+0x2a>
 8008fd6:	89ab      	ldrh	r3, [r5, #12]
 8008fd8:	059a      	lsls	r2, r3, #22
 8008fda:	d402      	bmi.n	8008fe2 <_vfiprintf_r+0x2a>
 8008fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fde:	f7fd fcd1 	bl	8006984 <__retarget_lock_acquire_recursive>
 8008fe2:	89ab      	ldrh	r3, [r5, #12]
 8008fe4:	071b      	lsls	r3, r3, #28
 8008fe6:	d501      	bpl.n	8008fec <_vfiprintf_r+0x34>
 8008fe8:	692b      	ldr	r3, [r5, #16]
 8008fea:	b99b      	cbnz	r3, 8009014 <_vfiprintf_r+0x5c>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 f942 	bl	8009278 <__swsetup_r>
 8008ff4:	b170      	cbz	r0, 8009014 <_vfiprintf_r+0x5c>
 8008ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff8:	07dc      	lsls	r4, r3, #31
 8008ffa:	d504      	bpl.n	8009006 <_vfiprintf_r+0x4e>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009000:	b01d      	add	sp, #116	; 0x74
 8009002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	0598      	lsls	r0, r3, #22
 800900a:	d4f7      	bmi.n	8008ffc <_vfiprintf_r+0x44>
 800900c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900e:	f7fd fcba 	bl	8006986 <__retarget_lock_release_recursive>
 8009012:	e7f3      	b.n	8008ffc <_vfiprintf_r+0x44>
 8009014:	2300      	movs	r3, #0
 8009016:	9309      	str	r3, [sp, #36]	; 0x24
 8009018:	2320      	movs	r3, #32
 800901a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009022:	2330      	movs	r3, #48	; 0x30
 8009024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091d8 <_vfiprintf_r+0x220>
 8009028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800902c:	f04f 0901 	mov.w	r9, #1
 8009030:	4623      	mov	r3, r4
 8009032:	469a      	mov	sl, r3
 8009034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009038:	b10a      	cbz	r2, 800903e <_vfiprintf_r+0x86>
 800903a:	2a25      	cmp	r2, #37	; 0x25
 800903c:	d1f9      	bne.n	8009032 <_vfiprintf_r+0x7a>
 800903e:	ebba 0b04 	subs.w	fp, sl, r4
 8009042:	d00b      	beq.n	800905c <_vfiprintf_r+0xa4>
 8009044:	465b      	mov	r3, fp
 8009046:	4622      	mov	r2, r4
 8009048:	4629      	mov	r1, r5
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ffa1 	bl	8008f92 <__sfputs_r>
 8009050:	3001      	adds	r0, #1
 8009052:	f000 80a9 	beq.w	80091a8 <_vfiprintf_r+0x1f0>
 8009056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009058:	445a      	add	r2, fp
 800905a:	9209      	str	r2, [sp, #36]	; 0x24
 800905c:	f89a 3000 	ldrb.w	r3, [sl]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 80a1 	beq.w	80091a8 <_vfiprintf_r+0x1f0>
 8009066:	2300      	movs	r3, #0
 8009068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800906c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009070:	f10a 0a01 	add.w	sl, sl, #1
 8009074:	9304      	str	r3, [sp, #16]
 8009076:	9307      	str	r3, [sp, #28]
 8009078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800907c:	931a      	str	r3, [sp, #104]	; 0x68
 800907e:	4654      	mov	r4, sl
 8009080:	2205      	movs	r2, #5
 8009082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009086:	4854      	ldr	r0, [pc, #336]	; (80091d8 <_vfiprintf_r+0x220>)
 8009088:	f7f7 f8a2 	bl	80001d0 <memchr>
 800908c:	9a04      	ldr	r2, [sp, #16]
 800908e:	b9d8      	cbnz	r0, 80090c8 <_vfiprintf_r+0x110>
 8009090:	06d1      	lsls	r1, r2, #27
 8009092:	bf44      	itt	mi
 8009094:	2320      	movmi	r3, #32
 8009096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800909a:	0713      	lsls	r3, r2, #28
 800909c:	bf44      	itt	mi
 800909e:	232b      	movmi	r3, #43	; 0x2b
 80090a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b2a      	cmp	r3, #42	; 0x2a
 80090aa:	d015      	beq.n	80090d8 <_vfiprintf_r+0x120>
 80090ac:	9a07      	ldr	r2, [sp, #28]
 80090ae:	4654      	mov	r4, sl
 80090b0:	2000      	movs	r0, #0
 80090b2:	f04f 0c0a 	mov.w	ip, #10
 80090b6:	4621      	mov	r1, r4
 80090b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090bc:	3b30      	subs	r3, #48	; 0x30
 80090be:	2b09      	cmp	r3, #9
 80090c0:	d94d      	bls.n	800915e <_vfiprintf_r+0x1a6>
 80090c2:	b1b0      	cbz	r0, 80090f2 <_vfiprintf_r+0x13a>
 80090c4:	9207      	str	r2, [sp, #28]
 80090c6:	e014      	b.n	80090f2 <_vfiprintf_r+0x13a>
 80090c8:	eba0 0308 	sub.w	r3, r0, r8
 80090cc:	fa09 f303 	lsl.w	r3, r9, r3
 80090d0:	4313      	orrs	r3, r2
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	46a2      	mov	sl, r4
 80090d6:	e7d2      	b.n	800907e <_vfiprintf_r+0xc6>
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	1d19      	adds	r1, r3, #4
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	9103      	str	r1, [sp, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bfbb      	ittet	lt
 80090e4:	425b      	neglt	r3, r3
 80090e6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ea:	9307      	strge	r3, [sp, #28]
 80090ec:	9307      	strlt	r3, [sp, #28]
 80090ee:	bfb8      	it	lt
 80090f0:	9204      	strlt	r2, [sp, #16]
 80090f2:	7823      	ldrb	r3, [r4, #0]
 80090f4:	2b2e      	cmp	r3, #46	; 0x2e
 80090f6:	d10c      	bne.n	8009112 <_vfiprintf_r+0x15a>
 80090f8:	7863      	ldrb	r3, [r4, #1]
 80090fa:	2b2a      	cmp	r3, #42	; 0x2a
 80090fc:	d134      	bne.n	8009168 <_vfiprintf_r+0x1b0>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	1d1a      	adds	r2, r3, #4
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	9203      	str	r2, [sp, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800910e:	3402      	adds	r4, #2
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091e8 <_vfiprintf_r+0x230>
 8009116:	7821      	ldrb	r1, [r4, #0]
 8009118:	2203      	movs	r2, #3
 800911a:	4650      	mov	r0, sl
 800911c:	f7f7 f858 	bl	80001d0 <memchr>
 8009120:	b138      	cbz	r0, 8009132 <_vfiprintf_r+0x17a>
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	eba0 000a 	sub.w	r0, r0, sl
 8009128:	2240      	movs	r2, #64	; 0x40
 800912a:	4082      	lsls	r2, r0
 800912c:	4313      	orrs	r3, r2
 800912e:	3401      	adds	r4, #1
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009136:	4829      	ldr	r0, [pc, #164]	; (80091dc <_vfiprintf_r+0x224>)
 8009138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800913c:	2206      	movs	r2, #6
 800913e:	f7f7 f847 	bl	80001d0 <memchr>
 8009142:	2800      	cmp	r0, #0
 8009144:	d03f      	beq.n	80091c6 <_vfiprintf_r+0x20e>
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <_vfiprintf_r+0x228>)
 8009148:	bb1b      	cbnz	r3, 8009192 <_vfiprintf_r+0x1da>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	3307      	adds	r3, #7
 800914e:	f023 0307 	bic.w	r3, r3, #7
 8009152:	3308      	adds	r3, #8
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009158:	443b      	add	r3, r7
 800915a:	9309      	str	r3, [sp, #36]	; 0x24
 800915c:	e768      	b.n	8009030 <_vfiprintf_r+0x78>
 800915e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009162:	460c      	mov	r4, r1
 8009164:	2001      	movs	r0, #1
 8009166:	e7a6      	b.n	80090b6 <_vfiprintf_r+0xfe>
 8009168:	2300      	movs	r3, #0
 800916a:	3401      	adds	r4, #1
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	4619      	mov	r1, r3
 8009170:	f04f 0c0a 	mov.w	ip, #10
 8009174:	4620      	mov	r0, r4
 8009176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800917a:	3a30      	subs	r2, #48	; 0x30
 800917c:	2a09      	cmp	r2, #9
 800917e:	d903      	bls.n	8009188 <_vfiprintf_r+0x1d0>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0c6      	beq.n	8009112 <_vfiprintf_r+0x15a>
 8009184:	9105      	str	r1, [sp, #20]
 8009186:	e7c4      	b.n	8009112 <_vfiprintf_r+0x15a>
 8009188:	fb0c 2101 	mla	r1, ip, r1, r2
 800918c:	4604      	mov	r4, r0
 800918e:	2301      	movs	r3, #1
 8009190:	e7f0      	b.n	8009174 <_vfiprintf_r+0x1bc>
 8009192:	ab03      	add	r3, sp, #12
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	462a      	mov	r2, r5
 8009198:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <_vfiprintf_r+0x22c>)
 800919a:	a904      	add	r1, sp, #16
 800919c:	4630      	mov	r0, r6
 800919e:	f7fc f889 	bl	80052b4 <_printf_float>
 80091a2:	4607      	mov	r7, r0
 80091a4:	1c78      	adds	r0, r7, #1
 80091a6:	d1d6      	bne.n	8009156 <_vfiprintf_r+0x19e>
 80091a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091aa:	07d9      	lsls	r1, r3, #31
 80091ac:	d405      	bmi.n	80091ba <_vfiprintf_r+0x202>
 80091ae:	89ab      	ldrh	r3, [r5, #12]
 80091b0:	059a      	lsls	r2, r3, #22
 80091b2:	d402      	bmi.n	80091ba <_vfiprintf_r+0x202>
 80091b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b6:	f7fd fbe6 	bl	8006986 <__retarget_lock_release_recursive>
 80091ba:	89ab      	ldrh	r3, [r5, #12]
 80091bc:	065b      	lsls	r3, r3, #25
 80091be:	f53f af1d 	bmi.w	8008ffc <_vfiprintf_r+0x44>
 80091c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c4:	e71c      	b.n	8009000 <_vfiprintf_r+0x48>
 80091c6:	ab03      	add	r3, sp, #12
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	462a      	mov	r2, r5
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <_vfiprintf_r+0x22c>)
 80091ce:	a904      	add	r1, sp, #16
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7fc fb13 	bl	80057fc <_printf_i>
 80091d6:	e7e4      	b.n	80091a2 <_vfiprintf_r+0x1ea>
 80091d8:	0800a5b4 	.word	0x0800a5b4
 80091dc:	0800a5be 	.word	0x0800a5be
 80091e0:	080052b5 	.word	0x080052b5
 80091e4:	08008f93 	.word	0x08008f93
 80091e8:	0800a5ba 	.word	0x0800a5ba

080091ec <_malloc_usable_size_r>:
 80091ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f0:	1f18      	subs	r0, r3, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfbc      	itt	lt
 80091f6:	580b      	ldrlt	r3, [r1, r0]
 80091f8:	18c0      	addlt	r0, r0, r3
 80091fa:	4770      	bx	lr

080091fc <__swbuf_r>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	460e      	mov	r6, r1
 8009200:	4614      	mov	r4, r2
 8009202:	4605      	mov	r5, r0
 8009204:	b118      	cbz	r0, 800920e <__swbuf_r+0x12>
 8009206:	6a03      	ldr	r3, [r0, #32]
 8009208:	b90b      	cbnz	r3, 800920e <__swbuf_r+0x12>
 800920a:	f7fc fcb3 	bl	8005b74 <__sinit>
 800920e:	69a3      	ldr	r3, [r4, #24]
 8009210:	60a3      	str	r3, [r4, #8]
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	071a      	lsls	r2, r3, #28
 8009216:	d525      	bpl.n	8009264 <__swbuf_r+0x68>
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b31b      	cbz	r3, 8009264 <__swbuf_r+0x68>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	6922      	ldr	r2, [r4, #16]
 8009220:	1a98      	subs	r0, r3, r2
 8009222:	6963      	ldr	r3, [r4, #20]
 8009224:	b2f6      	uxtb	r6, r6
 8009226:	4283      	cmp	r3, r0
 8009228:	4637      	mov	r7, r6
 800922a:	dc04      	bgt.n	8009236 <__swbuf_r+0x3a>
 800922c:	4621      	mov	r1, r4
 800922e:	4628      	mov	r0, r5
 8009230:	f7ff f84c 	bl	80082cc <_fflush_r>
 8009234:	b9e0      	cbnz	r0, 8009270 <__swbuf_r+0x74>
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	3b01      	subs	r3, #1
 800923a:	60a3      	str	r3, [r4, #8]
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	701e      	strb	r6, [r3, #0]
 8009244:	6962      	ldr	r2, [r4, #20]
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	429a      	cmp	r2, r3
 800924a:	d004      	beq.n	8009256 <__swbuf_r+0x5a>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	07db      	lsls	r3, r3, #31
 8009250:	d506      	bpl.n	8009260 <__swbuf_r+0x64>
 8009252:	2e0a      	cmp	r6, #10
 8009254:	d104      	bne.n	8009260 <__swbuf_r+0x64>
 8009256:	4621      	mov	r1, r4
 8009258:	4628      	mov	r0, r5
 800925a:	f7ff f837 	bl	80082cc <_fflush_r>
 800925e:	b938      	cbnz	r0, 8009270 <__swbuf_r+0x74>
 8009260:	4638      	mov	r0, r7
 8009262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009264:	4621      	mov	r1, r4
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f806 	bl	8009278 <__swsetup_r>
 800926c:	2800      	cmp	r0, #0
 800926e:	d0d5      	beq.n	800921c <__swbuf_r+0x20>
 8009270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009274:	e7f4      	b.n	8009260 <__swbuf_r+0x64>
	...

08009278 <__swsetup_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4b2a      	ldr	r3, [pc, #168]	; (8009324 <__swsetup_r+0xac>)
 800927c:	4605      	mov	r5, r0
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	460c      	mov	r4, r1
 8009282:	b118      	cbz	r0, 800928c <__swsetup_r+0x14>
 8009284:	6a03      	ldr	r3, [r0, #32]
 8009286:	b90b      	cbnz	r3, 800928c <__swsetup_r+0x14>
 8009288:	f7fc fc74 	bl	8005b74 <__sinit>
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009292:	0718      	lsls	r0, r3, #28
 8009294:	d422      	bmi.n	80092dc <__swsetup_r+0x64>
 8009296:	06d9      	lsls	r1, r3, #27
 8009298:	d407      	bmi.n	80092aa <__swsetup_r+0x32>
 800929a:	2309      	movs	r3, #9
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092a8:	e034      	b.n	8009314 <__swsetup_r+0x9c>
 80092aa:	0758      	lsls	r0, r3, #29
 80092ac:	d512      	bpl.n	80092d4 <__swsetup_r+0x5c>
 80092ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b0:	b141      	cbz	r1, 80092c4 <__swsetup_r+0x4c>
 80092b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092b6:	4299      	cmp	r1, r3
 80092b8:	d002      	beq.n	80092c0 <__swsetup_r+0x48>
 80092ba:	4628      	mov	r0, r5
 80092bc:	f7ff fe06 	bl	8008ecc <_free_r>
 80092c0:	2300      	movs	r3, #0
 80092c2:	6363      	str	r3, [r4, #52]	; 0x34
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	2300      	movs	r3, #0
 80092ce:	6063      	str	r3, [r4, #4]
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	f043 0308 	orr.w	r3, r3, #8
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	b94b      	cbnz	r3, 80092f4 <__swsetup_r+0x7c>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092ea:	d003      	beq.n	80092f4 <__swsetup_r+0x7c>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f840 	bl	8009374 <__smakebuf_r>
 80092f4:	89a0      	ldrh	r0, [r4, #12]
 80092f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092fa:	f010 0301 	ands.w	r3, r0, #1
 80092fe:	d00a      	beq.n	8009316 <__swsetup_r+0x9e>
 8009300:	2300      	movs	r3, #0
 8009302:	60a3      	str	r3, [r4, #8]
 8009304:	6963      	ldr	r3, [r4, #20]
 8009306:	425b      	negs	r3, r3
 8009308:	61a3      	str	r3, [r4, #24]
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	b943      	cbnz	r3, 8009320 <__swsetup_r+0xa8>
 800930e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009312:	d1c4      	bne.n	800929e <__swsetup_r+0x26>
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	0781      	lsls	r1, r0, #30
 8009318:	bf58      	it	pl
 800931a:	6963      	ldrpl	r3, [r4, #20]
 800931c:	60a3      	str	r3, [r4, #8]
 800931e:	e7f4      	b.n	800930a <__swsetup_r+0x92>
 8009320:	2000      	movs	r0, #0
 8009322:	e7f7      	b.n	8009314 <__swsetup_r+0x9c>
 8009324:	200001d8 	.word	0x200001d8

08009328 <__swhatbuf_r>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	460c      	mov	r4, r1
 800932c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009330:	2900      	cmp	r1, #0
 8009332:	b096      	sub	sp, #88	; 0x58
 8009334:	4615      	mov	r5, r2
 8009336:	461e      	mov	r6, r3
 8009338:	da0d      	bge.n	8009356 <__swhatbuf_r+0x2e>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009340:	f04f 0100 	mov.w	r1, #0
 8009344:	bf0c      	ite	eq
 8009346:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800934a:	2340      	movne	r3, #64	; 0x40
 800934c:	2000      	movs	r0, #0
 800934e:	6031      	str	r1, [r6, #0]
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	b016      	add	sp, #88	; 0x58
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	466a      	mov	r2, sp
 8009358:	f000 f848 	bl	80093ec <_fstat_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	dbec      	blt.n	800933a <__swhatbuf_r+0x12>
 8009360:	9901      	ldr	r1, [sp, #4]
 8009362:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009366:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800936a:	4259      	negs	r1, r3
 800936c:	4159      	adcs	r1, r3
 800936e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009372:	e7eb      	b.n	800934c <__swhatbuf_r+0x24>

08009374 <__smakebuf_r>:
 8009374:	898b      	ldrh	r3, [r1, #12]
 8009376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009378:	079d      	lsls	r5, r3, #30
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d507      	bpl.n	8009390 <__smakebuf_r+0x1c>
 8009380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	2301      	movs	r3, #1
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	b002      	add	sp, #8
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	ab01      	add	r3, sp, #4
 8009392:	466a      	mov	r2, sp
 8009394:	f7ff ffc8 	bl	8009328 <__swhatbuf_r>
 8009398:	9900      	ldr	r1, [sp, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	4630      	mov	r0, r6
 800939e:	f7fe fe7d 	bl	800809c <_malloc_r>
 80093a2:	b948      	cbnz	r0, 80093b8 <__smakebuf_r+0x44>
 80093a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d4ef      	bmi.n	800938c <__smakebuf_r+0x18>
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	f043 0302 	orr.w	r3, r3, #2
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e7e3      	b.n	8009380 <__smakebuf_r+0xc>
 80093b8:	89a3      	ldrh	r3, [r4, #12]
 80093ba:	6020      	str	r0, [r4, #0]
 80093bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	9b00      	ldr	r3, [sp, #0]
 80093c4:	6163      	str	r3, [r4, #20]
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	6120      	str	r0, [r4, #16]
 80093ca:	b15b      	cbz	r3, 80093e4 <__smakebuf_r+0x70>
 80093cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 f81d 	bl	8009410 <_isatty_r>
 80093d6:	b128      	cbz	r0, 80093e4 <__smakebuf_r+0x70>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	431d      	orrs	r5, r3
 80093e8:	81a5      	strh	r5, [r4, #12]
 80093ea:	e7cf      	b.n	800938c <__smakebuf_r+0x18>

080093ec <_fstat_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	; (800940c <_fstat_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	f7f8 fe04 	bl	8002006 <_fstat>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_fstat_r+0x1c>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b103      	cbz	r3, 8009408 <_fstat_r+0x1c>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	20000a88 	.word	0x20000a88

08009410 <_isatty_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	; (800942c <_isatty_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 fe03 	bl	8002026 <_isatty>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_isatty_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_isatty_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000a88 	.word	0x20000a88

08009430 <_raise_r>:
 8009430:	291f      	cmp	r1, #31
 8009432:	b538      	push	{r3, r4, r5, lr}
 8009434:	4604      	mov	r4, r0
 8009436:	460d      	mov	r5, r1
 8009438:	d904      	bls.n	8009444 <_raise_r+0x14>
 800943a:	2316      	movs	r3, #22
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009446:	b112      	cbz	r2, 800944e <_raise_r+0x1e>
 8009448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800944c:	b94b      	cbnz	r3, 8009462 <_raise_r+0x32>
 800944e:	4620      	mov	r0, r4
 8009450:	f000 f830 	bl	80094b4 <_getpid_r>
 8009454:	462a      	mov	r2, r5
 8009456:	4601      	mov	r1, r0
 8009458:	4620      	mov	r0, r4
 800945a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800945e:	f000 b817 	b.w	8009490 <_kill_r>
 8009462:	2b01      	cmp	r3, #1
 8009464:	d00a      	beq.n	800947c <_raise_r+0x4c>
 8009466:	1c59      	adds	r1, r3, #1
 8009468:	d103      	bne.n	8009472 <_raise_r+0x42>
 800946a:	2316      	movs	r3, #22
 800946c:	6003      	str	r3, [r0, #0]
 800946e:	2001      	movs	r0, #1
 8009470:	e7e7      	b.n	8009442 <_raise_r+0x12>
 8009472:	2400      	movs	r4, #0
 8009474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009478:	4628      	mov	r0, r5
 800947a:	4798      	blx	r3
 800947c:	2000      	movs	r0, #0
 800947e:	e7e0      	b.n	8009442 <_raise_r+0x12>

08009480 <raise>:
 8009480:	4b02      	ldr	r3, [pc, #8]	; (800948c <raise+0xc>)
 8009482:	4601      	mov	r1, r0
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f7ff bfd3 	b.w	8009430 <_raise_r>
 800948a:	bf00      	nop
 800948c:	200001d8 	.word	0x200001d8

08009490 <_kill_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_kill_r+0x20>)
 8009494:	2300      	movs	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	f7f8 fd53 	bl	8001f48 <_kill>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d102      	bne.n	80094ac <_kill_r+0x1c>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b103      	cbz	r3, 80094ac <_kill_r+0x1c>
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	bd38      	pop	{r3, r4, r5, pc}
 80094ae:	bf00      	nop
 80094b0:	20000a88 	.word	0x20000a88

080094b4 <_getpid_r>:
 80094b4:	f7f8 bd40 	b.w	8001f38 <_getpid>

080094b8 <_init>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr

080094c4 <_fini>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	bf00      	nop
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr
