
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e44  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ac  080060ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080060ac  080060ac  000160ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b4  080060b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000068  08006124  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08006124  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2dc  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002075  00000000  00000000  0002e3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089d  00000000  00000000  00030f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3b7  00000000  00000000  0003180d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6b3  00000000  00000000  0005bbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff206  00000000  00000000  0006a277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034c8  00000000  00000000  00169480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000068 	.word	0x20000068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005fec 	.word	0x08005fec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	08005fec 	.word	0x08005fec

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_UART_RxCpltCallback>:
uint8_t nmea;
uint8_t nmea_buf[256]; // Adjust the buffer size as needed
uint8_t nmea_cpy[256];
uint8_t i = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_UART_RxCpltCallback+0x8c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d139      	bne.n	8000620 <HAL_UART_RxCpltCallback+0x84>
        nmea_buf[i++] = nmea;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_UART_RxCpltCallback+0x90>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	b2d1      	uxtb	r1, r2
 80005b4:	4a1d      	ldr	r2, [pc, #116]	; (800062c <HAL_UART_RxCpltCallback+0x90>)
 80005b6:	7011      	strb	r1, [r2, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <HAL_UART_RxCpltCallback+0x94>)
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 80005c0:	5499      	strb	r1, [r3, r2]

        if (nmea == '\n' || i >= sizeof(nmea_buf) - 1) {
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_UART_RxCpltCallback+0x94>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	d003      	beq.n	80005d2 <HAL_UART_RxCpltCallback+0x36>
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_UART_RxCpltCallback+0x90>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d121      	bne.n	8000616 <HAL_UART_RxCpltCallback+0x7a>
        	if(nmea_buf[3]=='G' && nmea_buf[4]=='G' && nmea_buf[5] == 'A')
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	2b47      	cmp	r3, #71	; 0x47
 80005d8:	d114      	bne.n	8000604 <HAL_UART_RxCpltCallback+0x68>
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	2b47      	cmp	r3, #71	; 0x47
 80005e0:	d110      	bne.n	8000604 <HAL_UART_RxCpltCallback+0x68>
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 80005e4:	795b      	ldrb	r3, [r3, #5]
 80005e6:	2b41      	cmp	r3, #65	; 0x41
 80005e8:	d10c      	bne.n	8000604 <HAL_UART_RxCpltCallback+0x68>
        	{
        		memcpy(nmea_cpy, nmea_buf, 256);
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_UART_RxCpltCallback+0x9c>)
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 80005ee:	4610      	mov	r0, r2
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f6:	461a      	mov	r2, r3
 80005f8:	f004 ff46 	bl	8005488 <memcpy>
        		printf("%s", nmea_cpy);
 80005fc:	490e      	ldr	r1, [pc, #56]	; (8000638 <HAL_UART_RxCpltCallback+0x9c>)
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <HAL_UART_RxCpltCallback+0xa0>)
 8000600:	f004 fe72 	bl	80052e8 <iprintf>
        	}

            // Reset the buffer and index for the next data
            memset(nmea_buf, 0, sizeof(nmea_buf));
 8000604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000608:	2100      	movs	r1, #0
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <HAL_UART_RxCpltCallback+0x98>)
 800060c:	f004 fec1 	bl	8005392 <memset>
            i = 0;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_UART_RxCpltCallback+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
        }

        // Start the next reception
        HAL_UART_Receive_IT(&huart2, &nmea, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	4905      	ldr	r1, [pc, #20]	; (8000630 <HAL_UART_RxCpltCallback+0x94>)
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <HAL_UART_RxCpltCallback+0x8c>)
 800061c:	f002 fd64 	bl	80030e8 <HAL_UART_Receive_IT>
    }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000118 	.word	0x20000118
 800062c:	200003b0 	.word	0x200003b0
 8000630:	200001ac 	.word	0x200001ac
 8000634:	200001b0 	.word	0x200001b0
 8000638:	200002b0 	.word	0x200002b0
 800063c:	08006004 	.word	0x08006004

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  HAL_Init();
 8000644:	f000 fbc1 	bl	8000dca <HAL_Init>

  SystemClock_Config();
 8000648:	f000 f82e 	bl	80006a8 <SystemClock_Config>

  MX_GPIO_Init();
 800064c:	f000 f91a 	bl	8000884 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000650:	f000 f87c 	bl	800074c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f8c6 	bl	80007e4 <MX_USART2_UART_Init>
  //HAL_StatusTypeDef status;
  //unsigned char nmea_sentence[256];

  //printf("Test\r\n");
  //HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_7);
  HAL_UART_Receive_IT(&huart2, &nmea, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	4902      	ldr	r1, [pc, #8]	; (8000664 <main+0x24>)
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <main+0x28>)
 800065e:	f002 fd43 	bl	80030e8 <HAL_UART_Receive_IT>
  while (1)
 8000662:	e7fe      	b.n	8000662 <main+0x22>
 8000664:	200001ac 	.word	0x200001ac
 8000668:	20000118 	.word	0x20000118

0800066c <_write>:
	  */
  }
}

int _write(int file, char *ptr, int len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;

	extern UART_HandleTypeDef hlpuart1;
	status = HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	b29a      	uxth	r2, r3
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <_write+0x38>)
 8000684:	f002 fca0 	bl	8002fc8 <HAL_UART_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	75fb      	strb	r3, [r7, #23]

	if (status == HAL_OK) {
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <_write+0x2a>
	        return len; // Return the number of bytes written
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	e001      	b.n	800069a <_write+0x2e>
	    } else {
	        return -1; // Return an error code
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
	    }
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000084 	.word	0x20000084

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fe6b 	bl	8005392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 ff88 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006d6:	f000 f9ab 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 80006f4:	230f      	movs	r3, #15
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f81d 	bl	8001748 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000714:	f000 f98c 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2105      	movs	r1, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fc22 	bl	8001f7c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 f977 	bl	8000a30 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	; 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000752:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <MX_LPUART1_UART_Init+0x94>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000794:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000796:	f002 fbc7 	bl	8002f28 <HAL_UART_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 f946 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007a8:	f004 fc23 	bl	8004ff2 <HAL_UARTEx_SetTxFifoThreshold>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007b2:	f000 f93d 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007ba:	f004 fc58 	bl	800506e <HAL_UARTEx_SetRxFifoThreshold>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007c4:	f000 f934 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 80007ca:	f004 fbd9 	bl	8004f80 <HAL_UARTEx_DisableFifoMode>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f92c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000084 	.word	0x20000084
 80007e0:	40008000 	.word	0x40008000

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_USART2_UART_Init+0x98>)
 80007ea:	4a25      	ldr	r2, [pc, #148]	; (8000880 <MX_USART2_UART_Init+0x9c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_USART2_UART_Init+0x98>)
 80007f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_USART2_UART_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART2_UART_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_USART2_UART_Init+0x98>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_USART2_UART_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000828:	2210      	movs	r2, #16
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART2_UART_Init+0x98>)
 800082e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000832:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000836:	f002 fb77 	bl	8002f28 <HAL_UART_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 f8f6 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	480d      	ldr	r0, [pc, #52]	; (800087c <MX_USART2_UART_Init+0x98>)
 8000848:	f004 fbd3 	bl	8004ff2 <HAL_UARTEx_SetTxFifoThreshold>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8000852:	f000 f8ed 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000856:	2100      	movs	r1, #0
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x98>)
 800085a:	f004 fc08 	bl	800506e <HAL_UARTEx_SetRxFifoThreshold>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8000864:	f000 f8e4 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_USART2_UART_Init+0x98>)
 800086a:	f004 fb89 	bl	8004f80 <HAL_UARTEx_DisableFifoMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8000874:	f000 f8dc 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000118 	.word	0x20000118
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b60      	ldr	r3, [pc, #384]	; (8000a1c <MX_GPIO_Init+0x198>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a5f      	ldr	r2, [pc, #380]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b5a      	ldr	r3, [pc, #360]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a59      	ldr	r2, [pc, #356]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a53      	ldr	r2, [pc, #332]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a4d      	ldr	r2, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b4b      	ldr	r3, [pc, #300]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b48      	ldr	r3, [pc, #288]	; (8000a1c <MX_GPIO_Init+0x198>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a47      	ldr	r2, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x198>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x198>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <MX_GPIO_Init+0x198>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a41      	ldr	r2, [pc, #260]	; (8000a1c <MX_GPIO_Init+0x198>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <MX_GPIO_Init+0x198>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800092a:	f000 fefd 	bl	8001728 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000934:	483a      	ldr	r0, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000936:	f000 fe1b 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	4839      	ldr	r0, [pc, #228]	; (8000a24 <MX_GPIO_Init+0x1a0>)
 8000940:	f000 fe16 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4833      	ldr	r0, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x1a4>)
 800095c:	f000 fc76 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000960:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <MX_GPIO_Init+0x19c>)
 800097a:	f000 fc67 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800097e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000990:	2307      	movs	r3, #7
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4824      	ldr	r0, [pc, #144]	; (8000a2c <MX_GPIO_Init+0x1a8>)
 800099c:	f000 fc56 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a0:	2320      	movs	r3, #32
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_GPIO_Init+0x1a0>)
 80009b4:	f000 fc4a 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x1a0>)
 80009d0:	f000 fc3c 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e6:	230a      	movs	r3, #10
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fc2a 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fc1c 	bl	800124c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400
 8000a24:	48001800 	.word	0x48001800
 8000a28:	48000800 	.word	0x48000800
 8000a2c:	48000c00 	.word	0x48000c00

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0b0      	sub	sp, #192	; 0xc0
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2294      	movs	r2, #148	; 0x94
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fc74 	bl	8005392 <memset>
  if(huart->Instance==LPUART1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <HAL_UART_MspInit+0x148>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d13e      	bne.n	8000b32 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fd19 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f7ff ffb0 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ad0:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad4:	4a3e      	ldr	r2, [pc, #248]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000adc:	4b3c      	ldr	r3, [pc, #240]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a38      	ldr	r2, [pc, #224]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000b00:	f000 fe12 	bl	8001728 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <HAL_UART_MspInit+0x150>)
 8000b2c:	f000 fb8e 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b30:	e048      	b.n	8000bc4 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART2)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_UART_MspInit+0x154>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d143      	bne.n	8000bc4 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000b40:	2304      	movs	r3, #4
 8000b42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fcd5 	bl	80024f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000b54:	f7ff ff6c 	bl	8000a30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	6593      	str	r3, [r2, #88]	; 0x58
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0x14c>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f000 fb4c 	bl	800124c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2026      	movs	r0, #38	; 0x26
 8000bba:	f000 fa56 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbe:	2026      	movs	r0, #38	; 0x26
 8000bc0:	f000 fa6f 	bl	80010a2 <HAL_NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	37c0      	adds	r7, #192	; 0xc0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40008000 	.word	0x40008000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	48001800 	.word	0x48001800
 8000bd8:	40004400 	.word	0x40004400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f924 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USART2_IRQHandler+0x10>)
 8000c36:	f002 faa3 	bl	8003180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000118 	.word	0x20000118

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_isatty>:

int _isatty(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f004 fb8a 	bl	8005430 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200a0000 	.word	0x200a0000
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	200003b4 	.word	0x200003b4
 8000d50:	20000508 	.word	0x20000508

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f004 fb49 	bl	800543c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fc49 	bl	8000640 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dbc:	080060bc 	.word	0x080060bc
  ldr r2, =_sbss
 8000dc0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dc4:	20000508 	.word	0x20000508

08000dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_IRQHandler>

08000dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f93d 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f80e 	bl	8000dfc <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e001      	b.n	8000df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dec:	f7ff fe26 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_InitTick+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f949 	bl	80010be <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10f      	bne.n	8000e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d809      	bhi.n	8000e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f913 	bl	800106a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_InitTick+0x74>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e001      	b.n	8000e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200003b8 	.word	0x200003b8

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200003b8 	.word	0x200003b8

08000eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_GetPriorityGrouping+0x18>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f003 0307 	and.w	r3, r3, #7
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	db0b      	blt.n	8000f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	4907      	ldr	r1, [pc, #28]	; (8000f50 <__NVIC_EnableIRQ+0x38>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	2001      	movs	r0, #1
 8000f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff29 	bl	8000eb4 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff3e 	bl	8000efc <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff8e 	bl	8000fa8 <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5d 	bl	8000f54 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff31 	bl	8000f18 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d008      	beq.n	8001100 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e040      	b.n	8001182 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020e 	bic.w	r2, r2, #14
 800110e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800111e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0201 	bic.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f003 021c 	and.w	r2, r3, #28
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800114c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800116e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d005      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2204      	movs	r2, #4
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e047      	b.n	8001242 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 020e 	bic.w	r2, r2, #14
 80011c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 021c 	and.w	r2, r3, #28
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001216:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001220:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    }
  }
  return status;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b087      	sub	sp, #28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e166      	b.n	800152a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8158 	beq.w	8001524 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f003 0201 	and.w	r2, r3, #1
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	6939      	ldr	r1, [r7, #16]
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0203 	and.w	r2, r3, #3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80b2 	beq.w	8001524 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c0:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 80013c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c4:	4a60      	ldr	r2, [pc, #384]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6613      	str	r3, [r2, #96]	; 0x60
 80013cc:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d8:	4a5c      	ldr	r2, [pc, #368]	; (800154c <HAL_GPIO_Init+0x300>)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001402:	d02b      	beq.n	800145c <HAL_GPIO_Init+0x210>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d025      	beq.n	8001458 <HAL_GPIO_Init+0x20c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x308>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d01f      	beq.n	8001454 <HAL_GPIO_Init+0x208>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a50      	ldr	r2, [pc, #320]	; (8001558 <HAL_GPIO_Init+0x30c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d019      	beq.n	8001450 <HAL_GPIO_Init+0x204>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a4f      	ldr	r2, [pc, #316]	; (800155c <HAL_GPIO_Init+0x310>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d013      	beq.n	800144c <HAL_GPIO_Init+0x200>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_GPIO_Init+0x314>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1fc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x318>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1f8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_GPIO_Init+0x31c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1f4>
 800143c:	2307      	movs	r3, #7
 800143e:	e00e      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001440:	2308      	movs	r3, #8
 8001442:	e00c      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001444:	2306      	movs	r3, #6
 8001446:	e00a      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001448:	2305      	movs	r3, #5
 800144a:	e008      	b.n	800145e <HAL_GPIO_Init+0x212>
 800144c:	2304      	movs	r3, #4
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001450:	2303      	movs	r3, #3
 8001452:	e004      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001454:	2302      	movs	r3, #2
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x212>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_GPIO_Init+0x212>
 800145c:	2300      	movs	r3, #0
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146e:	4937      	ldr	r1, [pc, #220]	; (800154c <HAL_GPIO_Init+0x300>)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <HAL_GPIO_Init+0x320>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014a0:	4a32      	ldr	r2, [pc, #200]	; (800156c <HAL_GPIO_Init+0x320>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_GPIO_Init+0x320>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_GPIO_Init+0x320>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_GPIO_Init+0x320>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_GPIO_Init+0x320>)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_GPIO_Init+0x320>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <HAL_GPIO_Init+0x320>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	f47f ae91 	bne.w	800125c <HAL_GPIO_Init+0x10>
  }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	48000400 	.word	0x48000400
 8001554:	48000800 	.word	0x48000800
 8001558:	48000c00 	.word	0x48000c00
 800155c:	48001000 	.word	0x48001000
 8001560:	48001400 	.word	0x48001400
 8001564:	48001800 	.word	0x48001800
 8001568:	48001c00 	.word	0x48001c00
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800158c:	e002      	b.n	8001594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b0:	d102      	bne.n	80015b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80015b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b6:	e00b      	b.n	80015d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c6:	d102      	bne.n	80015ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015cc:	e000      	b.n	80015d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80015ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d141      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fa:	d131      	bne.n	8001660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001602:	4a46      	ldr	r2, [pc, #280]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001614:	4a41      	ldr	r2, [pc, #260]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2232      	movs	r2, #50	; 0x32
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9b      	lsrs	r3, r3, #18
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001632:	e002      	b.n	800163a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3b01      	subs	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d102      	bne.n	800164e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f2      	bne.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165a:	d158      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e057      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001666:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001670:	e04d      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001678:	d141      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001686:	d131      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a0:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2232      	movs	r2, #50	; 0x32
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	3301      	adds	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016be:	e002      	b.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d102      	bne.n	80016da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f2      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e6:	d112      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e011      	b.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016fc:	e007      	b.n	800170e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40007000 	.word	0x40007000
 8001720:	20000000 	.word	0x20000000
 8001724:	431bde83 	.word	0x431bde83

08001728 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_PWREx_EnableVddIO2+0x1c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6053      	str	r3, [r2, #4]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f000 bc08 	b.w	8001f6c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175c:	4b96      	ldr	r3, [pc, #600]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001766:	4b94      	ldr	r3, [pc, #592]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80e4 	beq.w	8001946 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_RCC_OscConfig+0x4c>
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	f040 808b 	bne.w	80018a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 8087 	bne.w	80018a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001794:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x64>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e3df      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1a      	ldr	r2, [r3, #32]
 80017b0:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_RCC_OscConfig+0x7e>
 80017bc:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c4:	e005      	b.n	80017d2 <HAL_RCC_OscConfig+0x8a>
 80017c6:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d223      	bcs.n	800181e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fdcc 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e3c0      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ea:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a72      	ldr	r2, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	496d      	ldr	r1, [pc, #436]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4968      	ldr	r1, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
 800181c:	e025      	b.n	800186a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181e:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4960      	ldr	r1, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183c:	4b5e      	ldr	r3, [pc, #376]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	495b      	ldr	r1, [pc, #364]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fd8c 	bl	8002378 <RCC_SetFlashLatencyFromMSIRange>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e380      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800186a:	f000 fcc1 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4950      	ldr	r1, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x274>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_RCC_OscConfig+0x278>)
 8001888:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800188a:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fab4 	bl	8000dfc <HAL_InitTick>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d052      	beq.n	8001944 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	e364      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d032      	beq.n	8001910 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018aa:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a42      	ldr	r2, [pc, #264]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018b6:	f7ff faf1 	bl	8000e9c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018be:	f7ff faed 	bl	8000e9c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e34d      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4930      	ldr	r1, [pc, #192]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	492b      	ldr	r1, [pc, #172]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
 800190e:	e01a      	b.n	8001946 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191c:	f7ff fabe 	bl	8000e9c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001924:	f7ff faba 	bl	8000e9c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e31a      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x1dc>
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001944:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d073      	beq.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x21c>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d10e      	bne.n	800197c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d10b      	bne.n	800197c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d063      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d15f      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2f7      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x24c>
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e025      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800199c:	d114      	bne.n	80019c8 <HAL_RCC_OscConfig+0x280>
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a02      	ldr	r2, [pc, #8]	; (80019b8 <HAL_RCC_OscConfig+0x270>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e013      	b.n	80019e0 <HAL_RCC_OscConfig+0x298>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	08006008 	.word	0x08006008
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000004 	.word	0x20000004
 80019c8:	4ba0      	ldr	r3, [pc, #640]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a9f      	ldr	r2, [pc, #636]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b9d      	ldr	r3, [pc, #628]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a9c      	ldr	r2, [pc, #624]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fa58 	bl	8000e9c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fa54 	bl	8000e9c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e2b4      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a02:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2a8>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fa44 	bl	8000e9c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fa40 	bl	8000e9c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e2a0      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d0>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d060      	beq.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x310>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d116      	bne.n	8001a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	4b7c      	ldr	r3, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x328>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e27d      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	4973      	ldr	r1, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	e040      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f9ff 	bl	8000e9c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f9fb 	bl	8000e9c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e25b      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab4:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	495f      	ldr	r1, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e018      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f9db 	bl	8000e9c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff f9d7 	bl	8000e9c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e237      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f9b6 	bl	8000e9c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f9b2 	bl	8000e9c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e212      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0ef      	beq.n	8001b34 <HAL_RCC_OscConfig+0x3ec>
 8001b54:	e01b      	b.n	8001b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff f999 	bl	8000e9c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff f995 	bl	8000e9c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1f5      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b80:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80a6 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d118      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be0:	f7ff f95c 	bl	8000e9c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be8:	f7ff f958 	bl	8000e9c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1b8      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x508>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d108      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4d8>
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1e:	e029      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d115      	bne.n	8001c54 <HAL_RCC_OscConfig+0x50c>
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	4b9d      	ldr	r3, [pc, #628]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a9c      	ldr	r2, [pc, #624]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c64:	4b99      	ldr	r3, [pc, #612]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a98      	ldr	r2, [pc, #608]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f90e 	bl	8000e9c <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff f90a 	bl	8000e9c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e168      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ed      	beq.n	8001c84 <HAL_RCC_OscConfig+0x53c>
 8001ca8:	e015      	b.n	8001cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f8f7 	bl	8000e9c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f8f3 	bl	8000e9c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e151      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc8:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ed      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	4a7a      	ldr	r2, [pc, #488]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d03c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cfc:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001cfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d02:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f8c6 	bl	8000e9c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d14:	f7ff f8c2 	bl	8000e9c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e122      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d26:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0ef      	beq.n	8001d14 <HAL_RCC_OscConfig+0x5cc>
 8001d34:	e01b      	b.n	8001d6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d36:	4b65      	ldr	r3, [pc, #404]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3c:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff f8a9 	bl	8000e9c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d4e:	f7ff f8a5 	bl	8000e9c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e105      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d60:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ef      	bne.n	8001d4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80f9 	beq.w	8001f6a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	f040 80cf 	bne.w	8001f20 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d82:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d12c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	3b01      	subs	r3, #1
 8001da2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d123      	bne.n	8001df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d11b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d113      	bne.n	8001df0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d109      	bne.n	8001df0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	3b01      	subs	r3, #1
 8001dea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d071      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d068      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e0ac      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e1e:	f7ff f83d 	bl	8000e9c <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f839 	bl	8000e9c <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e099      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x788>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e54:	3a01      	subs	r2, #1
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5e:	0212      	lsls	r2, r2, #8
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	0552      	lsls	r2, r2, #21
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e72:	0852      	lsrs	r2, r2, #1
 8001e74:	3a01      	subs	r2, #1
 8001e76:	0652      	lsls	r2, r2, #25
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e7e:	06d2      	lsls	r2, r2, #27
 8001e80:	430a      	orrs	r2, r1
 8001e82:	4912      	ldr	r1, [pc, #72]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea0:	f7fe fffc 	bl	8000e9c <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe fff8 	bl	8000e9c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e058      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_RCC_OscConfig+0x784>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec6:	e050      	b.n	8001f6a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e04f      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d144      	bne.n	8001f6a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef8:	f7fe ffd0 	bl	8000e9c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe ffcc 	bl	8000e9c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e02c      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x7b8>
 8001f1e:	e024      	b.n	8001f6a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d01f      	beq.n	8001f66 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ffb3 	bl	8000e9c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe ffaf 	bl	8000e9c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e00f      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4905      	ldr	r1, [pc, #20]	; (8001f74 <HAL_RCC_OscConfig+0x82c>)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_OscConfig+0x830>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
 8001f64:	e001      	b.n	8001f6a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	feeefffc 	.word	0xfeeefffc

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11d      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b90      	ldr	r3, [pc, #576]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498b      	ldr	r1, [pc, #556]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e105      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d908      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	497b      	ldr	r1, [pc, #492]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d079      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d11e      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002006:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e0dc      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002016:	f000 fa09 	bl	800242c <RCC_GetSysClockFreqFromPLLSource>
 800201a:	4603      	mov	r3, r0
 800201c:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d946      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002022:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d140      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e035      	b.n	80020b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d107      	bne.n	800205c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204c:	4b63      	ldr	r3, [pc, #396]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d115      	bne.n	8002084 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0b9      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002064:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0ad      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002074:	4b59      	ldr	r3, [pc, #356]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0a5      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002084:	f000 f8b4 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002088:	4603      	mov	r3, r0
 800208a:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d90f      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002090:	4b52      	ldr	r3, [pc, #328]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800209c:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 0203 	bic.w	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4947      	ldr	r1, [pc, #284]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c2:	f7fe feeb 	bl	8000e9c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ca:	f7fe fee7 	bl	8000e9c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e077      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e0:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 020c 	and.w	r2, r3, #12
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d1eb      	bne.n	80020ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a37      	ldr	r2, [pc, #220]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002102:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d010      	beq.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211c:	429a      	cmp	r2, r3
 800211e:	d208      	bcs.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	492b      	ldr	r1, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d210      	bcs.n	8002162 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 020f 	bic.w	r2, r3, #15
 8002148:	4923      	ldr	r1, [pc, #140]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e036      	b.n	80021d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4918      	ldr	r1, [pc, #96]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d009      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4910      	ldr	r1, [pc, #64]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a0:	f000 f826 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fe19 	bl	8000dfc <HAL_InitTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
 80021e0:	04c4b400 	.word	0x04c4b400
 80021e4:	08006008 	.word	0x08006008
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x34>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d121      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d11e      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e005      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800224c:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10d      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d102      	bne.n	800226e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_GetSysClockFreq+0x110>)
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	e004      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002274:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_GetSysClockFreq+0x114>)
 8002276:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d134      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0xa6>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d003      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0xac>
 8002294:	e005      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_RCC_GetSysClockFreq+0x110>)
 8002298:	617b      	str	r3, [r7, #20]
      break;
 800229a:	e005      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_GetSysClockFreq+0x114>)
 800229e:	617b      	str	r3, [r7, #20]
      break;
 80022a0:	e002      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	617b      	str	r3, [r7, #20]
      break;
 80022a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	fb03 f202 	mul.w	r2, r3, r2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	0e5b      	lsrs	r3, r3, #25
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	3301      	adds	r3, #1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e8:	69bb      	ldr	r3, [r7, #24]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08006020 	.word	0x08006020
 8002300:	00f42400 	.word	0x00f42400
 8002304:	007a1200 	.word	0x007a1200

08002308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	08006018 	.word	0x08006018

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002350:	f7ff ffda 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0adb      	lsrs	r3, r3, #11
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08006018 	.word	0x08006018

08002378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002390:	f7ff f906 	bl	80015a0 <HAL_PWREx_GetVoltageRange>
 8002394:	6178      	str	r0, [r7, #20]
 8002396:	e014      	b.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023b0:	f7ff f8f6 	bl	80015a0 <HAL_PWREx_GetVoltageRange>
 80023b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d10b      	bne.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d913      	bls.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2ba0      	cmp	r3, #160	; 0xa0
 80023d4:	d902      	bls.n	80023dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d6:	2302      	movs	r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e00d      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023dc:	2301      	movs	r3, #1
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e00a      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b7f      	cmp	r3, #127	; 0x7f
 80023e6:	d902      	bls.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023e8:	2302      	movs	r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e004      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b70      	cmp	r3, #112	; 0x70
 80023f2:	d101      	bne.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f4:	2301      	movs	r3, #1
 80023f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 020f 	bic.w	r2, r3, #15
 8002400:	4909      	ldr	r1, [pc, #36]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000

0800242c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d00b      	beq.n	800245a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d825      	bhi.n	8002494 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d008      	beq.n	8002460 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d11f      	bne.n	8002494 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002456:	613b      	str	r3, [r7, #16]
    break;
 8002458:	e01f      	b.n	800249a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800245a:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800245c:	613b      	str	r3, [r7, #16]
    break;
 800245e:	e01c      	b.n	800249a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e005      	b.n	8002488 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	613b      	str	r3, [r7, #16]
    break;
 8002492:	e002      	b.n	800249a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
    break;
 8002498:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	3301      	adds	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	fb03 f202 	mul.w	r2, r3, r2
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0e5b      	lsrs	r3, r3, #25
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024da:	683b      	ldr	r3, [r7, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40021000 	.word	0x40021000
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	08006020 	.word	0x08006020

080024f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002500:	2300      	movs	r3, #0
 8002502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002504:	2300      	movs	r3, #0
 8002506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	2b00      	cmp	r3, #0
 8002512:	d040      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d02a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d825      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002520:	2b60      	cmp	r3, #96	; 0x60
 8002522:	d026      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d821      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d006      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d81d      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002534:	2b20      	cmp	r3, #32
 8002536:	d010      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002538:	e018      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800253a:	4b89      	ldr	r3, [pc, #548]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a88      	ldr	r2, [pc, #544]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002546:	e015      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb02 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002558:	e00c      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3320      	adds	r3, #32
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fbed 	bl	8002d40 <RCCEx_PLLSAI2_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800256a:	e003      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	74fb      	strb	r3, [r7, #19]
      break;
 8002570:	e000      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800257c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002580:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002588:	4975      	ldr	r1, [pc, #468]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002590:	e001      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d047      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d030      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d82a      	bhi.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b6:	d02a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025bc:	d824      	bhi.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c8:	d81e      	bhi.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d2:	d010      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025d4:	e018      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e2:	e015      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fab4 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f4:	e00c      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3320      	adds	r3, #32
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fb9f 	bl	8002d40 <RCCEx_PLLSAI2_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002606:	e003      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	74fb      	strb	r3, [r7, #19]
      break;
 800260c:	e000      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800260e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002616:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002618:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800261c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	494e      	ldr	r1, [pc, #312]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800262c:	e001      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262e:	7cfb      	ldrb	r3, [r7, #19]
 8002630:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 809f 	beq.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4a40      	ldr	r2, [pc, #256]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
 8002666:	4b3e      	ldr	r3, [pc, #248]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002672:	2301      	movs	r3, #1
 8002674:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002682:	f7fe fc0b 	bl	8000e9c <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002688:	e009      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe fc07 	bl	8000e9c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d902      	bls.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	74fb      	strb	r3, [r7, #19]
        break;
 800269c:	e005      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ef      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15b      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01f      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d019      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026da:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fbc6 	bl	8000e9c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002712:	e00b      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fbc2 	bl	8000e9c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d902      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	74fb      	strb	r3, [r7, #19]
            break;
 800272a:	e006      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ec      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002758:	e008      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	74bb      	strb	r3, [r7, #18]
 800275e:	e005      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002760:	40021000 	.word	0x40021000
 8002764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276c:	7c7b      	ldrb	r3, [r7, #17]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4ba0      	ldr	r3, [pc, #640]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4a9f      	ldr	r2, [pc, #636]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278a:	4b9a      	ldr	r3, [pc, #616]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	f023 0203 	bic.w	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	4996      	ldr	r1, [pc, #600]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ac:	4b91      	ldr	r3, [pc, #580]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f023 020c 	bic.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	498e      	ldr	r1, [pc, #568]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ce:	4b89      	ldr	r3, [pc, #548]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	4985      	ldr	r1, [pc, #532]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f0:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fe:	497d      	ldr	r1, [pc, #500]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002812:	4b78      	ldr	r3, [pc, #480]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4974      	ldr	r1, [pc, #464]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	496c      	ldr	r1, [pc, #432]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002856:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002864:	4963      	ldr	r1, [pc, #396]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002886:	495b      	ldr	r1, [pc, #364]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289a:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	4952      	ldr	r1, [pc, #328]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028bc:	4b4d      	ldr	r3, [pc, #308]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	494a      	ldr	r1, [pc, #296]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	4941      	ldr	r1, [pc, #260]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002900:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4939      	ldr	r1, [pc, #228]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d028      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002922:	4b34      	ldr	r3, [pc, #208]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	4930      	ldr	r1, [pc, #192]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d106      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294c:	60d3      	str	r3, [r2, #12]
 800294e:	e011      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f8f9 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d04d      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002988:	d108      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002996:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800299a:	e012      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a2:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ca:	d106      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d6:	60d3      	str	r3, [r2, #12]
 80029d8:	e020      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e2:	d109      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a02      	ldr	r2, [pc, #8]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	60d3      	str	r3, [r2, #12]
 80029f0:	e014      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f8a5 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d028      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a28:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a36:	4947      	ldr	r1, [pc, #284]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a46:	d106      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
 8002a54:	e011      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2101      	movs	r1, #1
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f876 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d01e      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a96:	492f      	ldr	r1, [pc, #188]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f851 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad6:	f023 0204 	bic.w	r2, r3, #4
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae0:	491c      	ldr	r1, [pc, #112]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002afa:	f023 0218 	bic.w	r2, r3, #24
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	4913      	ldr	r1, [pc, #76]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d017      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b28:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000

08002b58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b72:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d103      	bne.n	8002b8a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
       ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d142      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e03f      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d018      	beq.n	8002bca <RCCEx_PLLSAI1_Config+0x72>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d825      	bhi.n	8002be8 <RCCEx_PLLSAI1_Config+0x90>
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d002      	beq.n	8002ba6 <RCCEx_PLLSAI1_Config+0x4e>
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d009      	beq.n	8002bb8 <RCCEx_PLLSAI1_Config+0x60>
 8002ba4:	e020      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ba6:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb6:	e01a      	b.n	8002bee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb8:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d116      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e013      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bca:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd6:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002be6:	e006      	b.n	8002bf6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      break;
 8002bec:	e004      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bf6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4949      	ldr	r1, [pc, #292]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 8086 	bne.w	8002d24 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe f93a 	bl	8000e9c <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2a:	e009      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2c:	f7fe f936 	bl	8000e9c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d902      	bls.n	8002c40 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3e:	e005      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ef      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d168      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d113      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	06d2      	lsls	r2, r2, #27
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6852      	ldr	r2, [r2, #4]
 8002c72:	3a01      	subs	r2, #1
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	430a      	orrs	r2, r1
 8002c78:	492d      	ldr	r1, [pc, #180]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]
 8002c7e:	e02d      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d115      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	0211      	lsls	r1, r2, #8
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6852      	ldr	r2, [r2, #4]
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	610b      	str	r3, [r1, #16]
 8002cb0:	e014      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6892      	ldr	r2, [r2, #8]
 8002cbe:	0211      	lsls	r1, r2, #8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6952      	ldr	r2, [r2, #20]
 8002cc4:	0852      	lsrs	r2, r2, #1
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	0652      	lsls	r2, r2, #25
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6852      	ldr	r2, [r2, #4]
 8002cd0:	3a01      	subs	r2, #1
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	4916      	ldr	r1, [pc, #88]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe f8d8 	bl	8000e9c <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cee:	e009      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf0:	f7fe f8d4 	bl	8000e9c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d902      	bls.n	8002d04 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	73fb      	strb	r3, [r7, #15]
          break;
 8002d02:	e005      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	4904      	ldr	r1, [pc, #16]	; (8002d30 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	07ff800f 	.word	0x07ff800f
 8002d38:	ff9f800f 	.word	0xff9f800f
 8002d3c:	f9ff800f 	.word	0xf9ff800f

08002d40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d4e:	4b72      	ldr	r3, [pc, #456]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00e      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d103      	bne.n	8002d72 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d142      	bne.n	8002df8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e03f      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d018      	beq.n	8002db2 <RCCEx_PLLSAI2_Config+0x72>
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d825      	bhi.n	8002dd0 <RCCEx_PLLSAI2_Config+0x90>
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <RCCEx_PLLSAI2_Config+0x4e>
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d009      	beq.n	8002da0 <RCCEx_PLLSAI2_Config+0x60>
 8002d8c:	e020      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9e:	e01a      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002da0:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d116      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e013      	b.n	8002dda <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002db2:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dce:	e006      	b.n	8002dde <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e004      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e002      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e000      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d108      	bne.n	8002df8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002de6:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4949      	ldr	r1, [pc, #292]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 8086 	bne.w	8002f0c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e00:	4b45      	ldr	r3, [pc, #276]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a44      	ldr	r2, [pc, #272]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7fe f846 	bl	8000e9c <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e14:	f7fe f842 	bl	8000e9c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
        break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e28:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ef      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d168      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d113      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e40:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6892      	ldr	r2, [r2, #8]
 8002e4c:	0211      	lsls	r1, r2, #8
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	06d2      	lsls	r2, r2, #27
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6852      	ldr	r2, [r2, #4]
 8002e5a:	3a01      	subs	r2, #1
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	492d      	ldr	r1, [pc, #180]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	614b      	str	r3, [r1, #20]
 8002e66:	e02d      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d115      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	0211      	lsls	r1, r2, #8
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6912      	ldr	r2, [r2, #16]
 8002e80:	0852      	lsrs	r2, r2, #1
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0552      	lsls	r2, r2, #21
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6852      	ldr	r2, [r2, #4]
 8002e8c:	3a01      	subs	r2, #1
 8002e8e:	0112      	lsls	r2, r2, #4
 8002e90:	430a      	orrs	r2, r1
 8002e92:	4921      	ldr	r1, [pc, #132]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	614b      	str	r3, [r1, #20]
 8002e98:	e014      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	0211      	lsls	r1, r2, #8
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6952      	ldr	r2, [r2, #20]
 8002eac:	0852      	lsrs	r2, r2, #1
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0652      	lsls	r2, r2, #25
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6852      	ldr	r2, [r2, #4]
 8002eb8:	3a01      	subs	r2, #1
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	4916      	ldr	r1, [pc, #88]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fd ffe4 	bl	8000e9c <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ed6:	e009      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ed8:	f7fd ffe0 	bl	8000e9c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d902      	bls.n	8002eec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eea:	e005      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	4904      	ldr	r1, [pc, #16]	; (8002f18 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	07ff800f 	.word	0x07ff800f
 8002f20:	ff9f800f 	.word	0xff9f800f
 8002f24:	f9ff800f 	.word	0xf9ff800f

08002f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e042      	b.n	8002fc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7fd fd99 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2224      	movs	r2, #36	; 0x24
 8002f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 ff44 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fc45 	bl	8003808 <UART_SetConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01b      	b.n	8002fc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 ffc3 	bl	8003f44 <UART_CheckIdleState>
 8002fbe:	4603      	mov	r3, r0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d17c      	bne.n	80030dc <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_UART_Transmit+0x26>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e075      	b.n	80030de <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd ff4b 	bl	8000e9c <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x6c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800303c:	e031      	b.n	80030a2 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f001 f825 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e03e      	b.n	80030de <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	b292      	uxth	r2, r2
 8003074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	3302      	adds	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e008      	b.n	8003090 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b292      	uxth	r2, r2
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1c7      	bne.n	800303e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 ffed 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e006      	b.n	80030de <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d137      	bne.n	8003170 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Receive_IT+0x24>
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e030      	b.n	8003172 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_UART_Receive_IT+0x94>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d01f      	beq.n	8003160 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	613b      	str	r3, [r7, #16]
   return(result);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	69f9      	ldr	r1, [r7, #28]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	61bb      	str	r3, [r7, #24]
   return(result);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e6      	bne.n	800312e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	461a      	mov	r2, r3
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fffe 	bl	8004168 <UART_Start_Receive_IT>
 800316c:	4603      	mov	r3, r0
 800316e:	e000      	b.n	8003172 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3728      	adds	r7, #40	; 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40008000 	.word	0x40008000

08003180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0ba      	sub	sp, #232	; 0xe8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80031ae:	4013      	ands	r3, r2
 80031b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11b      	bne.n	80031f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d015      	beq.n	80031f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d105      	bne.n	80031e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 82e3 	beq.w	80037b0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
      }
      return;
 80031f2:	e2dd      	b.n	80037b0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80031f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8123 	beq.w	8003444 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80031fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003202:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_UART_IRQHandler+0x2b8>)
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800320a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800320e:	4b8b      	ldr	r3, [pc, #556]	; (800343c <HAL_UART_IRQHandler+0x2bc>)
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8116 	beq.w	8003444 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d011      	beq.n	8003248 <HAL_UART_IRQHandler+0xc8>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2201      	movs	r2, #1
 8003236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d011      	beq.n	8003278 <HAL_UART_IRQHandler+0xf8>
 8003254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_UART_IRQHandler+0x128>
 8003284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2204      	movs	r2, #4
 8003296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80032c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80032c4:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_UART_IRQHandler+0x2b8>)
 80032c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2208      	movs	r2, #8
 80032d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_UART_IRQHandler+0x196>
 80032f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8249 	beq.w	80037b4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d013      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800332e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d105      	bne.n	8003346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800333a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003376:	2b00      	cmp	r3, #0
 8003378:	d054      	beq.n	8003424 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f001 f816 	bl	80043ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d146      	bne.n	800341c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1d9      	bne.n	800338e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d017      	beq.n	8003414 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ea:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_UART_IRQHandler+0x2c0>)
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd feca 	bl	800118e <HAL_DMA_Abort_IT>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800340e:	4610      	mov	r0, r2
 8003410:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003412:	e00f      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9e1 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341a:	e00b      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f9dd 	bl	80037dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003422:	e007      	b.n	8003434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f9d9 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003432:	e1bf      	b.n	80037b4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	bf00      	nop
    return;
 8003436:	e1bd      	b.n	80037b4 <HAL_UART_IRQHandler+0x634>
 8003438:	10000001 	.word	0x10000001
 800343c:	04000120 	.word	0x04000120
 8003440:	08004479 	.word	0x08004479

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 8153 	bne.w	80036f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 814c 	beq.w	80036f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8145 	beq.w	80036f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2210      	movs	r2, #16
 8003470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	f040 80bb 	bne.w	80035f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 818f 	beq.w	80037b8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80034a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034a4:	429a      	cmp	r2, r3
 80034a6:	f080 8187 	bcs.w	80037b8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 8087 	bne.w	80035d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800350a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1da      	bne.n	80034c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3308      	adds	r3, #8
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800353a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800353e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e1      	bne.n	8003512 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3308      	adds	r3, #8
 8003554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800355e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800357a:	e841 2300 	strex	r3, r2, [r1]
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e3      	bne.n	800354e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035a4:	f023 0310 	bic.w	r3, r3, #16
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e4      	bne.n	8003594 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fd80 	bl	80010d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8fd 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035f6:	e0df      	b.n	80037b8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003604:	b29b      	uxth	r3, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80d1 	beq.w	80037bc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800361a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80cc 	beq.w	80037bc <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
 8003648:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1e4      	bne.n	8003624 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	e853 3f00 	ldrex	r3, [r3]
 8003668:	623b      	str	r3, [r7, #32]
   return(result);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003682:	633a      	str	r2, [r7, #48]	; 0x30
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e1      	bne.n	800365a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0310 	bic.w	r3, r3, #16
 80036be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	617b      	str	r3, [r7, #20]
   return(result);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e4      	bne.n	80036aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ea:	4619      	mov	r1, r3
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f87f 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036f2:	e063      	b.n	80037bc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <HAL_UART_IRQHandler+0x59e>
 8003700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 fc14 	bl	8004f44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800371c:	e051      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800372a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d105      	bne.n	8003742 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800373a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03a      	beq.n	80037c0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
    }
    return;
 8003752:	e035      	b.n	80037c0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_UART_IRQHandler+0x5f4>
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fe99 	bl	80044a4 <UART_EndTransmit_IT>
    return;
 8003772:	e026      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_UART_IRQHandler+0x614>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003784:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f001 fbed 	bl	8004f6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003792:	e016      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d010      	beq.n	80037c2 <HAL_UART_IRQHandler+0x642>
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0c      	bge.n	80037c2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 fbd5 	bl	8004f58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037ae:	e008      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037b0:	bf00      	nop
 80037b2:	e006      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
    return;
 80037b4:	bf00      	nop
 80037b6:	e004      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
      return;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_UART_IRQHandler+0x642>
    return;
 80037c0:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80037c2:	37e8      	adds	r7, #232	; 0xe8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4baa      	ldr	r3, [pc, #680]	; (8003ae0 <UART_SetConfig+0x2d8>)
 8003838:	4013      	ands	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a9f      	ldr	r2, [pc, #636]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	4313      	orrs	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 010f 	bic.w	r1, r3, #15
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a90      	ldr	r2, [pc, #576]	; (8003ae8 <UART_SetConfig+0x2e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0xf0>
 80038ac:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <UART_SetConfig+0x2e4>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d81a      	bhi.n	80038f0 <UART_SetConfig+0xe8>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xb8>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e116      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e112      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e10e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e10a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e106      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <UART_SetConfig+0x2e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d138      	bne.n	8003974 <UART_SetConfig+0x16c>
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <UART_SetConfig+0x2e4>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d82d      	bhi.n	800396c <UART_SetConfig+0x164>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x110>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800394d 	.word	0x0800394d
 800391c:	0800396d 	.word	0x0800396d
 8003920:	0800396d 	.word	0x0800396d
 8003924:	0800396d 	.word	0x0800396d
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
 8003934:	0800396d 	.word	0x0800396d
 8003938:	08003955 	.word	0x08003955
 800393c:	0800396d 	.word	0x0800396d
 8003940:	0800396d 	.word	0x0800396d
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003965 	.word	0x08003965
 800394c:	2300      	movs	r3, #0
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e0d8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e0d4      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e0d0      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e0cc      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e0c8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <UART_SetConfig+0x2ec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d125      	bne.n	80039ca <UART_SetConfig+0x1c2>
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <UART_SetConfig+0x2e4>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d016      	beq.n	80039ba <UART_SetConfig+0x1b2>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d818      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d00a      	beq.n	80039aa <UART_SetConfig+0x1a2>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d814      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <UART_SetConfig+0x19a>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d008      	beq.n	80039b2 <UART_SetConfig+0x1aa>
 80039a0:	e00f      	b.n	80039c2 <UART_SetConfig+0x1ba>
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a8:	e0ad      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b0:	e0a9      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039b2:	2304      	movs	r3, #4
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b8:	e0a5      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ba:	2308      	movs	r3, #8
 80039bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c0:	e0a1      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039c2:	2310      	movs	r3, #16
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c8:	e09d      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	; (8003af8 <UART_SetConfig+0x2f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d125      	bne.n	8003a20 <UART_SetConfig+0x218>
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <UART_SetConfig+0x2e4>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039de:	2bc0      	cmp	r3, #192	; 0xc0
 80039e0:	d016      	beq.n	8003a10 <UART_SetConfig+0x208>
 80039e2:	2bc0      	cmp	r3, #192	; 0xc0
 80039e4:	d818      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d00a      	beq.n	8003a00 <UART_SetConfig+0x1f8>
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d814      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x1f0>
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d008      	beq.n	8003a08 <UART_SetConfig+0x200>
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x210>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e082      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a06:	e07e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e07a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a10:	2308      	movs	r3, #8
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a16:	e076      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1e:	e072      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <UART_SetConfig+0x2f4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12a      	bne.n	8003a80 <UART_SetConfig+0x278>
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a38:	d01a      	beq.n	8003a70 <UART_SetConfig+0x268>
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d81b      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d00c      	beq.n	8003a60 <UART_SetConfig+0x258>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d815      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <UART_SetConfig+0x250>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d008      	beq.n	8003a68 <UART_SetConfig+0x260>
 8003a56:	e00f      	b.n	8003a78 <UART_SetConfig+0x270>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e052      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a66:	e04e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e04a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a70:	2308      	movs	r3, #8
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e046      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7e:	e042      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d13a      	bne.n	8003b00 <UART_SetConfig+0x2f8>
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a98:	d01a      	beq.n	8003ad0 <UART_SetConfig+0x2c8>
 8003a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9e:	d81b      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	d00c      	beq.n	8003ac0 <UART_SetConfig+0x2b8>
 8003aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aaa:	d815      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <UART_SetConfig+0x2b0>
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d008      	beq.n	8003ac8 <UART_SetConfig+0x2c0>
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x2d0>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e022      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e01e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e016      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e012      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ae0:	cfff69f3 	.word	0xcfff69f3
 8003ae4:	40008000 	.word	0x40008000
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40004400 	.word	0x40004400
 8003af4:	40004800 	.word	0x40004800
 8003af8:	40004c00 	.word	0x40004c00
 8003afc:	40005000 	.word	0x40005000
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4aae      	ldr	r2, [pc, #696]	; (8003dc4 <UART_SetConfig+0x5bc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f040 8097 	bne.w	8003c40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d823      	bhi.n	8003b62 <UART_SetConfig+0x35a>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x318>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b53 	.word	0x08003b53
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7fe fbec 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fb4d 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8130 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d305      	bcc.n	8003ba6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d903      	bls.n	8003bae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bac:	e113      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	4a84      	ldr	r2, [pc, #528]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bd0:	f7fc fb66 	bl	80002a0 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	020b      	lsls	r3, r1, #8
 8003be6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bea:	0202      	lsls	r2, r0, #8
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	6849      	ldr	r1, [r1, #4]
 8003bf0:	0849      	lsrs	r1, r1, #1
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	eb12 0804 	adds.w	r8, r2, r4
 8003bfc:	eb43 0905 	adc.w	r9, r3, r5
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	469a      	mov	sl, r3
 8003c08:	4693      	mov	fp, r2
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	4640      	mov	r0, r8
 8003c10:	4649      	mov	r1, r9
 8003c12:	f7fc fb45 	bl	80002a0 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c24:	d308      	bcc.n	8003c38 <UART_SetConfig+0x430>
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d204      	bcs.n	8003c38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e0ce      	b.n	8003dd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c3e:	e0ca      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d166      	bne.n	8003d18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d827      	bhi.n	8003ca2 <UART_SetConfig+0x49a>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x450>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fb50 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c82:	e014      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fb62 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8a:	e010      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c90:	e00d      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe faad 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca0:	e005      	b.n	8003cae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8090 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc8:	005a      	lsls	r2, r3, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d916      	bls.n	8003d10 <UART_SetConfig+0x508>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d212      	bcs.n	8003d10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	8bfb      	ldrh	r3, [r7, #30]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	8bfa      	ldrh	r2, [r7, #30]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e062      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d16:	e05e      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x56a>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x520>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fae8 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fafa 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe fa45 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d028      	beq.n	8003dd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d910      	bls.n	8003dd0 <UART_SetConfig+0x5c8>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d20c      	bcs.n	8003dd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x5ce>
 8003dc2:	bf00      	nop
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	08006050 	.word	0x08006050
      }
      else
      {
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003df2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3730      	adds	r7, #48	; 0x30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b098      	sub	sp, #96	; 0x60
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fc ffa2 	bl	8000e9c <HAL_GetTick>
 8003f58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d12f      	bne.n	8003fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f88e 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e063      	b.n	8004090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d149      	bne.n	800406a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f857 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03c      	beq.n	800406a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
 8004010:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	60fb      	str	r3, [r7, #12]
   return(result);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	617b      	str	r3, [r7, #20]
   return(result);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e012      	b.n	8004090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3758      	adds	r7, #88	; 0x58
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e049      	b.n	800413e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d045      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fc fef3 	bl	8000e9c <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e048      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d031      	beq.n	800413e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d110      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f95b 	bl	80043ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2208      	movs	r2, #8
 80040fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e029      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004118:	d111      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f941 	bl	80043ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d0a6      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b0a3      	sub	sp, #140	; 0x8c
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419a:	d10e      	bne.n	80041ba <UART_Start_Receive_IT+0x52>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <UART_Start_Receive_IT+0x48>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041ae:	e02d      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041b8:	e028      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <UART_Start_Receive_IT+0x76>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <UART_Start_Receive_IT+0x6c>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041d2:	e01b      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	227f      	movs	r2, #127	; 0x7f
 80041d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041dc:	e016      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e6:	d10d      	bne.n	8004204 <UART_Start_Receive_IT+0x9c>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d104      	bne.n	80041fa <UART_Start_Receive_IT+0x92>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	227f      	movs	r2, #127	; 0x7f
 80041f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80041f8:	e008      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	223f      	movs	r2, #63	; 0x3f
 80041fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004202:	e003      	b.n	800420c <UART_Start_Receive_IT+0xa4>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2222      	movs	r2, #34	; 0x22
 8004218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800422c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004240:	673a      	str	r2, [r7, #112]	; 0x70
 8004242:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004246:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800424e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800425c:	d14f      	bne.n	80042fe <UART_Start_Receive_IT+0x196>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	429a      	cmp	r2, r3
 8004268:	d349      	bcc.n	80042fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004272:	d107      	bne.n	8004284 <UART_Start_Receive_IT+0x11c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a47      	ldr	r2, [pc, #284]	; (800439c <UART_Start_Receive_IT+0x234>)
 8004280:	675a      	str	r2, [r3, #116]	; 0x74
 8004282:	e002      	b.n	800428a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a46      	ldr	r2, [pc, #280]	; (80043a0 <UART_Start_Receive_IT+0x238>)
 8004288:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e4      	bne.n	8004292 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80042e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_Start_Receive_IT+0x160>
 80042fc:	e046      	b.n	800438c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d107      	bne.n	8004318 <UART_Start_Receive_IT+0x1b0>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <UART_Start_Receive_IT+0x23c>)
 8004314:	675a      	str	r2, [r3, #116]	; 0x74
 8004316:	e002      	b.n	800431e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <UART_Start_Receive_IT+0x240>)
 800431c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800433a:	677b      	str	r3, [r7, #116]	; 0x74
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
 8004346:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e6      	bne.n	8004326 <UART_Start_Receive_IT+0x1be>
 8004358:	e018      	b.n	800438c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004378:	623b      	str	r3, [r7, #32]
 800437a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	378c      	adds	r7, #140	; 0x8c
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	08004bd9 	.word	0x08004bd9
 80043a0:	08004875 	.word	0x08004875
 80043a4:	080046b9 	.word	0x080046b9
 80043a8:	080044fd 	.word	0x080044fd

080043ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b095      	sub	sp, #84	; 0x54
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40
 80043d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e6      	bne.n	80043b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800440a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d118      	bne.n	8004458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0310 	bic.w	r3, r3, #16
 800443a:	647b      	str	r3, [r7, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800446c:	bf00      	nop
 800446e:	3754      	adds	r7, #84	; 0x54
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff f9a0 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	613b      	str	r3, [r7, #16]
   return(result);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e6      	bne.n	80044ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff f96b 	bl	80037c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f2:	bf00      	nop
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b09c      	sub	sp, #112	; 0x70
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800450a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004514:	2b22      	cmp	r3, #34	; 0x22
 8004516:	f040 80be 	bne.w	8004696 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004524:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004528:	b2d9      	uxtb	r1, r3
 800452a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800452e:	b2da      	uxtb	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	400a      	ands	r2, r1
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 80a3 	bne.w	80046aa <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456c:	e853 3f00 	ldrex	r3, [r3]
 8004570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004578:	66bb      	str	r3, [r7, #104]	; 0x68
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004582:	65bb      	str	r3, [r7, #88]	; 0x58
 8004584:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004586:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004588:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e6      	bne.n	8004564 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	667b      	str	r3, [r7, #100]	; 0x64
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80045b6:	647a      	str	r2, [r7, #68]	; 0x44
 80045b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a34      	ldr	r2, [pc, #208]	; (80046b4 <UART_RxISR_8BIT+0x1b8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d01f      	beq.n	8004628 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d018      	beq.n	8004628 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	623b      	str	r3, [r7, #32]
   return(result);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800460a:	663b      	str	r3, [r7, #96]	; 0x60
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004614:	633b      	str	r3, [r7, #48]	; 0x30
 8004616:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800461a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e6      	bne.n	80045f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d12e      	bne.n	800468e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	60fb      	str	r3, [r7, #12]
   return(result);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	617b      	str	r3, [r7, #20]
   return(result);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d103      	bne.n	800467e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2210      	movs	r2, #16
 800467c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff f8b2 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800468c:	e00d      	b.n	80046aa <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fb ff84 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8004694:	e009      	b.n	80046aa <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	8b1b      	ldrh	r3, [r3, #24]
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	b292      	uxth	r2, r2
 80046a8:	831a      	strh	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	3770      	adds	r7, #112	; 0x70
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40008000 	.word	0x40008000

080046b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b09c      	sub	sp, #112	; 0x70
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80046c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d0:	2b22      	cmp	r3, #34	; 0x22
 80046d2:	f040 80be 	bne.w	8004852 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80046e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80046ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80046ee:	4013      	ands	r3, r2
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 80a3 	bne.w	8004866 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800472e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004734:	667b      	str	r3, [r7, #100]	; 0x64
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
 8004740:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004744:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800474c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e6      	bne.n	8004720 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3308      	adds	r3, #8
 8004770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004772:	643a      	str	r2, [r7, #64]	; 0x40
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a34      	ldr	r2, [pc, #208]	; (8004870 <UART_RxISR_16BIT+0x1b8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d01f      	beq.n	80047e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d12e      	bne.n	800484a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0310 	bic.w	r3, r3, #16
 8004806:	65bb      	str	r3, [r7, #88]	; 0x58
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b10      	cmp	r3, #16
 8004830:	d103      	bne.n	800483a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2210      	movs	r2, #16
 8004838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fe ffd4 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004848:	e00d      	b.n	8004866 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fb fea6 	bl	800059c <HAL_UART_RxCpltCallback>
}
 8004850:	e009      	b.n	8004866 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	8b1b      	ldrh	r3, [r3, #24]
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	b292      	uxth	r2, r2
 8004864:	831a      	strh	r2, [r3, #24]
}
 8004866:	bf00      	nop
 8004868:	3770      	adds	r7, #112	; 0x70
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40008000 	.word	0x40008000

08004874 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0ac      	sub	sp, #176	; 0xb0
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004882:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	f040 8182 	bne.w	8004bb4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80048b6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048ba:	e125      	b.n	8004b08 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80048c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80048ca:	b2d9      	uxtb	r1, r3
 80048cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	400a      	ands	r2, r1
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d053      	beq.n	80049b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800490e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <UART_RxISR_8BIT_FIFOEN+0xca>
 800491a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2201      	movs	r2, #1
 800492c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f043 0201 	orr.w	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800493e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2202      	movs	r2, #2
 800495c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f043 0204 	orr.w	r2, r3, #4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800496e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d011      	beq.n	800499e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800497a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2204      	movs	r2, #4
 800498c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f043 0202 	orr.w	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fe ff17 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80a2 	bne.w	8004b08 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049e8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80049f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e4      	bne.n	80049c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3308      	adds	r3, #8
 8004a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a22:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e1      	bne.n	80049fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a60      	ldr	r2, [pc, #384]	; (8004bd0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d021      	beq.n	8004a98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a84:	657b      	str	r3, [r7, #84]	; 0x54
 8004a86:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e4      	bne.n	8004a62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d130      	bne.n	8004b02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f023 0310 	bic.w	r3, r3, #16
 8004aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e4      	bne.n	8004aa6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d103      	bne.n	8004af2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fe fe78 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
 8004b00:	e002      	b.n	8004b08 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fb fd4a 	bl	800059c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f aecf 	bne.w	80048bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004b28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d04b      	beq.n	8004bc8 <UART_RxISR_8BIT_FIFOEN+0x354>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004b36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d244      	bcs.n	8004bc8 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3308      	adds	r3, #8
 8004b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a16      	ldr	r2, [pc, #88]	; (8004bd4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8004b7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f043 0320 	orr.w	r3, r3, #32
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e4      	bne.n	8004b7c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bb2:	e009      	b.n	8004bc8 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	8b1b      	ldrh	r3, [r3, #24]
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0208 	orr.w	r2, r2, #8
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	831a      	strh	r2, [r3, #24]
}
 8004bc8:	bf00      	nop
 8004bca:	37b0      	adds	r7, #176	; 0xb0
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40008000 	.word	0x40008000
 8004bd4:	080044fd 	.word	0x080044fd

08004bd8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b0ae      	sub	sp, #184	; 0xb8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004be6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0e:	2b22      	cmp	r3, #34	; 0x22
 8004c10:	f040 8186 	bne.w	8004f20 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c1a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c1e:	e129      	b.n	8004e74 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c26:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004c32:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004c36:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c48:	1c9a      	adds	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d053      	beq.n	8004d1e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d011      	beq.n	8004cd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d011      	beq.n	8004d06 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f043 0202 	orr.w	r2, r3, #2
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d006      	beq.n	8004d1e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fe fd63 	bl	80037dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 80a4 	bne.w	8004e74 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d52:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e2      	bne.n	8004d2c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e1      	bne.n	8004d66 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a60      	ldr	r2, [pc, #384]	; (8004f3c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d021      	beq.n	8004e04 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01a      	beq.n	8004e04 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e4      	bne.n	8004dce <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d130      	bne.n	8004e6e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
 8004e36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e4      	bne.n	8004e12 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d103      	bne.n	8004e5e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2210      	movs	r2, #16
 8004e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fe fcc2 	bl	80037f0 <HAL_UARTEx_RxEventCallback>
 8004e6c:	e002      	b.n	8004e74 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fb fb94 	bl	800059c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e74:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d006      	beq.n	8004e8a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f aecb 	bne.w	8004c20 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e90:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e94:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d04b      	beq.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x35c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ea2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d244      	bcs.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ece:	633a      	str	r2, [r7, #48]	; 0x30
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e3      	bne.n	8004eaa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8004ee6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f043 0320 	orr.w	r3, r3, #32
 8004efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	617b      	str	r3, [r7, #20]
   return(result);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e4      	bne.n	8004ee8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f1e:	e009      	b.n	8004f34 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	8b1b      	ldrh	r3, [r3, #24]
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0208 	orr.w	r2, r2, #8
 8004f30:	b292      	uxth	r2, r2
 8004f32:	831a      	strh	r2, [r3, #24]
}
 8004f34:	bf00      	nop
 8004f36:	37b8      	adds	r7, #184	; 0xb8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40008000 	.word	0x40008000
 8004f40:	080046b9 	.word	0x080046b9

08004f44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e027      	b.n	8004fe6 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fc4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005006:	2302      	movs	r3, #2
 8005008:	e02d      	b.n	8005066 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2224      	movs	r2, #36	; 0x24
 8005016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f850 	bl	80050ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005082:	2302      	movs	r3, #2
 8005084:	e02d      	b.n	80050e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2224      	movs	r2, #36	; 0x24
 8005092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f812 	bl	80050ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d108      	bne.n	800510e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800510c:	e031      	b.n	8005172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800510e:	2308      	movs	r3, #8
 8005110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005112:	2308      	movs	r3, #8
 8005114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	0e5b      	lsrs	r3, r3, #25
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	0f5b      	lsrs	r3, r3, #29
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	7b3a      	ldrb	r2, [r7, #12]
 800513a:	4911      	ldr	r1, [pc, #68]	; (8005180 <UARTEx_SetNbDataToProcess+0x94>)
 800513c:	5c8a      	ldrb	r2, [r1, r2]
 800513e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005142:	7b3a      	ldrb	r2, [r7, #12]
 8005144:	490f      	ldr	r1, [pc, #60]	; (8005184 <UARTEx_SetNbDataToProcess+0x98>)
 8005146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005148:	fb93 f3f2 	sdiv	r3, r3, r2
 800514c:	b29a      	uxth	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	7b7a      	ldrb	r2, [r7, #13]
 8005158:	4909      	ldr	r1, [pc, #36]	; (8005180 <UARTEx_SetNbDataToProcess+0x94>)
 800515a:	5c8a      	ldrb	r2, [r1, r2]
 800515c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005160:	7b7a      	ldrb	r2, [r7, #13]
 8005162:	4908      	ldr	r1, [pc, #32]	; (8005184 <UARTEx_SetNbDataToProcess+0x98>)
 8005164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005166:	fb93 f3f2 	sdiv	r3, r3, r2
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	08006068 	.word	0x08006068
 8005184:	08006070 	.word	0x08006070

08005188 <std>:
 8005188:	2300      	movs	r3, #0
 800518a:	b510      	push	{r4, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	e9c0 3300 	strd	r3, r3, [r0]
 8005192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005196:	6083      	str	r3, [r0, #8]
 8005198:	8181      	strh	r1, [r0, #12]
 800519a:	6643      	str	r3, [r0, #100]	; 0x64
 800519c:	81c2      	strh	r2, [r0, #14]
 800519e:	6183      	str	r3, [r0, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	2208      	movs	r2, #8
 80051a4:	305c      	adds	r0, #92	; 0x5c
 80051a6:	f000 f8f4 	bl	8005392 <memset>
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <std+0x38>)
 80051ac:	6263      	str	r3, [r4, #36]	; 0x24
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <std+0x3c>)
 80051b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std+0x40>)
 80051b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x44>)
 80051b8:	6224      	str	r4, [r4, #32]
 80051ba:	6323      	str	r3, [r4, #48]	; 0x30
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	0800530d 	.word	0x0800530d
 80051c4:	0800532f 	.word	0x0800532f
 80051c8:	08005367 	.word	0x08005367
 80051cc:	0800538b 	.word	0x0800538b

080051d0 <stdio_exit_handler>:
 80051d0:	4a02      	ldr	r2, [pc, #8]	; (80051dc <stdio_exit_handler+0xc>)
 80051d2:	4903      	ldr	r1, [pc, #12]	; (80051e0 <stdio_exit_handler+0x10>)
 80051d4:	4803      	ldr	r0, [pc, #12]	; (80051e4 <stdio_exit_handler+0x14>)
 80051d6:	f000 b869 	b.w	80052ac <_fwalk_sglue>
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	08005d49 	.word	0x08005d49
 80051e4:	20000018 	.word	0x20000018

080051e8 <cleanup_stdio>:
 80051e8:	6841      	ldr	r1, [r0, #4]
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <cleanup_stdio+0x34>)
 80051ec:	4299      	cmp	r1, r3
 80051ee:	b510      	push	{r4, lr}
 80051f0:	4604      	mov	r4, r0
 80051f2:	d001      	beq.n	80051f8 <cleanup_stdio+0x10>
 80051f4:	f000 fda8 	bl	8005d48 <_fflush_r>
 80051f8:	68a1      	ldr	r1, [r4, #8]
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <cleanup_stdio+0x38>)
 80051fc:	4299      	cmp	r1, r3
 80051fe:	d002      	beq.n	8005206 <cleanup_stdio+0x1e>
 8005200:	4620      	mov	r0, r4
 8005202:	f000 fda1 	bl	8005d48 <_fflush_r>
 8005206:	68e1      	ldr	r1, [r4, #12]
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <cleanup_stdio+0x3c>)
 800520a:	4299      	cmp	r1, r3
 800520c:	d004      	beq.n	8005218 <cleanup_stdio+0x30>
 800520e:	4620      	mov	r0, r4
 8005210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005214:	f000 bd98 	b.w	8005d48 <_fflush_r>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	bf00      	nop
 800521c:	200003bc 	.word	0x200003bc
 8005220:	20000424 	.word	0x20000424
 8005224:	2000048c 	.word	0x2000048c

08005228 <global_stdio_init.part.0>:
 8005228:	b510      	push	{r4, lr}
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <global_stdio_init.part.0+0x30>)
 800522c:	4c0b      	ldr	r4, [pc, #44]	; (800525c <global_stdio_init.part.0+0x34>)
 800522e:	4a0c      	ldr	r2, [pc, #48]	; (8005260 <global_stdio_init.part.0+0x38>)
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	4620      	mov	r0, r4
 8005234:	2200      	movs	r2, #0
 8005236:	2104      	movs	r1, #4
 8005238:	f7ff ffa6 	bl	8005188 <std>
 800523c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005240:	2201      	movs	r2, #1
 8005242:	2109      	movs	r1, #9
 8005244:	f7ff ffa0 	bl	8005188 <std>
 8005248:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800524c:	2202      	movs	r2, #2
 800524e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005252:	2112      	movs	r1, #18
 8005254:	f7ff bf98 	b.w	8005188 <std>
 8005258:	200004f4 	.word	0x200004f4
 800525c:	200003bc 	.word	0x200003bc
 8005260:	080051d1 	.word	0x080051d1

08005264 <__sfp_lock_acquire>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__sfp_lock_acquire+0x8>)
 8005266:	f000 b90d 	b.w	8005484 <__retarget_lock_acquire_recursive>
 800526a:	bf00      	nop
 800526c:	200004fd 	.word	0x200004fd

08005270 <__sfp_lock_release>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__sfp_lock_release+0x8>)
 8005272:	f000 b908 	b.w	8005486 <__retarget_lock_release_recursive>
 8005276:	bf00      	nop
 8005278:	200004fd 	.word	0x200004fd

0800527c <__sinit>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4604      	mov	r4, r0
 8005280:	f7ff fff0 	bl	8005264 <__sfp_lock_acquire>
 8005284:	6a23      	ldr	r3, [r4, #32]
 8005286:	b11b      	cbz	r3, 8005290 <__sinit+0x14>
 8005288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800528c:	f7ff bff0 	b.w	8005270 <__sfp_lock_release>
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <__sinit+0x28>)
 8005292:	6223      	str	r3, [r4, #32]
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <__sinit+0x2c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f5      	bne.n	8005288 <__sinit+0xc>
 800529c:	f7ff ffc4 	bl	8005228 <global_stdio_init.part.0>
 80052a0:	e7f2      	b.n	8005288 <__sinit+0xc>
 80052a2:	bf00      	nop
 80052a4:	080051e9 	.word	0x080051e9
 80052a8:	200004f4 	.word	0x200004f4

080052ac <_fwalk_sglue>:
 80052ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b0:	4607      	mov	r7, r0
 80052b2:	4688      	mov	r8, r1
 80052b4:	4614      	mov	r4, r2
 80052b6:	2600      	movs	r6, #0
 80052b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052bc:	f1b9 0901 	subs.w	r9, r9, #1
 80052c0:	d505      	bpl.n	80052ce <_fwalk_sglue+0x22>
 80052c2:	6824      	ldr	r4, [r4, #0]
 80052c4:	2c00      	cmp	r4, #0
 80052c6:	d1f7      	bne.n	80052b8 <_fwalk_sglue+0xc>
 80052c8:	4630      	mov	r0, r6
 80052ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ce:	89ab      	ldrh	r3, [r5, #12]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d907      	bls.n	80052e4 <_fwalk_sglue+0x38>
 80052d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052d8:	3301      	adds	r3, #1
 80052da:	d003      	beq.n	80052e4 <_fwalk_sglue+0x38>
 80052dc:	4629      	mov	r1, r5
 80052de:	4638      	mov	r0, r7
 80052e0:	47c0      	blx	r8
 80052e2:	4306      	orrs	r6, r0
 80052e4:	3568      	adds	r5, #104	; 0x68
 80052e6:	e7e9      	b.n	80052bc <_fwalk_sglue+0x10>

080052e8 <iprintf>:
 80052e8:	b40f      	push	{r0, r1, r2, r3}
 80052ea:	b507      	push	{r0, r1, r2, lr}
 80052ec:	4906      	ldr	r1, [pc, #24]	; (8005308 <iprintf+0x20>)
 80052ee:	ab04      	add	r3, sp, #16
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f6:	6881      	ldr	r1, [r0, #8]
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	f000 f9f5 	bl	80056e8 <_vfiprintf_r>
 80052fe:	b003      	add	sp, #12
 8005300:	f85d eb04 	ldr.w	lr, [sp], #4
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	20000064 	.word	0x20000064

0800530c <__sread>:
 800530c:	b510      	push	{r4, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	f000 f868 	bl	80053e8 <_read_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	bfab      	itete	ge
 800531c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800531e:	89a3      	ldrhlt	r3, [r4, #12]
 8005320:	181b      	addge	r3, r3, r0
 8005322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005326:	bfac      	ite	ge
 8005328:	6563      	strge	r3, [r4, #84]	; 0x54
 800532a:	81a3      	strhlt	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__swrite>:
 800532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005332:	461f      	mov	r7, r3
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	05db      	lsls	r3, r3, #23
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4616      	mov	r6, r2
 800533e:	d505      	bpl.n	800534c <__swrite+0x1e>
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2302      	movs	r3, #2
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f83c 	bl	80053c4 <_lseek_r>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	4628      	mov	r0, r5
 800535e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	f000 b853 	b.w	800540c <_write_r>

08005366 <__sseek>:
 8005366:	b510      	push	{r4, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536e:	f000 f829 	bl	80053c4 <_lseek_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	bf15      	itete	ne
 8005378:	6560      	strne	r0, [r4, #84]	; 0x54
 800537a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800537e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005382:	81a3      	strheq	r3, [r4, #12]
 8005384:	bf18      	it	ne
 8005386:	81a3      	strhne	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__sclose>:
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 b809 	b.w	80053a4 <_close_r>

08005392 <memset>:
 8005392:	4402      	add	r2, r0
 8005394:	4603      	mov	r3, r0
 8005396:	4293      	cmp	r3, r2
 8005398:	d100      	bne.n	800539c <memset+0xa>
 800539a:	4770      	bx	lr
 800539c:	f803 1b01 	strb.w	r1, [r3], #1
 80053a0:	e7f9      	b.n	8005396 <memset+0x4>
	...

080053a4 <_close_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d06      	ldr	r5, [pc, #24]	; (80053c0 <_close_r+0x1c>)
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f7fb fc65 	bl	8000c7e <_close>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_close_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_close_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200004f8 	.word	0x200004f8

080053c4 <_lseek_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_lseek_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fb fc7a 	bl	8000ccc <_lseek>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_lseek_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_lseek_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200004f8 	.word	0x200004f8

080053e8 <_read_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	; (8005408 <_read_r+0x20>)
 80053ec:	4604      	mov	r4, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fb fc24 	bl	8000c44 <_read>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_read_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_read_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200004f8 	.word	0x200004f8

0800540c <_write_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d07      	ldr	r5, [pc, #28]	; (800542c <_write_r+0x20>)
 8005410:	4604      	mov	r4, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	2200      	movs	r2, #0
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fb f926 	bl	800066c <_write>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_write_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_write_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	200004f8 	.word	0x200004f8

08005430 <__errno>:
 8005430:	4b01      	ldr	r3, [pc, #4]	; (8005438 <__errno+0x8>)
 8005432:	6818      	ldr	r0, [r3, #0]
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000064 	.word	0x20000064

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4d0d      	ldr	r5, [pc, #52]	; (8005474 <__libc_init_array+0x38>)
 8005440:	4c0d      	ldr	r4, [pc, #52]	; (8005478 <__libc_init_array+0x3c>)
 8005442:	1b64      	subs	r4, r4, r5
 8005444:	10a4      	asrs	r4, r4, #2
 8005446:	2600      	movs	r6, #0
 8005448:	42a6      	cmp	r6, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	4d0b      	ldr	r5, [pc, #44]	; (800547c <__libc_init_array+0x40>)
 800544e:	4c0c      	ldr	r4, [pc, #48]	; (8005480 <__libc_init_array+0x44>)
 8005450:	f000 fdcc 	bl	8005fec <_init>
 8005454:	1b64      	subs	r4, r4, r5
 8005456:	10a4      	asrs	r4, r4, #2
 8005458:	2600      	movs	r6, #0
 800545a:	42a6      	cmp	r6, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f855 3b04 	ldr.w	r3, [r5], #4
 8005464:	4798      	blx	r3
 8005466:	3601      	adds	r6, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	f855 3b04 	ldr.w	r3, [r5], #4
 800546e:	4798      	blx	r3
 8005470:	3601      	adds	r6, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	080060b4 	.word	0x080060b4
 8005478:	080060b4 	.word	0x080060b4
 800547c:	080060b4 	.word	0x080060b4
 8005480:	080060b8 	.word	0x080060b8

08005484 <__retarget_lock_acquire_recursive>:
 8005484:	4770      	bx	lr

08005486 <__retarget_lock_release_recursive>:
 8005486:	4770      	bx	lr

08005488 <memcpy>:
 8005488:	440a      	add	r2, r1
 800548a:	4291      	cmp	r1, r2
 800548c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005490:	d100      	bne.n	8005494 <memcpy+0xc>
 8005492:	4770      	bx	lr
 8005494:	b510      	push	{r4, lr}
 8005496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800549e:	4291      	cmp	r1, r2
 80054a0:	d1f9      	bne.n	8005496 <memcpy+0xe>
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <_free_r>:
 80054a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054a6:	2900      	cmp	r1, #0
 80054a8:	d044      	beq.n	8005534 <_free_r+0x90>
 80054aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ae:	9001      	str	r0, [sp, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f1a1 0404 	sub.w	r4, r1, #4
 80054b6:	bfb8      	it	lt
 80054b8:	18e4      	addlt	r4, r4, r3
 80054ba:	f000 f8df 	bl	800567c <__malloc_lock>
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <_free_r+0x94>)
 80054c0:	9801      	ldr	r0, [sp, #4]
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	b933      	cbnz	r3, 80054d4 <_free_r+0x30>
 80054c6:	6063      	str	r3, [r4, #4]
 80054c8:	6014      	str	r4, [r2, #0]
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d0:	f000 b8da 	b.w	8005688 <__malloc_unlock>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d908      	bls.n	80054ea <_free_r+0x46>
 80054d8:	6825      	ldr	r5, [r4, #0]
 80054da:	1961      	adds	r1, r4, r5
 80054dc:	428b      	cmp	r3, r1
 80054de:	bf01      	itttt	eq
 80054e0:	6819      	ldreq	r1, [r3, #0]
 80054e2:	685b      	ldreq	r3, [r3, #4]
 80054e4:	1949      	addeq	r1, r1, r5
 80054e6:	6021      	streq	r1, [r4, #0]
 80054e8:	e7ed      	b.n	80054c6 <_free_r+0x22>
 80054ea:	461a      	mov	r2, r3
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	b10b      	cbz	r3, 80054f4 <_free_r+0x50>
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d9fa      	bls.n	80054ea <_free_r+0x46>
 80054f4:	6811      	ldr	r1, [r2, #0]
 80054f6:	1855      	adds	r5, r2, r1
 80054f8:	42a5      	cmp	r5, r4
 80054fa:	d10b      	bne.n	8005514 <_free_r+0x70>
 80054fc:	6824      	ldr	r4, [r4, #0]
 80054fe:	4421      	add	r1, r4
 8005500:	1854      	adds	r4, r2, r1
 8005502:	42a3      	cmp	r3, r4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	d1e0      	bne.n	80054ca <_free_r+0x26>
 8005508:	681c      	ldr	r4, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	6053      	str	r3, [r2, #4]
 800550e:	440c      	add	r4, r1
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	e7da      	b.n	80054ca <_free_r+0x26>
 8005514:	d902      	bls.n	800551c <_free_r+0x78>
 8005516:	230c      	movs	r3, #12
 8005518:	6003      	str	r3, [r0, #0]
 800551a:	e7d6      	b.n	80054ca <_free_r+0x26>
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	1961      	adds	r1, r4, r5
 8005520:	428b      	cmp	r3, r1
 8005522:	bf04      	itt	eq
 8005524:	6819      	ldreq	r1, [r3, #0]
 8005526:	685b      	ldreq	r3, [r3, #4]
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	bf04      	itt	eq
 800552c:	1949      	addeq	r1, r1, r5
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	6054      	str	r4, [r2, #4]
 8005532:	e7ca      	b.n	80054ca <_free_r+0x26>
 8005534:	b003      	add	sp, #12
 8005536:	bd30      	pop	{r4, r5, pc}
 8005538:	20000500 	.word	0x20000500

0800553c <sbrk_aligned>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0e      	ldr	r6, [pc, #56]	; (8005578 <sbrk_aligned+0x3c>)
 8005540:	460c      	mov	r4, r1
 8005542:	6831      	ldr	r1, [r6, #0]
 8005544:	4605      	mov	r5, r0
 8005546:	b911      	cbnz	r1, 800554e <sbrk_aligned+0x12>
 8005548:	f000 fcbc 	bl	8005ec4 <_sbrk_r>
 800554c:	6030      	str	r0, [r6, #0]
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fcb7 	bl	8005ec4 <_sbrk_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d00a      	beq.n	8005570 <sbrk_aligned+0x34>
 800555a:	1cc4      	adds	r4, r0, #3
 800555c:	f024 0403 	bic.w	r4, r4, #3
 8005560:	42a0      	cmp	r0, r4
 8005562:	d007      	beq.n	8005574 <sbrk_aligned+0x38>
 8005564:	1a21      	subs	r1, r4, r0
 8005566:	4628      	mov	r0, r5
 8005568:	f000 fcac 	bl	8005ec4 <_sbrk_r>
 800556c:	3001      	adds	r0, #1
 800556e:	d101      	bne.n	8005574 <sbrk_aligned+0x38>
 8005570:	f04f 34ff 	mov.w	r4, #4294967295
 8005574:	4620      	mov	r0, r4
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	20000504 	.word	0x20000504

0800557c <_malloc_r>:
 800557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005580:	1ccd      	adds	r5, r1, #3
 8005582:	f025 0503 	bic.w	r5, r5, #3
 8005586:	3508      	adds	r5, #8
 8005588:	2d0c      	cmp	r5, #12
 800558a:	bf38      	it	cc
 800558c:	250c      	movcc	r5, #12
 800558e:	2d00      	cmp	r5, #0
 8005590:	4607      	mov	r7, r0
 8005592:	db01      	blt.n	8005598 <_malloc_r+0x1c>
 8005594:	42a9      	cmp	r1, r5
 8005596:	d905      	bls.n	80055a4 <_malloc_r+0x28>
 8005598:	230c      	movs	r3, #12
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	2600      	movs	r6, #0
 800559e:	4630      	mov	r0, r6
 80055a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005678 <_malloc_r+0xfc>
 80055a8:	f000 f868 	bl	800567c <__malloc_lock>
 80055ac:	f8d8 3000 	ldr.w	r3, [r8]
 80055b0:	461c      	mov	r4, r3
 80055b2:	bb5c      	cbnz	r4, 800560c <_malloc_r+0x90>
 80055b4:	4629      	mov	r1, r5
 80055b6:	4638      	mov	r0, r7
 80055b8:	f7ff ffc0 	bl	800553c <sbrk_aligned>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	4604      	mov	r4, r0
 80055c0:	d155      	bne.n	800566e <_malloc_r+0xf2>
 80055c2:	f8d8 4000 	ldr.w	r4, [r8]
 80055c6:	4626      	mov	r6, r4
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	d145      	bne.n	8005658 <_malloc_r+0xdc>
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	d048      	beq.n	8005662 <_malloc_r+0xe6>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	4631      	mov	r1, r6
 80055d4:	4638      	mov	r0, r7
 80055d6:	eb04 0903 	add.w	r9, r4, r3
 80055da:	f000 fc73 	bl	8005ec4 <_sbrk_r>
 80055de:	4581      	cmp	r9, r0
 80055e0:	d13f      	bne.n	8005662 <_malloc_r+0xe6>
 80055e2:	6821      	ldr	r1, [r4, #0]
 80055e4:	1a6d      	subs	r5, r5, r1
 80055e6:	4629      	mov	r1, r5
 80055e8:	4638      	mov	r0, r7
 80055ea:	f7ff ffa7 	bl	800553c <sbrk_aligned>
 80055ee:	3001      	adds	r0, #1
 80055f0:	d037      	beq.n	8005662 <_malloc_r+0xe6>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	442b      	add	r3, r5
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	f8d8 3000 	ldr.w	r3, [r8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d038      	beq.n	8005672 <_malloc_r+0xf6>
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	42a2      	cmp	r2, r4
 8005604:	d12b      	bne.n	800565e <_malloc_r+0xe2>
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e00f      	b.n	800562c <_malloc_r+0xb0>
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	1b52      	subs	r2, r2, r5
 8005610:	d41f      	bmi.n	8005652 <_malloc_r+0xd6>
 8005612:	2a0b      	cmp	r2, #11
 8005614:	d917      	bls.n	8005646 <_malloc_r+0xca>
 8005616:	1961      	adds	r1, r4, r5
 8005618:	42a3      	cmp	r3, r4
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	6059      	strne	r1, [r3, #4]
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	bf08      	it	eq
 8005624:	f8c8 1000 	streq.w	r1, [r8]
 8005628:	5162      	str	r2, [r4, r5]
 800562a:	604b      	str	r3, [r1, #4]
 800562c:	4638      	mov	r0, r7
 800562e:	f104 060b 	add.w	r6, r4, #11
 8005632:	f000 f829 	bl	8005688 <__malloc_unlock>
 8005636:	f026 0607 	bic.w	r6, r6, #7
 800563a:	1d23      	adds	r3, r4, #4
 800563c:	1af2      	subs	r2, r6, r3
 800563e:	d0ae      	beq.n	800559e <_malloc_r+0x22>
 8005640:	1b9b      	subs	r3, r3, r6
 8005642:	50a3      	str	r3, [r4, r2]
 8005644:	e7ab      	b.n	800559e <_malloc_r+0x22>
 8005646:	42a3      	cmp	r3, r4
 8005648:	6862      	ldr	r2, [r4, #4]
 800564a:	d1dd      	bne.n	8005608 <_malloc_r+0x8c>
 800564c:	f8c8 2000 	str.w	r2, [r8]
 8005650:	e7ec      	b.n	800562c <_malloc_r+0xb0>
 8005652:	4623      	mov	r3, r4
 8005654:	6864      	ldr	r4, [r4, #4]
 8005656:	e7ac      	b.n	80055b2 <_malloc_r+0x36>
 8005658:	4634      	mov	r4, r6
 800565a:	6876      	ldr	r6, [r6, #4]
 800565c:	e7b4      	b.n	80055c8 <_malloc_r+0x4c>
 800565e:	4613      	mov	r3, r2
 8005660:	e7cc      	b.n	80055fc <_malloc_r+0x80>
 8005662:	230c      	movs	r3, #12
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	4638      	mov	r0, r7
 8005668:	f000 f80e 	bl	8005688 <__malloc_unlock>
 800566c:	e797      	b.n	800559e <_malloc_r+0x22>
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	e7dc      	b.n	800562c <_malloc_r+0xb0>
 8005672:	605b      	str	r3, [r3, #4]
 8005674:	deff      	udf	#255	; 0xff
 8005676:	bf00      	nop
 8005678:	20000500 	.word	0x20000500

0800567c <__malloc_lock>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__malloc_lock+0x8>)
 800567e:	f7ff bf01 	b.w	8005484 <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	200004fc 	.word	0x200004fc

08005688 <__malloc_unlock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_unlock+0x8>)
 800568a:	f7ff befc 	b.w	8005486 <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	200004fc 	.word	0x200004fc

08005694 <__sfputc_r>:
 8005694:	6893      	ldr	r3, [r2, #8]
 8005696:	3b01      	subs	r3, #1
 8005698:	2b00      	cmp	r3, #0
 800569a:	b410      	push	{r4}
 800569c:	6093      	str	r3, [r2, #8]
 800569e:	da08      	bge.n	80056b2 <__sfputc_r+0x1e>
 80056a0:	6994      	ldr	r4, [r2, #24]
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	db01      	blt.n	80056aa <__sfputc_r+0x16>
 80056a6:	290a      	cmp	r1, #10
 80056a8:	d103      	bne.n	80056b2 <__sfputc_r+0x1e>
 80056aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ae:	f000 bb73 	b.w	8005d98 <__swbuf_r>
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	1c58      	adds	r0, r3, #1
 80056b6:	6010      	str	r0, [r2, #0]
 80056b8:	7019      	strb	r1, [r3, #0]
 80056ba:	4608      	mov	r0, r1
 80056bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <__sfputs_r>:
 80056c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c4:	4606      	mov	r6, r0
 80056c6:	460f      	mov	r7, r1
 80056c8:	4614      	mov	r4, r2
 80056ca:	18d5      	adds	r5, r2, r3
 80056cc:	42ac      	cmp	r4, r5
 80056ce:	d101      	bne.n	80056d4 <__sfputs_r+0x12>
 80056d0:	2000      	movs	r0, #0
 80056d2:	e007      	b.n	80056e4 <__sfputs_r+0x22>
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	463a      	mov	r2, r7
 80056da:	4630      	mov	r0, r6
 80056dc:	f7ff ffda 	bl	8005694 <__sfputc_r>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d1f3      	bne.n	80056cc <__sfputs_r+0xa>
 80056e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056e8 <_vfiprintf_r>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	460d      	mov	r5, r1
 80056ee:	b09d      	sub	sp, #116	; 0x74
 80056f0:	4614      	mov	r4, r2
 80056f2:	4698      	mov	r8, r3
 80056f4:	4606      	mov	r6, r0
 80056f6:	b118      	cbz	r0, 8005700 <_vfiprintf_r+0x18>
 80056f8:	6a03      	ldr	r3, [r0, #32]
 80056fa:	b90b      	cbnz	r3, 8005700 <_vfiprintf_r+0x18>
 80056fc:	f7ff fdbe 	bl	800527c <__sinit>
 8005700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d405      	bmi.n	8005712 <_vfiprintf_r+0x2a>
 8005706:	89ab      	ldrh	r3, [r5, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d402      	bmi.n	8005712 <_vfiprintf_r+0x2a>
 800570c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570e:	f7ff feb9 	bl	8005484 <__retarget_lock_acquire_recursive>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	d501      	bpl.n	800571c <_vfiprintf_r+0x34>
 8005718:	692b      	ldr	r3, [r5, #16]
 800571a:	b99b      	cbnz	r3, 8005744 <_vfiprintf_r+0x5c>
 800571c:	4629      	mov	r1, r5
 800571e:	4630      	mov	r0, r6
 8005720:	f000 fb78 	bl	8005e14 <__swsetup_r>
 8005724:	b170      	cbz	r0, 8005744 <_vfiprintf_r+0x5c>
 8005726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005728:	07dc      	lsls	r4, r3, #31
 800572a:	d504      	bpl.n	8005736 <_vfiprintf_r+0x4e>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	b01d      	add	sp, #116	; 0x74
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	0598      	lsls	r0, r3, #22
 800573a:	d4f7      	bmi.n	800572c <_vfiprintf_r+0x44>
 800573c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573e:	f7ff fea2 	bl	8005486 <__retarget_lock_release_recursive>
 8005742:	e7f3      	b.n	800572c <_vfiprintf_r+0x44>
 8005744:	2300      	movs	r3, #0
 8005746:	9309      	str	r3, [sp, #36]	; 0x24
 8005748:	2320      	movs	r3, #32
 800574a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800574e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005752:	2330      	movs	r3, #48	; 0x30
 8005754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005908 <_vfiprintf_r+0x220>
 8005758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575c:	f04f 0901 	mov.w	r9, #1
 8005760:	4623      	mov	r3, r4
 8005762:	469a      	mov	sl, r3
 8005764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005768:	b10a      	cbz	r2, 800576e <_vfiprintf_r+0x86>
 800576a:	2a25      	cmp	r2, #37	; 0x25
 800576c:	d1f9      	bne.n	8005762 <_vfiprintf_r+0x7a>
 800576e:	ebba 0b04 	subs.w	fp, sl, r4
 8005772:	d00b      	beq.n	800578c <_vfiprintf_r+0xa4>
 8005774:	465b      	mov	r3, fp
 8005776:	4622      	mov	r2, r4
 8005778:	4629      	mov	r1, r5
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff ffa1 	bl	80056c2 <__sfputs_r>
 8005780:	3001      	adds	r0, #1
 8005782:	f000 80a9 	beq.w	80058d8 <_vfiprintf_r+0x1f0>
 8005786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005788:	445a      	add	r2, fp
 800578a:	9209      	str	r2, [sp, #36]	; 0x24
 800578c:	f89a 3000 	ldrb.w	r3, [sl]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a1 	beq.w	80058d8 <_vfiprintf_r+0x1f0>
 8005796:	2300      	movs	r3, #0
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a0:	f10a 0a01 	add.w	sl, sl, #1
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ac:	931a      	str	r3, [sp, #104]	; 0x68
 80057ae:	4654      	mov	r4, sl
 80057b0:	2205      	movs	r2, #5
 80057b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b6:	4854      	ldr	r0, [pc, #336]	; (8005908 <_vfiprintf_r+0x220>)
 80057b8:	f7fa fd22 	bl	8000200 <memchr>
 80057bc:	9a04      	ldr	r2, [sp, #16]
 80057be:	b9d8      	cbnz	r0, 80057f8 <_vfiprintf_r+0x110>
 80057c0:	06d1      	lsls	r1, r2, #27
 80057c2:	bf44      	itt	mi
 80057c4:	2320      	movmi	r3, #32
 80057c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ca:	0713      	lsls	r3, r2, #28
 80057cc:	bf44      	itt	mi
 80057ce:	232b      	movmi	r3, #43	; 0x2b
 80057d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d4:	f89a 3000 	ldrb.w	r3, [sl]
 80057d8:	2b2a      	cmp	r3, #42	; 0x2a
 80057da:	d015      	beq.n	8005808 <_vfiprintf_r+0x120>
 80057dc:	9a07      	ldr	r2, [sp, #28]
 80057de:	4654      	mov	r4, sl
 80057e0:	2000      	movs	r0, #0
 80057e2:	f04f 0c0a 	mov.w	ip, #10
 80057e6:	4621      	mov	r1, r4
 80057e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ec:	3b30      	subs	r3, #48	; 0x30
 80057ee:	2b09      	cmp	r3, #9
 80057f0:	d94d      	bls.n	800588e <_vfiprintf_r+0x1a6>
 80057f2:	b1b0      	cbz	r0, 8005822 <_vfiprintf_r+0x13a>
 80057f4:	9207      	str	r2, [sp, #28]
 80057f6:	e014      	b.n	8005822 <_vfiprintf_r+0x13a>
 80057f8:	eba0 0308 	sub.w	r3, r0, r8
 80057fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	9304      	str	r3, [sp, #16]
 8005804:	46a2      	mov	sl, r4
 8005806:	e7d2      	b.n	80057ae <_vfiprintf_r+0xc6>
 8005808:	9b03      	ldr	r3, [sp, #12]
 800580a:	1d19      	adds	r1, r3, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	9103      	str	r1, [sp, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	bfbb      	ittet	lt
 8005814:	425b      	neglt	r3, r3
 8005816:	f042 0202 	orrlt.w	r2, r2, #2
 800581a:	9307      	strge	r3, [sp, #28]
 800581c:	9307      	strlt	r3, [sp, #28]
 800581e:	bfb8      	it	lt
 8005820:	9204      	strlt	r2, [sp, #16]
 8005822:	7823      	ldrb	r3, [r4, #0]
 8005824:	2b2e      	cmp	r3, #46	; 0x2e
 8005826:	d10c      	bne.n	8005842 <_vfiprintf_r+0x15a>
 8005828:	7863      	ldrb	r3, [r4, #1]
 800582a:	2b2a      	cmp	r3, #42	; 0x2a
 800582c:	d134      	bne.n	8005898 <_vfiprintf_r+0x1b0>
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	9203      	str	r2, [sp, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	bfb8      	it	lt
 800583a:	f04f 33ff 	movlt.w	r3, #4294967295
 800583e:	3402      	adds	r4, #2
 8005840:	9305      	str	r3, [sp, #20]
 8005842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005918 <_vfiprintf_r+0x230>
 8005846:	7821      	ldrb	r1, [r4, #0]
 8005848:	2203      	movs	r2, #3
 800584a:	4650      	mov	r0, sl
 800584c:	f7fa fcd8 	bl	8000200 <memchr>
 8005850:	b138      	cbz	r0, 8005862 <_vfiprintf_r+0x17a>
 8005852:	9b04      	ldr	r3, [sp, #16]
 8005854:	eba0 000a 	sub.w	r0, r0, sl
 8005858:	2240      	movs	r2, #64	; 0x40
 800585a:	4082      	lsls	r2, r0
 800585c:	4313      	orrs	r3, r2
 800585e:	3401      	adds	r4, #1
 8005860:	9304      	str	r3, [sp, #16]
 8005862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005866:	4829      	ldr	r0, [pc, #164]	; (800590c <_vfiprintf_r+0x224>)
 8005868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800586c:	2206      	movs	r2, #6
 800586e:	f7fa fcc7 	bl	8000200 <memchr>
 8005872:	2800      	cmp	r0, #0
 8005874:	d03f      	beq.n	80058f6 <_vfiprintf_r+0x20e>
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <_vfiprintf_r+0x228>)
 8005878:	bb1b      	cbnz	r3, 80058c2 <_vfiprintf_r+0x1da>
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	3307      	adds	r3, #7
 800587e:	f023 0307 	bic.w	r3, r3, #7
 8005882:	3308      	adds	r3, #8
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005888:	443b      	add	r3, r7
 800588a:	9309      	str	r3, [sp, #36]	; 0x24
 800588c:	e768      	b.n	8005760 <_vfiprintf_r+0x78>
 800588e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005892:	460c      	mov	r4, r1
 8005894:	2001      	movs	r0, #1
 8005896:	e7a6      	b.n	80057e6 <_vfiprintf_r+0xfe>
 8005898:	2300      	movs	r3, #0
 800589a:	3401      	adds	r4, #1
 800589c:	9305      	str	r3, [sp, #20]
 800589e:	4619      	mov	r1, r3
 80058a0:	f04f 0c0a 	mov.w	ip, #10
 80058a4:	4620      	mov	r0, r4
 80058a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058aa:	3a30      	subs	r2, #48	; 0x30
 80058ac:	2a09      	cmp	r2, #9
 80058ae:	d903      	bls.n	80058b8 <_vfiprintf_r+0x1d0>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0c6      	beq.n	8005842 <_vfiprintf_r+0x15a>
 80058b4:	9105      	str	r1, [sp, #20]
 80058b6:	e7c4      	b.n	8005842 <_vfiprintf_r+0x15a>
 80058b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80058bc:	4604      	mov	r4, r0
 80058be:	2301      	movs	r3, #1
 80058c0:	e7f0      	b.n	80058a4 <_vfiprintf_r+0x1bc>
 80058c2:	ab03      	add	r3, sp, #12
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	462a      	mov	r2, r5
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <_vfiprintf_r+0x22c>)
 80058ca:	a904      	add	r1, sp, #16
 80058cc:	4630      	mov	r0, r6
 80058ce:	f3af 8000 	nop.w
 80058d2:	4607      	mov	r7, r0
 80058d4:	1c78      	adds	r0, r7, #1
 80058d6:	d1d6      	bne.n	8005886 <_vfiprintf_r+0x19e>
 80058d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058da:	07d9      	lsls	r1, r3, #31
 80058dc:	d405      	bmi.n	80058ea <_vfiprintf_r+0x202>
 80058de:	89ab      	ldrh	r3, [r5, #12]
 80058e0:	059a      	lsls	r2, r3, #22
 80058e2:	d402      	bmi.n	80058ea <_vfiprintf_r+0x202>
 80058e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e6:	f7ff fdce 	bl	8005486 <__retarget_lock_release_recursive>
 80058ea:	89ab      	ldrh	r3, [r5, #12]
 80058ec:	065b      	lsls	r3, r3, #25
 80058ee:	f53f af1d 	bmi.w	800572c <_vfiprintf_r+0x44>
 80058f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f4:	e71c      	b.n	8005730 <_vfiprintf_r+0x48>
 80058f6:	ab03      	add	r3, sp, #12
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	462a      	mov	r2, r5
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <_vfiprintf_r+0x22c>)
 80058fe:	a904      	add	r1, sp, #16
 8005900:	4630      	mov	r0, r6
 8005902:	f000 f879 	bl	80059f8 <_printf_i>
 8005906:	e7e4      	b.n	80058d2 <_vfiprintf_r+0x1ea>
 8005908:	08006078 	.word	0x08006078
 800590c:	08006082 	.word	0x08006082
 8005910:	00000000 	.word	0x00000000
 8005914:	080056c3 	.word	0x080056c3
 8005918:	0800607e 	.word	0x0800607e

0800591c <_printf_common>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	4616      	mov	r6, r2
 8005922:	4699      	mov	r9, r3
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	690b      	ldr	r3, [r1, #16]
 8005928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800592c:	4293      	cmp	r3, r2
 800592e:	bfb8      	it	lt
 8005930:	4613      	movlt	r3, r2
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005938:	4607      	mov	r7, r0
 800593a:	460c      	mov	r4, r1
 800593c:	b10a      	cbz	r2, 8005942 <_printf_common+0x26>
 800593e:	3301      	adds	r3, #1
 8005940:	6033      	str	r3, [r6, #0]
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	0699      	lsls	r1, r3, #26
 8005946:	bf42      	ittt	mi
 8005948:	6833      	ldrmi	r3, [r6, #0]
 800594a:	3302      	addmi	r3, #2
 800594c:	6033      	strmi	r3, [r6, #0]
 800594e:	6825      	ldr	r5, [r4, #0]
 8005950:	f015 0506 	ands.w	r5, r5, #6
 8005954:	d106      	bne.n	8005964 <_printf_common+0x48>
 8005956:	f104 0a19 	add.w	sl, r4, #25
 800595a:	68e3      	ldr	r3, [r4, #12]
 800595c:	6832      	ldr	r2, [r6, #0]
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	42ab      	cmp	r3, r5
 8005962:	dc26      	bgt.n	80059b2 <_printf_common+0x96>
 8005964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005968:	1e13      	subs	r3, r2, #0
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	bf18      	it	ne
 800596e:	2301      	movne	r3, #1
 8005970:	0692      	lsls	r2, r2, #26
 8005972:	d42b      	bmi.n	80059cc <_printf_common+0xb0>
 8005974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005978:	4649      	mov	r1, r9
 800597a:	4638      	mov	r0, r7
 800597c:	47c0      	blx	r8
 800597e:	3001      	adds	r0, #1
 8005980:	d01e      	beq.n	80059c0 <_printf_common+0xa4>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	6922      	ldr	r2, [r4, #16]
 8005986:	f003 0306 	and.w	r3, r3, #6
 800598a:	2b04      	cmp	r3, #4
 800598c:	bf02      	ittt	eq
 800598e:	68e5      	ldreq	r5, [r4, #12]
 8005990:	6833      	ldreq	r3, [r6, #0]
 8005992:	1aed      	subeq	r5, r5, r3
 8005994:	68a3      	ldr	r3, [r4, #8]
 8005996:	bf0c      	ite	eq
 8005998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800599c:	2500      	movne	r5, #0
 800599e:	4293      	cmp	r3, r2
 80059a0:	bfc4      	itt	gt
 80059a2:	1a9b      	subgt	r3, r3, r2
 80059a4:	18ed      	addgt	r5, r5, r3
 80059a6:	2600      	movs	r6, #0
 80059a8:	341a      	adds	r4, #26
 80059aa:	42b5      	cmp	r5, r6
 80059ac:	d11a      	bne.n	80059e4 <_printf_common+0xc8>
 80059ae:	2000      	movs	r0, #0
 80059b0:	e008      	b.n	80059c4 <_printf_common+0xa8>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4652      	mov	r2, sl
 80059b6:	4649      	mov	r1, r9
 80059b8:	4638      	mov	r0, r7
 80059ba:	47c0      	blx	r8
 80059bc:	3001      	adds	r0, #1
 80059be:	d103      	bne.n	80059c8 <_printf_common+0xac>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	3501      	adds	r5, #1
 80059ca:	e7c6      	b.n	800595a <_printf_common+0x3e>
 80059cc:	18e1      	adds	r1, r4, r3
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	2030      	movs	r0, #48	; 0x30
 80059d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059d6:	4422      	add	r2, r4
 80059d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e0:	3302      	adds	r3, #2
 80059e2:	e7c7      	b.n	8005974 <_printf_common+0x58>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4622      	mov	r2, r4
 80059e8:	4649      	mov	r1, r9
 80059ea:	4638      	mov	r0, r7
 80059ec:	47c0      	blx	r8
 80059ee:	3001      	adds	r0, #1
 80059f0:	d0e6      	beq.n	80059c0 <_printf_common+0xa4>
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7d9      	b.n	80059aa <_printf_common+0x8e>
	...

080059f8 <_printf_i>:
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	7e0f      	ldrb	r7, [r1, #24]
 80059fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a00:	2f78      	cmp	r7, #120	; 0x78
 8005a02:	4691      	mov	r9, r2
 8005a04:	4680      	mov	r8, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	469a      	mov	sl, r3
 8005a0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a0e:	d807      	bhi.n	8005a20 <_printf_i+0x28>
 8005a10:	2f62      	cmp	r7, #98	; 0x62
 8005a12:	d80a      	bhi.n	8005a2a <_printf_i+0x32>
 8005a14:	2f00      	cmp	r7, #0
 8005a16:	f000 80d4 	beq.w	8005bc2 <_printf_i+0x1ca>
 8005a1a:	2f58      	cmp	r7, #88	; 0x58
 8005a1c:	f000 80c0 	beq.w	8005ba0 <_printf_i+0x1a8>
 8005a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a28:	e03a      	b.n	8005aa0 <_printf_i+0xa8>
 8005a2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a2e:	2b15      	cmp	r3, #21
 8005a30:	d8f6      	bhi.n	8005a20 <_printf_i+0x28>
 8005a32:	a101      	add	r1, pc, #4	; (adr r1, 8005a38 <_printf_i+0x40>)
 8005a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a38:	08005a91 	.word	0x08005a91
 8005a3c:	08005aa5 	.word	0x08005aa5
 8005a40:	08005a21 	.word	0x08005a21
 8005a44:	08005a21 	.word	0x08005a21
 8005a48:	08005a21 	.word	0x08005a21
 8005a4c:	08005a21 	.word	0x08005a21
 8005a50:	08005aa5 	.word	0x08005aa5
 8005a54:	08005a21 	.word	0x08005a21
 8005a58:	08005a21 	.word	0x08005a21
 8005a5c:	08005a21 	.word	0x08005a21
 8005a60:	08005a21 	.word	0x08005a21
 8005a64:	08005ba9 	.word	0x08005ba9
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005b63 	.word	0x08005b63
 8005a70:	08005a21 	.word	0x08005a21
 8005a74:	08005a21 	.word	0x08005a21
 8005a78:	08005bcb 	.word	0x08005bcb
 8005a7c:	08005a21 	.word	0x08005a21
 8005a80:	08005ad1 	.word	0x08005ad1
 8005a84:	08005a21 	.word	0x08005a21
 8005a88:	08005a21 	.word	0x08005a21
 8005a8c:	08005b6b 	.word	0x08005b6b
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	602a      	str	r2, [r5, #0]
 8005a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e09f      	b.n	8005be4 <_printf_i+0x1ec>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	0607      	lsls	r7, r0, #24
 8005aaa:	f103 0104 	add.w	r1, r3, #4
 8005aae:	6029      	str	r1, [r5, #0]
 8005ab0:	d501      	bpl.n	8005ab6 <_printf_i+0xbe>
 8005ab2:	681e      	ldr	r6, [r3, #0]
 8005ab4:	e003      	b.n	8005abe <_printf_i+0xc6>
 8005ab6:	0646      	lsls	r6, r0, #25
 8005ab8:	d5fb      	bpl.n	8005ab2 <_printf_i+0xba>
 8005aba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	da03      	bge.n	8005aca <_printf_i+0xd2>
 8005ac2:	232d      	movs	r3, #45	; 0x2d
 8005ac4:	4276      	negs	r6, r6
 8005ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aca:	485a      	ldr	r0, [pc, #360]	; (8005c34 <_printf_i+0x23c>)
 8005acc:	230a      	movs	r3, #10
 8005ace:	e012      	b.n	8005af6 <_printf_i+0xfe>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6029      	str	r1, [r5, #0]
 8005ad8:	0605      	lsls	r5, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xe8>
 8005adc:	681e      	ldr	r6, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <_printf_i+0xee>
 8005ae0:	0641      	lsls	r1, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xe4>
 8005ae4:	881e      	ldrh	r6, [r3, #0]
 8005ae6:	4853      	ldr	r0, [pc, #332]	; (8005c34 <_printf_i+0x23c>)
 8005ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8005aea:	bf0c      	ite	eq
 8005aec:	2308      	moveq	r3, #8
 8005aee:	230a      	movne	r3, #10
 8005af0:	2100      	movs	r1, #0
 8005af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af6:	6865      	ldr	r5, [r4, #4]
 8005af8:	60a5      	str	r5, [r4, #8]
 8005afa:	2d00      	cmp	r5, #0
 8005afc:	bfa2      	ittt	ge
 8005afe:	6821      	ldrge	r1, [r4, #0]
 8005b00:	f021 0104 	bicge.w	r1, r1, #4
 8005b04:	6021      	strge	r1, [r4, #0]
 8005b06:	b90e      	cbnz	r6, 8005b0c <_printf_i+0x114>
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	d04b      	beq.n	8005ba4 <_printf_i+0x1ac>
 8005b0c:	4615      	mov	r5, r2
 8005b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b12:	fb03 6711 	mls	r7, r3, r1, r6
 8005b16:	5dc7      	ldrb	r7, [r0, r7]
 8005b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b1c:	4637      	mov	r7, r6
 8005b1e:	42bb      	cmp	r3, r7
 8005b20:	460e      	mov	r6, r1
 8005b22:	d9f4      	bls.n	8005b0e <_printf_i+0x116>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d10b      	bne.n	8005b40 <_printf_i+0x148>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07de      	lsls	r6, r3, #31
 8005b2c:	d508      	bpl.n	8005b40 <_printf_i+0x148>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6861      	ldr	r1, [r4, #4]
 8005b32:	4299      	cmp	r1, r3
 8005b34:	bfde      	ittt	le
 8005b36:	2330      	movle	r3, #48	; 0x30
 8005b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b40:	1b52      	subs	r2, r2, r5
 8005b42:	6122      	str	r2, [r4, #16]
 8005b44:	f8cd a000 	str.w	sl, [sp]
 8005b48:	464b      	mov	r3, r9
 8005b4a:	aa03      	add	r2, sp, #12
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fee4 	bl	800591c <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d14a      	bne.n	8005bee <_printf_i+0x1f6>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b004      	add	sp, #16
 8005b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	4833      	ldr	r0, [pc, #204]	; (8005c38 <_printf_i+0x240>)
 8005b6c:	2778      	movs	r7, #120	; 0x78
 8005b6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	6829      	ldr	r1, [r5, #0]
 8005b76:	061f      	lsls	r7, r3, #24
 8005b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b7c:	d402      	bmi.n	8005b84 <_printf_i+0x18c>
 8005b7e:	065f      	lsls	r7, r3, #25
 8005b80:	bf48      	it	mi
 8005b82:	b2b6      	uxthmi	r6, r6
 8005b84:	07df      	lsls	r7, r3, #31
 8005b86:	bf48      	it	mi
 8005b88:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8c:	6029      	str	r1, [r5, #0]
 8005b8e:	bf48      	it	mi
 8005b90:	6023      	strmi	r3, [r4, #0]
 8005b92:	b91e      	cbnz	r6, 8005b9c <_printf_i+0x1a4>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	f023 0320 	bic.w	r3, r3, #32
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	e7a7      	b.n	8005af0 <_printf_i+0xf8>
 8005ba0:	4824      	ldr	r0, [pc, #144]	; (8005c34 <_printf_i+0x23c>)
 8005ba2:	e7e4      	b.n	8005b6e <_printf_i+0x176>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	e7bd      	b.n	8005b24 <_printf_i+0x12c>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6028      	str	r0, [r5, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1c4>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1ca>
 8005bbc:	0670      	lsls	r0, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c0>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4615      	mov	r5, r2
 8005bc8:	e7bc      	b.n	8005b44 <_printf_i+0x14c>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	602a      	str	r2, [r5, #0]
 8005bd0:	681d      	ldr	r5, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f7fa fb12 	bl	8000200 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1ea>
 8005bde:	1b40      	subs	r0, r0, r5
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7aa      	b.n	8005b44 <_printf_i+0x14c>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	462a      	mov	r2, r5
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ad      	beq.n	8005b58 <_printf_i+0x160>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x232>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a6      	b.n	8005b5c <_printf_i+0x164>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09d      	beq.n	8005b58 <_printf_i+0x160>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x216>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x20a>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x226>
 8005c32:	bf00      	nop
 8005c34:	08006089 	.word	0x08006089
 8005c38:	0800609a 	.word	0x0800609a

08005c3c <__sflush_r>:
 8005c3c:	898a      	ldrh	r2, [r1, #12]
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	4605      	mov	r5, r0
 8005c44:	0710      	lsls	r0, r2, #28
 8005c46:	460c      	mov	r4, r1
 8005c48:	d458      	bmi.n	8005cfc <__sflush_r+0xc0>
 8005c4a:	684b      	ldr	r3, [r1, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	dc05      	bgt.n	8005c5c <__sflush_r+0x20>
 8005c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dc02      	bgt.n	8005c5c <__sflush_r+0x20>
 8005c56:	2000      	movs	r0, #0
 8005c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c5e:	2e00      	cmp	r6, #0
 8005c60:	d0f9      	beq.n	8005c56 <__sflush_r+0x1a>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c68:	682f      	ldr	r7, [r5, #0]
 8005c6a:	6a21      	ldr	r1, [r4, #32]
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	d032      	beq.n	8005cd6 <__sflush_r+0x9a>
 8005c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	075a      	lsls	r2, r3, #29
 8005c76:	d505      	bpl.n	8005c84 <__sflush_r+0x48>
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	1ac0      	subs	r0, r0, r3
 8005c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c7e:	b10b      	cbz	r3, 8005c84 <__sflush_r+0x48>
 8005c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c82:	1ac0      	subs	r0, r0, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	4602      	mov	r2, r0
 8005c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c8a:	6a21      	ldr	r1, [r4, #32]
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b0      	blx	r6
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	d106      	bne.n	8005ca4 <__sflush_r+0x68>
 8005c96:	6829      	ldr	r1, [r5, #0]
 8005c98:	291d      	cmp	r1, #29
 8005c9a:	d82b      	bhi.n	8005cf4 <__sflush_r+0xb8>
 8005c9c:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <__sflush_r+0x108>)
 8005c9e:	410a      	asrs	r2, r1
 8005ca0:	07d6      	lsls	r6, r2, #31
 8005ca2:	d427      	bmi.n	8005cf4 <__sflush_r+0xb8>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	6062      	str	r2, [r4, #4]
 8005ca8:	04d9      	lsls	r1, r3, #19
 8005caa:	6922      	ldr	r2, [r4, #16]
 8005cac:	6022      	str	r2, [r4, #0]
 8005cae:	d504      	bpl.n	8005cba <__sflush_r+0x7e>
 8005cb0:	1c42      	adds	r2, r0, #1
 8005cb2:	d101      	bne.n	8005cb8 <__sflush_r+0x7c>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b903      	cbnz	r3, 8005cba <__sflush_r+0x7e>
 8005cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8005cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cbc:	602f      	str	r7, [r5, #0]
 8005cbe:	2900      	cmp	r1, #0
 8005cc0:	d0c9      	beq.n	8005c56 <__sflush_r+0x1a>
 8005cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc6:	4299      	cmp	r1, r3
 8005cc8:	d002      	beq.n	8005cd0 <__sflush_r+0x94>
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f7ff fbea 	bl	80054a4 <_free_r>
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8005cd4:	e7c0      	b.n	8005c58 <__sflush_r+0x1c>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b0      	blx	r6
 8005cdc:	1c41      	adds	r1, r0, #1
 8005cde:	d1c8      	bne.n	8005c72 <__sflush_r+0x36>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0c5      	beq.n	8005c72 <__sflush_r+0x36>
 8005ce6:	2b1d      	cmp	r3, #29
 8005ce8:	d001      	beq.n	8005cee <__sflush_r+0xb2>
 8005cea:	2b16      	cmp	r3, #22
 8005cec:	d101      	bne.n	8005cf2 <__sflush_r+0xb6>
 8005cee:	602f      	str	r7, [r5, #0]
 8005cf0:	e7b1      	b.n	8005c56 <__sflush_r+0x1a>
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	e7ad      	b.n	8005c58 <__sflush_r+0x1c>
 8005cfc:	690f      	ldr	r7, [r1, #16]
 8005cfe:	2f00      	cmp	r7, #0
 8005d00:	d0a9      	beq.n	8005c56 <__sflush_r+0x1a>
 8005d02:	0793      	lsls	r3, r2, #30
 8005d04:	680e      	ldr	r6, [r1, #0]
 8005d06:	bf08      	it	eq
 8005d08:	694b      	ldreq	r3, [r1, #20]
 8005d0a:	600f      	str	r7, [r1, #0]
 8005d0c:	bf18      	it	ne
 8005d0e:	2300      	movne	r3, #0
 8005d10:	eba6 0807 	sub.w	r8, r6, r7
 8005d14:	608b      	str	r3, [r1, #8]
 8005d16:	f1b8 0f00 	cmp.w	r8, #0
 8005d1a:	dd9c      	ble.n	8005c56 <__sflush_r+0x1a>
 8005d1c:	6a21      	ldr	r1, [r4, #32]
 8005d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d20:	4643      	mov	r3, r8
 8005d22:	463a      	mov	r2, r7
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b0      	blx	r6
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dc06      	bgt.n	8005d3a <__sflush_r+0xfe>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e78e      	b.n	8005c58 <__sflush_r+0x1c>
 8005d3a:	4407      	add	r7, r0
 8005d3c:	eba8 0800 	sub.w	r8, r8, r0
 8005d40:	e7e9      	b.n	8005d16 <__sflush_r+0xda>
 8005d42:	bf00      	nop
 8005d44:	dfbffffe 	.word	0xdfbffffe

08005d48 <_fflush_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	690b      	ldr	r3, [r1, #16]
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	b913      	cbnz	r3, 8005d58 <_fflush_r+0x10>
 8005d52:	2500      	movs	r5, #0
 8005d54:	4628      	mov	r0, r5
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	b118      	cbz	r0, 8005d62 <_fflush_r+0x1a>
 8005d5a:	6a03      	ldr	r3, [r0, #32]
 8005d5c:	b90b      	cbnz	r3, 8005d62 <_fflush_r+0x1a>
 8005d5e:	f7ff fa8d 	bl	800527c <__sinit>
 8005d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f3      	beq.n	8005d52 <_fflush_r+0xa>
 8005d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d6c:	07d0      	lsls	r0, r2, #31
 8005d6e:	d404      	bmi.n	8005d7a <_fflush_r+0x32>
 8005d70:	0599      	lsls	r1, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_fflush_r+0x32>
 8005d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d76:	f7ff fb85 	bl	8005484 <__retarget_lock_acquire_recursive>
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	f7ff ff5d 	bl	8005c3c <__sflush_r>
 8005d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d84:	07da      	lsls	r2, r3, #31
 8005d86:	4605      	mov	r5, r0
 8005d88:	d4e4      	bmi.n	8005d54 <_fflush_r+0xc>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	059b      	lsls	r3, r3, #22
 8005d8e:	d4e1      	bmi.n	8005d54 <_fflush_r+0xc>
 8005d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d92:	f7ff fb78 	bl	8005486 <__retarget_lock_release_recursive>
 8005d96:	e7dd      	b.n	8005d54 <_fflush_r+0xc>

08005d98 <__swbuf_r>:
 8005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9a:	460e      	mov	r6, r1
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	4605      	mov	r5, r0
 8005da0:	b118      	cbz	r0, 8005daa <__swbuf_r+0x12>
 8005da2:	6a03      	ldr	r3, [r0, #32]
 8005da4:	b90b      	cbnz	r3, 8005daa <__swbuf_r+0x12>
 8005da6:	f7ff fa69 	bl	800527c <__sinit>
 8005daa:	69a3      	ldr	r3, [r4, #24]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	071a      	lsls	r2, r3, #28
 8005db2:	d525      	bpl.n	8005e00 <__swbuf_r+0x68>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	b31b      	cbz	r3, 8005e00 <__swbuf_r+0x68>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	6922      	ldr	r2, [r4, #16]
 8005dbc:	1a98      	subs	r0, r3, r2
 8005dbe:	6963      	ldr	r3, [r4, #20]
 8005dc0:	b2f6      	uxtb	r6, r6
 8005dc2:	4283      	cmp	r3, r0
 8005dc4:	4637      	mov	r7, r6
 8005dc6:	dc04      	bgt.n	8005dd2 <__swbuf_r+0x3a>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f7ff ffbc 	bl	8005d48 <_fflush_r>
 8005dd0:	b9e0      	cbnz	r0, 8005e0c <__swbuf_r+0x74>
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	6022      	str	r2, [r4, #0]
 8005dde:	701e      	strb	r6, [r3, #0]
 8005de0:	6962      	ldr	r2, [r4, #20]
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d004      	beq.n	8005df2 <__swbuf_r+0x5a>
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	07db      	lsls	r3, r3, #31
 8005dec:	d506      	bpl.n	8005dfc <__swbuf_r+0x64>
 8005dee:	2e0a      	cmp	r6, #10
 8005df0:	d104      	bne.n	8005dfc <__swbuf_r+0x64>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f7ff ffa7 	bl	8005d48 <_fflush_r>
 8005dfa:	b938      	cbnz	r0, 8005e0c <__swbuf_r+0x74>
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f806 	bl	8005e14 <__swsetup_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0d5      	beq.n	8005db8 <__swbuf_r+0x20>
 8005e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e10:	e7f4      	b.n	8005dfc <__swbuf_r+0x64>
	...

08005e14 <__swsetup_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <__swsetup_r+0xac>)
 8005e18:	4605      	mov	r5, r0
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	b118      	cbz	r0, 8005e28 <__swsetup_r+0x14>
 8005e20:	6a03      	ldr	r3, [r0, #32]
 8005e22:	b90b      	cbnz	r3, 8005e28 <__swsetup_r+0x14>
 8005e24:	f7ff fa2a 	bl	800527c <__sinit>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e2e:	0718      	lsls	r0, r3, #28
 8005e30:	d422      	bmi.n	8005e78 <__swsetup_r+0x64>
 8005e32:	06d9      	lsls	r1, r3, #27
 8005e34:	d407      	bmi.n	8005e46 <__swsetup_r+0x32>
 8005e36:	2309      	movs	r3, #9
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	e034      	b.n	8005eb0 <__swsetup_r+0x9c>
 8005e46:	0758      	lsls	r0, r3, #29
 8005e48:	d512      	bpl.n	8005e70 <__swsetup_r+0x5c>
 8005e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e4c:	b141      	cbz	r1, 8005e60 <__swsetup_r+0x4c>
 8005e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e52:	4299      	cmp	r1, r3
 8005e54:	d002      	beq.n	8005e5c <__swsetup_r+0x48>
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7ff fb24 	bl	80054a4 <_free_r>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6363      	str	r3, [r4, #52]	; 0x34
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6063      	str	r3, [r4, #4]
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f043 0308 	orr.w	r3, r3, #8
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	b94b      	cbnz	r3, 8005e90 <__swsetup_r+0x7c>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e86:	d003      	beq.n	8005e90 <__swsetup_r+0x7c>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f850 	bl	8005f30 <__smakebuf_r>
 8005e90:	89a0      	ldrh	r0, [r4, #12]
 8005e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e96:	f010 0301 	ands.w	r3, r0, #1
 8005e9a:	d00a      	beq.n	8005eb2 <__swsetup_r+0x9e>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	6963      	ldr	r3, [r4, #20]
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	61a3      	str	r3, [r4, #24]
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b943      	cbnz	r3, 8005ebc <__swsetup_r+0xa8>
 8005eaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005eae:	d1c4      	bne.n	8005e3a <__swsetup_r+0x26>
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	0781      	lsls	r1, r0, #30
 8005eb4:	bf58      	it	pl
 8005eb6:	6963      	ldrpl	r3, [r4, #20]
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	e7f4      	b.n	8005ea6 <__swsetup_r+0x92>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7f7      	b.n	8005eb0 <__swsetup_r+0x9c>
 8005ec0:	20000064 	.word	0x20000064

08005ec4 <_sbrk_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d06      	ldr	r5, [pc, #24]	; (8005ee0 <_sbrk_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fa ff0a 	bl	8000ce8 <_sbrk>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_sbrk_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_sbrk_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200004f8 	.word	0x200004f8

08005ee4 <__swhatbuf_r>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	b096      	sub	sp, #88	; 0x58
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	461e      	mov	r6, r3
 8005ef4:	da0d      	bge.n	8005f12 <__swhatbuf_r+0x2e>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	bf0c      	ite	eq
 8005f02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f06:	2340      	movne	r3, #64	; 0x40
 8005f08:	2000      	movs	r0, #0
 8005f0a:	6031      	str	r1, [r6, #0]
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	b016      	add	sp, #88	; 0x58
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	466a      	mov	r2, sp
 8005f14:	f000 f848 	bl	8005fa8 <_fstat_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	dbec      	blt.n	8005ef6 <__swhatbuf_r+0x12>
 8005f1c:	9901      	ldr	r1, [sp, #4]
 8005f1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f26:	4259      	negs	r1, r3
 8005f28:	4159      	adcs	r1, r3
 8005f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f2e:	e7eb      	b.n	8005f08 <__swhatbuf_r+0x24>

08005f30 <__smakebuf_r>:
 8005f30:	898b      	ldrh	r3, [r1, #12]
 8005f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f34:	079d      	lsls	r5, r3, #30
 8005f36:	4606      	mov	r6, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	d507      	bpl.n	8005f4c <__smakebuf_r+0x1c>
 8005f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	6123      	str	r3, [r4, #16]
 8005f44:	2301      	movs	r3, #1
 8005f46:	6163      	str	r3, [r4, #20]
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	ab01      	add	r3, sp, #4
 8005f4e:	466a      	mov	r2, sp
 8005f50:	f7ff ffc8 	bl	8005ee4 <__swhatbuf_r>
 8005f54:	9900      	ldr	r1, [sp, #0]
 8005f56:	4605      	mov	r5, r0
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fb0f 	bl	800557c <_malloc_r>
 8005f5e:	b948      	cbnz	r0, 8005f74 <__smakebuf_r+0x44>
 8005f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f64:	059a      	lsls	r2, r3, #22
 8005f66:	d4ef      	bmi.n	8005f48 <__smakebuf_r+0x18>
 8005f68:	f023 0303 	bic.w	r3, r3, #3
 8005f6c:	f043 0302 	orr.w	r3, r3, #2
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	e7e3      	b.n	8005f3c <__smakebuf_r+0xc>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	6020      	str	r0, [r4, #0]
 8005f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7c:	81a3      	strh	r3, [r4, #12]
 8005f7e:	9b00      	ldr	r3, [sp, #0]
 8005f80:	6163      	str	r3, [r4, #20]
 8005f82:	9b01      	ldr	r3, [sp, #4]
 8005f84:	6120      	str	r0, [r4, #16]
 8005f86:	b15b      	cbz	r3, 8005fa0 <__smakebuf_r+0x70>
 8005f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f000 f81d 	bl	8005fcc <_isatty_r>
 8005f92:	b128      	cbz	r0, 8005fa0 <__smakebuf_r+0x70>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	431d      	orrs	r5, r3
 8005fa4:	81a5      	strh	r5, [r4, #12]
 8005fa6:	e7cf      	b.n	8005f48 <__smakebuf_r+0x18>

08005fa8 <_fstat_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_fstat_r+0x20>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f7fa fe6e 	bl	8000c96 <_fstat>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d102      	bne.n	8005fc4 <_fstat_r+0x1c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b103      	cbz	r3, 8005fc4 <_fstat_r+0x1c>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200004f8 	.word	0x200004f8

08005fcc <_isatty_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	; (8005fe8 <_isatty_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fa fe6d 	bl	8000cb6 <_isatty>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_isatty_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_isatty_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	200004f8 	.word	0x200004f8

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr
